"use strict";var t=require("obsidian");function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function r(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function l(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}s((r=r.apply(t,e||[])).next())}))}function i(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function a(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)<0?r=a+1:i=a}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>i(t(e),n)}(t)),{left:r,center:function(t,n,i,a){null==i&&(i=0),null==a&&(a=t.length);const o=r(t,n,i,a-1);return o>i&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)>0?i=a:r=a+1}return r}}}const o=a(i).right;a((function(t){return null===t?NaN:+t})).center;var l=Math.sqrt(50),s=Math.sqrt(10),u=Math.sqrt(2);function f(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=l?10:a>=s?5:a>=u?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=l?10:a>=s?5:a>=u?2:1)}function c(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=l?i*=10:a>=s?i*=5:a>=u&&(i*=2),e<t?-i:i}function h(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function d(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function g(t,e,n=0,r=t.length-1,a=i){for(;r>n;){if(r-n>600){const i=r-n+1,o=e-n+1,l=Math.log(i),s=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*s*(i-s)/i)*(o-i/2<0?-1:1);g(t,e,Math.max(n,Math.floor(e-o*s/i+u)),Math.min(r,Math.floor(e+(i-o)*s/i+u)),a)}const i=t[e];let o=n,l=r;for(p(t,n,e),a(t[r],i)>0&&p(t,n,r);o<l;){for(p(t,o,l),++o,--l;a(t[o],i)<0;)++o;for(;a(t[l],i)>0;)--l}0===a(t[n],i)?p(t,n,l):(++l,p(t,l,r)),l<=e&&(n=l+1),e<=l&&(r=l-1)}return t}function p(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return d(t);if(e>=1)return h(t);var r,i=(r-1)*e,a=Math.floor(i),o=h(g(t,a).subarray(0,a+1));return o+(d(t.subarray(a+1))-o)*(i-a)}}function y(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let i of t)(i=+e(i,++r,t))&&(n+=i)}return n}var v=Array.prototype.slice;function w(t){return t}function x(t){return"translate("+t+",0)"}function b(t){return"translate(0,"+t+")"}function _(t){return e=>+t(e)}function A(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function M(){return!this.__axis}function T(t,e){var n=[],r=null,i=null,a=6,o=6,l=3,s="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,u=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",c=1===t||3===t?x:b;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==i?e.tickFormat?e.tickFormat.apply(e,n):w:i,p=Math.max(a,0)+l,m=e.range(),y=+m[0]+s,v=+m[m.length-1]+s,x=(e.bandwidth?A:_)(e.copy(),s),b=h.selection?h.selection():h,T=b.selectAll(".domain").data([null]),D=b.selectAll(".tick").data(d,e).order(),k=D.exit(),C=D.enter().append("g").attr("class","tick"),F=D.select("line"),N=D.select("text");T=T.merge(T.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),D=D.merge(C),F=F.merge(C.append("line").attr("stroke","currentColor").attr(f+"2",u*a)),N=N.merge(C.append("text").attr("fill","currentColor").attr(f,u*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==b&&(T=T.transition(h),D=D.transition(h),F=F.transition(h),N=N.transition(h),k=k.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=x(t))?c(t+s):this.getAttribute("transform")})),C.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return c((e&&isFinite(e=e(t))?e:x(t))+s)}))),k.remove(),T.attr("d",4===t||2===t?o?"M"+u*o+","+y+"H"+s+"V"+v+"H"+u*o:"M"+s+","+y+"V"+v:o?"M"+y+","+u*o+"V"+s+"H"+v+"V"+u*o:"M"+y+","+s+"H"+v),D.attr("opacity",1).attr("transform",(function(t){return c(x(t)+s)})),F.attr(f+"2",u*a),N.attr(f,u*p).text(g),b.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=x}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=v.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:v.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:v.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=o=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(s=+t,h):s},h}var D={value:()=>{}};function k(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new C(r)}function C(t){this._=t}function F(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function N(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function S(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=D,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}C.prototype=k.prototype={constructor:C,on:function(t,e){var n,r=this._,i=F(t+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<o;)if(n=(t=i[a]).type)r[n]=S(r[n],t.name,e);else if(null==e)for(n in r)r[n]=S(r[n],t.name,null);return this}for(;++a<o;)if((n=(t=i[a]).type)&&(n=N(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new C(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var I="http://www.w3.org/1999/xhtml",L={svg:"http://www.w3.org/2000/svg",xhtml:I,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function P(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),L.hasOwnProperty(e)?{space:L[e],local:t}:t}function B(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===I&&e.documentElement.namespaceURI===I?e.createElement(t):e.createElementNS(n,t)}}function Y(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function U(t){var e=P(t);return(e.local?Y:B)(e)}function V(){}function E(t){return null==t?V:function(){return this.querySelector(t)}}function H(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function z(){return[]}function q(t){return null==t?z:function(){return this.querySelectorAll(t)}}function O(t){return function(){return this.matches(t)}}function W(t){return function(e){return e.matches(t)}}var X=Array.prototype.find;function j(){return this.firstElementChild}var R=Array.prototype.filter;function $(){return this.children}function Z(t){return new Array(t.length)}function Q(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function G(t){return function(){return t}}function J(t,e,n,r,i,a){for(var o,l=0,s=e.length,u=a.length;l<u;++l)(o=e[l])?(o.__data__=a[l],r[l]=o):n[l]=new Q(t,a[l]);for(;l<s;++l)(o=e[l])&&(i[l]=o)}function K(t,e,n,r,i,a,o){var l,s,u,f=new Map,c=e.length,h=a.length,d=new Array(c);for(l=0;l<c;++l)(s=e[l])&&(d[l]=u=o.call(s,s.__data__,l,e)+"",f.has(u)?i[l]=s:f.set(u,s));for(l=0;l<h;++l)u=o.call(t,a[l],l,a)+"",(s=f.get(u))?(r[l]=s,s.__data__=a[l],f.delete(u)):n[l]=new Q(t,a[l]);for(l=0;l<c;++l)(s=e[l])&&f.get(d[l])===s&&(i[l]=s)}function tt(t){return t.__data__}function et(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function nt(t){return function(){this.removeAttribute(t)}}function rt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function it(t,e){return function(){this.setAttribute(t,e)}}function at(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ot(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function lt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function st(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ut(t){return function(){this.style.removeProperty(t)}}function ft(t,e,n){return function(){this.style.setProperty(t,e,n)}}function ct(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function ht(t,e){return t.style.getPropertyValue(e)||st(t).getComputedStyle(t,null).getPropertyValue(e)}function dt(t){return function(){delete this[t]}}function gt(t,e){return function(){this[t]=e}}function pt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function mt(t){return t.trim().split(/^|\s+/)}function yt(t){return t.classList||new vt(t)}function vt(t){this._node=t,this._names=mt(t.getAttribute("class")||"")}function wt(t,e){for(var n=yt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function xt(t,e){for(var n=yt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function bt(t){return function(){wt(this,t)}}function _t(t){return function(){xt(this,t)}}function At(t,e){return function(){(e.apply(this,arguments)?wt:xt)(this,t)}}function Mt(){this.textContent=""}function Tt(t){return function(){this.textContent=t}}function Dt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function kt(){this.innerHTML=""}function Ct(t){return function(){this.innerHTML=t}}function Ft(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Nt(){this.nextSibling&&this.parentNode.appendChild(this)}function St(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function It(){return null}function Lt(){var t=this.parentNode;t&&t.removeChild(this)}function Pt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Bt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Yt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Ut(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function Vt(t,e,n){return function(){var r,i=this.__on,a=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var o=0,l=i.length;o<l;++o)if((r=i[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=n),void(r.value=e);this.addEventListener(t.type,a,n),r={type:t.type,name:t.name,value:e,listener:a,options:n},i?i.push(r):this.__on=[r]}}function Et(t,e,n){var r=st(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Ht(t,e){return function(){return Et(this,t,e)}}function zt(t,e){return function(){return Et(this,t,e.apply(this,arguments))}}Q.prototype={constructor:Q,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},vt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qt=[null];function Ot(t,e){this._groups=t,this._parents=e}function Wt(){return new Ot([[document.documentElement]],qt)}function Xt(t){return"string"==typeof t?new Ot([[document.querySelector(t)]],[document.documentElement]):new Ot([[t]],qt)}function jt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Rt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function $t(){}Ot.prototype=Wt.prototype={constructor:Ot,select:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,l=e[i],s=l.length,u=r[i]=new Array(s),f=0;f<s;++f)(a=l[f])&&(o=t.call(a,a.__data__,f,l))&&("__data__"in a&&(o.__data__=a.__data__),u[f]=o);return new Ot(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:H(e)}}(t):q(t);for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,l=e[a],s=l.length,u=0;u<s;++u)(o=l[u])&&(r.push(t.call(o,o.__data__,u,l)),i.push(o));return new Ot(r,i)},selectChild:function(t){return this.select(null==t?j:function(t){return function(){return X.call(this.children,t)}}("function"==typeof t?t:W(t)))},selectChildren:function(t){return this.selectAll(null==t?$:function(t){return function(){return R.call(this.children,t)}}("function"==typeof t?t:W(t)))},filter:function(t){"function"!=typeof t&&(t=O(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],l=o.length,s=r[i]=[],u=0;u<l;++u)(a=o[u])&&t.call(a,a.__data__,u,o)&&s.push(a);return new Ot(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,tt);var n=e?K:J,r=this._parents,i=this._groups;"function"!=typeof t&&(t=G(t));for(var a=i.length,o=new Array(a),l=new Array(a),s=new Array(a),u=0;u<a;++u){var f=r[u],c=i[u],h=c.length,d=H(t.call(f,f&&f.__data__,u,r)),g=d.length,p=l[u]=new Array(g),m=o[u]=new Array(g),y=s[u]=new Array(h);n(f,c,p,m,y,d,e);for(var v,w,x=0,b=0;x<g;++x)if(v=p[x]){for(x>=b&&(b=x+1);!(w=m[b])&&++b<g;);v._next=w||null}}return(o=new Ot(o,r))._enter=l,o._exit=s,o},enter:function(){return new Ot(this._enter||this._groups.map(Z),this._parents)},exit:function(){return new Ot(this._exit||this._groups.map(Z),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof Ot))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),l=0;l<a;++l)for(var s,u=e[l],f=n[l],c=u.length,h=o[l]=new Array(c),d=0;d<c;++d)(s=u[d]||f[d])&&(h[d]=s);for(;l<r;++l)o[l]=e[l];return new Ot(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=et);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,l=n[a],s=l.length,u=i[a]=new Array(s),f=0;f<s;++f)(o=l[f])&&(u[f]=o);u.sort(e)}return new Ot(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,l=a.length;o<l;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=P(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?rt:nt:"function"==typeof e?n.local?lt:ot:n.local?at:it)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ut:"function"==typeof e?ct:ft)(t,e,null==n?"":n)):ht(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?dt:"function"==typeof e?pt:gt)(t,e)):this.node()[t]},classed:function(t,e){var n=mt(t+"");if(arguments.length<2){for(var r=yt(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?At:e?bt:_t)(n,e))},text:function(t){return arguments.length?this.each(null==t?Mt:("function"==typeof t?Dt:Tt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?kt:("function"==typeof t?Ft:Ct)(t)):this.node().innerHTML},raise:function(){return this.each(Nt)},lower:function(){return this.each(St)},append:function(t){var e="function"==typeof t?t:U(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:U(t),r=null==e?It:"function"==typeof e?e:E(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Lt)},clone:function(t){return this.select(t?Bt:Pt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=Yt(t+""),o=a.length;if(!(arguments.length<2)){for(l=e?Vt:Ut,r=0;r<o;++r)this.each(l(a[r],e,n));return this}var l=this.node().__on;if(l)for(var s,u=0,f=l.length;u<f;++u)for(r=0,s=l[u];r<o;++r)if((i=a[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?zt:Ht)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],a=0,o=i.length;a<o;++a)(r=i[a])&&(yield r)}};var Zt=1/.7,Qt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Jt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Kt=/^#([0-9a-f]{3,8})$/,te=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),ee=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),ne=new RegExp("^rgba\\("+[Qt,Qt,Qt,Gt]+"\\)$"),re=new RegExp("^rgba\\("+[Jt,Jt,Jt,Gt]+"\\)$"),ie=new RegExp("^hsl\\("+[Gt,Jt,Jt]+"\\)$"),ae=new RegExp("^hsla\\("+[Gt,Jt,Jt,Gt]+"\\)$"),oe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(){return this.rgb().formatHex()}function se(){return this.rgb().formatRgb()}function ue(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Kt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?fe(e):3===n?new ge(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?ce(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?ce(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=te.exec(t))?new ge(e[1],e[2],e[3],1):(e=ee.exec(t))?new ge(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ne.exec(t))?ce(e[1],e[2],e[3],e[4]):(e=re.exec(t))?ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ie.exec(t))?ve(e[1],e[2]/100,e[3]/100,1):(e=ae.exec(t))?ve(e[1],e[2]/100,e[3]/100,e[4]):oe.hasOwnProperty(t)?fe(oe[t]):"transparent"===t?new ge(NaN,NaN,NaN,0):null}function fe(t){return new ge(t>>16&255,t>>8&255,255&t,1)}function ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new ge(t,e,n,r)}function he(t){return t instanceof $t||(t=ue(t)),t?new ge((t=t.rgb()).r,t.g,t.b,t.opacity):new ge}function de(t,e,n,r){return 1===arguments.length?he(t):new ge(t,e,n,null==r?1:r)}function ge(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function pe(){return"#"+ye(this.r)+ye(this.g)+ye(this.b)}function me(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ye(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ve(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new xe(t,e,n,r)}function we(t){if(t instanceof xe)return new xe(t.h,t.s,t.l,t.opacity);if(t instanceof $t||(t=ue(t)),!t)return new xe;if(t instanceof xe)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,l=a-i,s=(a+i)/2;return l?(o=e===a?(n-r)/l+6*(n<r):n===a?(r-e)/l+2:(e-n)/l+4,l/=s<.5?a+i:2-a-i,o*=60):l=s>0&&s<1?0:o,new xe(o,l,s,t.opacity)}function xe(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function be(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}jt($t,ue,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:le,formatHex:le,formatHsl:function(){return we(this).formatHsl()},formatRgb:se,toString:se}),jt(ge,de,Rt($t,{brighter:function(t){return t=null==t?Zt:Math.pow(Zt,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:pe,formatHex:pe,formatRgb:me,toString:me})),jt(xe,(function(t,e,n,r){return 1===arguments.length?we(t):new xe(t,e,n,null==r?1:r)}),Rt($t,{brighter:function(t){return t=null==t?Zt:Math.pow(Zt,t),new xe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new xe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new ge(be(t>=240?t-240:t+120,i,r),be(t,i,r),be(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var _e=t=>()=>t;function Ae(t){return 1==(t=+t)?Me:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):_e(isNaN(e)?n:e)}}function Me(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):_e(isNaN(t)?e:t)}var Te=function t(e){var n=Ae(e);function r(t,e){var r=n((t=de(t)).r,(e=de(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=Me(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function De(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(a){for(n=0;n<r;++n)i[n]=t[n]*(1-a)+e[n]*a;return i}}function ke(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=Pe(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}}function Ce(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Fe(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ne(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Pe(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Se=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ie=new RegExp(Se.source,"g");function Le(t,e){var n,r,i,a=Se.lastIndex=Ie.lastIndex=0,o=-1,l=[],s=[];for(t+="",e+="";(n=Se.exec(t))&&(r=Ie.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),l[o]?l[o]+=i:l[++o]=i),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,s.push({i:o,x:Fe(n,r)})),a=Ie.lastIndex;return a<e.length&&(i=e.slice(a),l[o]?l[o]+=i:l[++o]=i),l.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)l[(n=s[r]).i]=n.x(t);return l.join("")})}function Pe(t,e){var n,r=typeof e;return null==e||"boolean"===r?_e(e):("number"===r?Fe:"string"===r?(n=ue(e))?(e=n,Te):Le:e instanceof ue?Te:e instanceof Date?Ce:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?De:Array.isArray(e)?ke:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ne:Fe)(t,e)}function Be(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Ye,Ue=180/Math.PI,Ve={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ee(t,e,n,r,i,a){var o,l,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,s/=l),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*Ue,skewX:Math.atan(s)*Ue,scaleX:o,scaleY:l}}function He(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var l=[],s=[];return a=t(a),o=t(o),function(t,r,i,a,o,l){if(t!==i||r!==a){var s=o.push("translate(",null,e,null,n);l.push({i:s-4,x:Fe(t,i)},{i:s-2,x:Fe(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,l,s),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Fe(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,l,s),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Fe(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,l,s),function(t,e,n,r,a,o){if(t!==n||e!==r){var l=a.push(i(a)+"scale(",null,",",null,")");o.push({i:l-4,x:Fe(t,n)},{i:l-2,x:Fe(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,l,s),a=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)l[(e=s[n]).i]=e.x(t);return l.join("")}}}var ze,qe,Oe=He((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Ve:Ee(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),We=He((function(t){return null==t?Ve:(Ye||(Ye=document.createElementNS("http://www.w3.org/2000/svg","g")),Ye.setAttribute("transform",t),(t=Ye.transform.baseVal.consolidate())?Ee((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Ve)}),", ",")",")"),Xe=0,je=0,Re=0,$e=0,Ze=0,Qe=0,Ge="object"==typeof performance&&performance.now?performance:Date,Je="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ke(){return Ze||(Je(tn),Ze=Ge.now()+Qe)}function tn(){Ze=0}function en(){this._call=this._time=this._next=null}function nn(t,e,n){var r=new en;return r.restart(t,e,n),r}function rn(){Ze=($e=Ge.now())+Qe,Xe=je=0;try{!function(){Ke(),++Xe;for(var t,e=ze;e;)(t=Ze-e._time)>=0&&e._call.call(null,t),e=e._next;--Xe}()}finally{Xe=0,function(){var t,e,n=ze,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:ze=e);qe=t,on(r)}(),Ze=0}}function an(){var t=Ge.now(),e=t-$e;e>1e3&&(Qe-=e,$e=t)}function on(t){Xe||(je&&(je=clearTimeout(je)),t-Ze>24?(t<1/0&&(je=setTimeout(rn,t-Ge.now()-Qe)),Re&&(Re=clearInterval(Re))):(Re||($e=Ge.now(),Re=setInterval(an,1e3)),Xe=1,Je(rn)))}function ln(t,e,n){var r=new en;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}en.prototype=nn.prototype={constructor:en,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ke():+n)+(null==e?0:+e),this._next||qe===this||(qe?qe._next=this:ze=this,qe=this),this._call=t,this._time=n,on()},stop:function(){this._call&&(this._call=null,this._time=1/0,on())}};var sn=k("start","end","cancel","interrupt"),un=[];function fn(t,e,n,r,i,a){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(a){var u,f,c,h;if(1!==n.state)return s();for(u in i)if((h=i[u]).name===n.name){if(3===h.state)return ln(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(ln((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(c=n.tween.length),u=0,f=-1;u<c;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function l(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=nn(a,0,n.time)}(t,n,{name:e,index:r,group:i,on:sn,tween:un,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})}function cn(t,e){var n=dn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function hn(t,e){var n=dn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function dn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function gn(t,e){var n,r;return function(){var i=hn(this,t),a=i.tween;if(a!==n)for(var o=0,l=(r=n=a).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}function pn(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=hn(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var l={name:e,value:n},s=0,u=i.length;s<u;++s)if(i[s].name===e){i[s]=l;break}s===u&&i.push(l)}a.tween=i}}function mn(t,e,n){var r=t._id;return t.each((function(){var t=hn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return dn(t,r).value[e]}}function yn(t,e){var n;return("number"==typeof e?Fe:e instanceof ue?Te:(n=ue(e))?(e=n,Te):Le)(t,e)}function vn(t){return function(){this.removeAttribute(t)}}function wn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function xn(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=e(r=o,n)}}function bn(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=e(r=o,n)}}function _n(t,e,n){var r,i,a;return function(){var o,l,s=n(this);if(null!=s)return(o=this.getAttribute(t))===(l=s+"")?null:o===r&&l===i?a:(i=l,a=e(r=o,s));this.removeAttribute(t)}}function An(t,e,n){var r,i,a;return function(){var o,l,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(l=s+"")?null:o===r&&l===i?a:(i=l,a=e(r=o,s));this.removeAttributeNS(t.space,t.local)}}function Mn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Tn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Dn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Tn(t,i)),n}return i._value=e,i}function kn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Mn(t,i)),n}return i._value=e,i}function Cn(t,e){return function(){cn(this,t).delay=+e.apply(this,arguments)}}function Fn(t,e){return e=+e,function(){cn(this,t).delay=e}}function Nn(t,e){return function(){hn(this,t).duration=+e.apply(this,arguments)}}function Sn(t,e){return e=+e,function(){hn(this,t).duration=e}}function In(t,e){if("function"!=typeof e)throw new Error;return function(){hn(this,t).ease=e}}function Ln(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?cn:hn;return function(){var o=a(this,t),l=o.on;l!==r&&(i=(r=l).copy()).on(e,n),o.on=i}}var Pn=Wt.prototype.constructor;function Bn(t){return function(){this.style.removeProperty(t)}}function Yn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Un(t,e,n){var r,i;function a(){var a=e.apply(this,arguments);return a!==i&&(r=(i=a)&&Yn(t,a,n)),r}return a._value=e,a}function Vn(t){return function(e){this.textContent=t.call(this,e)}}function En(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Vn(r)),e}return r._value=t,r}var Hn=0;function zn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function qn(){return++Hn}var On=Wt.prototype;zn.prototype={constructor:zn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=E(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var l,s,u=r[o],f=u.length,c=a[o]=new Array(f),h=0;h<f;++h)(l=u[h])&&(s=t.call(l,l.__data__,h,u))&&("__data__"in l&&(s.__data__=l.__data__),c[h]=s,fn(c[h],e,n,h,c,dn(l,n)));return new zn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=q(t));for(var r=this._groups,i=r.length,a=[],o=[],l=0;l<i;++l)for(var s,u=r[l],f=u.length,c=0;c<f;++c)if(s=u[c]){for(var h,d=t.call(s,s.__data__,c,u),g=dn(s,n),p=0,m=d.length;p<m;++p)(h=d[p])&&fn(h,e,n,p,d,g);a.push(d),o.push(s)}return new zn(a,o,e,n)},filter:function(t){"function"!=typeof t&&(t=O(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],l=o.length,s=r[i]=[],u=0;u<l;++u)(a=o[u])&&t.call(a,a.__data__,u,o)&&s.push(a);return new zn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),l=0;l<a;++l)for(var s,u=e[l],f=n[l],c=u.length,h=o[l]=new Array(c),d=0;d<c;++d)(s=u[d]||f[d])&&(h[d]=s);for(;l<r;++l)o[l]=e[l];return new zn(o,this._parents,this._name,this._id)},selection:function(){return new Pn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=qn(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,l=r[a],s=l.length,u=0;u<s;++u)if(o=l[u]){var f=dn(o,e);fn(o,t,n,u,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new zn(r,this._parents,t,n)},call:On.call,nodes:On.nodes,node:On.node,size:On.size,empty:On.empty,each:On.each,on:function(t,e){var n=this._id;return arguments.length<2?dn(this.node(),n).on.on(t):this.each(Ln(n,t,e))},attr:function(t,e){var n=P(t),r="transform"===n?We:yn;return this.attrTween(t,"function"==typeof e?(n.local?An:_n)(n,r,mn(this,"attr."+t,e)):null==e?(n.local?wn:vn)(n):(n.local?bn:xn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=P(t);return this.tween(n,(r.local?Dn:kn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Oe:yn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=ht(this,t),o=(this.style.removeProperty(t),ht(this,t));return a===o?null:a===n&&o===r?i:i=e(n=a,r=o)}}(t,r)).on("end.style."+t,Bn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,a;return function(){var o=ht(this,t),l=n(this),s=l+"";return null==l&&(this.style.removeProperty(t),s=l=ht(this,t)),o===s?null:o===r&&s===i?a:(i=s,a=e(r=o,l))}}(t,r,mn(this,"style."+t,e))).each(function(t,e){var n,r,i,a,o="style."+e,l="end."+o;return function(){var s=hn(this,t),u=s.on,f=null==s.value[o]?a||(a=Bn(e)):void 0;u===n&&i===f||(r=(n=u).copy()).on(l,i=f),s.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,a=n+"";return function(){var o=ht(this,t);return o===a?null:o===r?i:i=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Un(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(mn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,En(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=dn(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?gn:pn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Cn:Fn)(e,t)):dn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Nn:Sn)(e,t)):dn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(In(e,t)):dn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;hn(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(a,o){var l={value:o},s={value:function(){0==--i&&a()}};n.each((function(){var n=hn(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(s)),n.on=e})),0===i&&a()}))},[Symbol.iterator]:On[Symbol.iterator]};var Wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Xn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Wt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,a=t.__transition,o=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)}))},Wt.prototype.transition=function(t){var e,n;t instanceof zn?(e=t._id,t=t._name):(e=qn(),(n=Wn).time=Ke(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,l=r[a],s=l.length,u=0;u<s;++u)(o=l[u])&&fn(o,t,e,u,l,n||Xn(o,e));return new zn(r,this._parents,t,e)};const jn=Math.PI,Rn=2*jn,$n=Rn-1e-6;function Zn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Qn(){return new Zn}function Gn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Jn(t){return(t=Gn(Math.abs(t)))?t[1]:NaN}Zn.prototype=Qn.prototype={constructor:Zn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,l=n-t,s=r-e,u=a-t,f=o-e,c=u*u+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(c>1e-6)if(Math.abs(f*l-s*u)>1e-6&&i){var h=n-a,d=r-o,g=l*l+s*s,p=h*h+d*d,m=Math.sqrt(g),y=Math.sqrt(c),v=i*Math.tan((jn-Math.acos((g+c-p)/(2*m*y)))/2),w=v/y,x=v/m;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*u)+","+(e+w*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>u*d)+","+(this._x1=t+x*l)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e,a=!!a;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),s=t+o,u=e+l,f=1^a,c=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+u:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+s+","+u),n&&(c<0&&(c=c%Rn+Rn),c>$n?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=s)+","+(this._y1=u):c>1e-6&&(this._+="A"+n+","+n+",0,"+ +(c>=jn)+","+f+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Kn,tr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function er(t){if(!(e=tr.exec(t)))throw new Error("invalid format: "+t);var e;return new nr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function nr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function rr(t,e){var n=Gn(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}er.prototype=nr.prototype,nr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ir={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>rr(100*t,e),r:rr,s:function(t,e){var n=Gn(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(Kn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Gn(t,Math.max(0,e+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function ar(t){return t}var or,lr,sr,ur=Array.prototype.map,fr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function cr(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?ar:(e=ur.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,l=e[0],s=0;i>0&&l>0&&(s+l+1>r&&(l=Math.max(1,r-s)),a.push(t.substring(i-=l,i+l)),!((s+=l+1)>r));)l=e[o=(o+1)%e.length];return a.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?ar:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ur.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"−":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function c(t){var e=(t=er(t)).fill,n=t.align,c=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,m=t.precision,y=t.trim,v=t.type;"n"===v?(p=!0,v="g"):ir[v]||(void 0===m&&(m=12),y=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===h?a:/[%p]/.test(v)?s:"",b=ir[v],_=/[defgprs%]/.test(v);function A(t){var i,a,s,h=w,A=x;if("c"===v)A=b(t)+A,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:b(Math.abs(t),m),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==c&&(M=!1),h=(M?"("===c?c:u:"-"===c||"("===c?"":c)+h,A=("s"===v?fr[8+Kn/3]:"")+A+(M&&"("===c?")":""),_)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){A=(46===s?o+t.slice(i+1):t.slice(i))+A,t=t.slice(0,i);break}}p&&!d&&(t=r(t,1/0));var T=h.length+t.length+A.length,D=T<g?new Array(g-T+1).join(e):"";switch(p&&d&&(t=r(D+t,D.length?g-A.length:1/0),D=""),n){case"<":t=h+t+A+D;break;case"=":t=h+D+t+A;break;case"^":t=D.slice(0,T=D.length>>1)+h+t+A+D.slice(T);break;default:t=D+h+t+A}return l(t)}return m=void 0===m?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),A.toString=function(){return t+""},A}return{format:c,formatPrefix:function(t,e){var n=c(((t=er(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Jn(e)/3))),i=Math.pow(10,-r),a=fr[8+r/3];return function(t){return n(i*t)+a}}}}function hr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function dr(t){return+t}or=cr({thousands:",",grouping:[3],currency:["$",""]}),lr=or.format,sr=or.formatPrefix;var gr=[0,1];function pr(t){return t}function mr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function yr(t,e,n){var r=t[0],i=t[1],a=e[0],o=e[1];return i<r?(r=mr(i,r),a=n(o,a)):(r=mr(r,i),a=n(a,o)),function(t){return a(r(t))}}function vr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),a=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)i[l]=mr(t[l],t[l+1]),a[l]=n(e[l],e[l+1]);return function(e){var n=o(t,e,1,r)-1;return a[n](i[n](e))}}function wr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function xr(){var t,e,n,r,i,a,o=gr,l=gr,s=Pe,u=pr;function f(){var t,e,n,s=Math.min(o.length,l.length);return u!==pr&&(t=o[0],e=o[s-1],t>e&&(n=t,t=e,e=n),u=function(n){return Math.max(t,Math.min(e,n))}),r=s>2?vr:yr,i=a=null,c}function c(e){return null==e||isNaN(e=+e)?n:(i||(i=r(o.map(t),l,s)))(t(u(e)))}return c.invert=function(n){return u(e((a||(a=r(l,o.map(t),Fe)))(n)))},c.domain=function(t){return arguments.length?(o=Array.from(t,dr),f()):o.slice()},c.range=function(t){return arguments.length?(l=Array.from(t),f()):l.slice()},c.rangeRound=function(t){return l=Array.from(t),s=Be,f()},c.clamp=function(t){return arguments.length?(u=!!t||pr,f()):u!==pr},c.interpolate=function(t){return arguments.length?(s=t,f()):s},c.unknown=function(t){return arguments.length?(n=t,c):n},function(n,r){return t=n,e=r,f()}}function br(){return xr()(pr,pr)}function _r(t,e,n,r){var i,a=c(t,e,n);switch((r=er(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Jn(e)/3)))-Jn(Math.abs(t)))}(a,o))||(r.precision=i),sr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Jn(e)-Jn(t))+1}(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Jn(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return lr(r)}function Ar(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,a,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,a=new Array(i=r-n+1);++l<i;)a[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,a=new Array(i=r-n+1);++l<i;)a[l]=(n+l)/o}return r&&a.reverse(),a}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return _r(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,a=e(),o=0,l=a.length-1,s=a[o],u=a[l],c=10;for(u<s&&(i=s,s=u,u=i,i=o,o=l,l=i);c-- >0;){if((i=f(s,u,n))===r)return a[o]=s,a[l]=u,e(a);if(i>0)s=Math.floor(s/i)*i,u=Math.ceil(u/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,u=Math.floor(u*i)/i}r=i}return t},t}function Mr(){var t=br();return t.copy=function(){return wr(t,Mr())},hr.apply(t,arguments),Ar(t)}var Tr=new Date,Dr=new Date;function kr(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,l=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return l;do{l.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return l},i.filter=function(n){return kr((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Tr.setTime(+e),Dr.setTime(+r),t(Tr),t(Dr),Math.floor(n(Tr,Dr))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Cr=kr((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));Cr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?kr((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Cr:null};var Fr=kr((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),Nr=kr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),Sr=kr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),Ir=kr((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function Lr(t){return kr((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Pr=Lr(0),Br=Lr(1);Lr(2),Lr(3);var Yr=Lr(4);Lr(5),Lr(6);var Ur=kr((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Vr=kr((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Vr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?kr((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},kr((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),kr((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var Er=kr((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function Hr(t){return kr((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var zr=Hr(0),qr=Hr(1);Hr(2),Hr(3);var Or=Hr(4);Hr(5),Hr(6),kr((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var Wr=kr((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Wr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?kr((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[Xr,jr]=function(t,e,n,r,i,o){const l=[[Fr,1,1e3],[Fr,5,5e3],[Fr,15,15e3],[Fr,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function s(e,n,r){const i=Math.abs(n-e)/r,o=a((([,,t])=>t)).right(l,i);if(o===l.length)return t.every(c(e/31536e6,n/31536e6,r));if(0===o)return Cr.every(Math.max(c(e,n,r),1));const[s,u]=l[i/l[o-1][2]<l[o][2]/i?o-1:o];return s.every(u)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const i=n&&"function"==typeof n.range?n:s(t,e,n),a=i?i.range(t,+e+1):[];return r?a.reverse():a},s]}(Vr,Ur,Pr,Ir,Sr,Nr);function Rr(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function $r(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Zr(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Qr,Gr,Jr,Kr,ti={"-":"",_:" ",0:"0"},ei=/^\s*\d+/,ni=/^%/,ri=/[\\^$*+?|[\]().{}]/g;function ii(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function ai(t){return t.replace(ri,"\\$&")}function oi(t){return new RegExp("^(?:"+t.map(ai).join("|")+")","i")}function li(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function si(t,e,n){var r=ei.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function ui(t,e,n){var r=ei.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function fi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function ci(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function hi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function di(t,e,n){var r=ei.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function gi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function pi(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function mi(t,e,n){var r=ei.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function yi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function vi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function wi(t,e,n){var r=ei.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function xi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function bi(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function _i(t,e,n){var r=ei.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ai(t,e,n){var r=ei.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Mi(t,e,n){var r=ei.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ti(t,e,n){var r=ni.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Di(t,e,n){var r=ei.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ki(t,e,n){var r=ei.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Ci(t,e){return ii(t.getDate(),e,2)}function Fi(t,e){return ii(t.getHours(),e,2)}function Ni(t,e){return ii(t.getHours()%12||12,e,2)}function Si(t,e){return ii(1+Ir.count(Vr(t),t),e,3)}function Ii(t,e){return ii(t.getMilliseconds(),e,3)}function Li(t,e){return Ii(t,e)+"000"}function Pi(t,e){return ii(t.getMonth()+1,e,2)}function Bi(t,e){return ii(t.getMinutes(),e,2)}function Yi(t,e){return ii(t.getSeconds(),e,2)}function Ui(t){var e=t.getDay();return 0===e?7:e}function Vi(t,e){return ii(Pr.count(Vr(t)-1,t),e,2)}function Ei(t){var e=t.getDay();return e>=4||0===e?Yr(t):Yr.ceil(t)}function Hi(t,e){return t=Ei(t),ii(Yr.count(Vr(t),t)+(4===Vr(t).getDay()),e,2)}function zi(t){return t.getDay()}function qi(t,e){return ii(Br.count(Vr(t)-1,t),e,2)}function Oi(t,e){return ii(t.getFullYear()%100,e,2)}function Wi(t,e){return ii((t=Ei(t)).getFullYear()%100,e,2)}function Xi(t,e){return ii(t.getFullYear()%1e4,e,4)}function ji(t,e){var n=t.getDay();return ii((t=n>=4||0===n?Yr(t):Yr.ceil(t)).getFullYear()%1e4,e,4)}function Ri(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ii(e/60|0,"0",2)+ii(e%60,"0",2)}function $i(t,e){return ii(t.getUTCDate(),e,2)}function Zi(t,e){return ii(t.getUTCHours(),e,2)}function Qi(t,e){return ii(t.getUTCHours()%12||12,e,2)}function Gi(t,e){return ii(1+Er.count(Wr(t),t),e,3)}function Ji(t,e){return ii(t.getUTCMilliseconds(),e,3)}function Ki(t,e){return Ji(t,e)+"000"}function ta(t,e){return ii(t.getUTCMonth()+1,e,2)}function ea(t,e){return ii(t.getUTCMinutes(),e,2)}function na(t,e){return ii(t.getUTCSeconds(),e,2)}function ra(t){var e=t.getUTCDay();return 0===e?7:e}function ia(t,e){return ii(zr.count(Wr(t)-1,t),e,2)}function aa(t){var e=t.getUTCDay();return e>=4||0===e?Or(t):Or.ceil(t)}function oa(t,e){return t=aa(t),ii(Or.count(Wr(t),t)+(4===Wr(t).getUTCDay()),e,2)}function la(t){return t.getUTCDay()}function sa(t,e){return ii(qr.count(Wr(t)-1,t),e,2)}function ua(t,e){return ii(t.getUTCFullYear()%100,e,2)}function fa(t,e){return ii((t=aa(t)).getUTCFullYear()%100,e,2)}function ca(t,e){return ii(t.getUTCFullYear()%1e4,e,4)}function ha(t,e){var n=t.getUTCDay();return ii((t=n>=4||0===n?Or(t):Or.ceil(t)).getUTCFullYear()%1e4,e,4)}function da(){return"+0000"}function ga(){return"%"}function pa(t){return+t}function ma(t){return Math.floor(+t/1e3)}function ya(t){return new Date(t)}function va(t){return t instanceof Date?+t:+new Date(+t)}function wa(t,e,n,r,i,a,o,l,s,u){var f=br(),c=f.invert,h=f.domain,d=u(".%L"),g=u(":%S"),p=u("%I:%M"),m=u("%I %p"),y=u("%a %d"),v=u("%b %d"),w=u("%B"),x=u("%Y");function b(t){return(s(t)<t?d:l(t)<t?g:o(t)<t?p:a(t)<t?m:r(t)<t?i(t)<t?y:v:n(t)<t?w:x)(t)}return f.invert=function(t){return new Date(c(t))},f.domain=function(t){return arguments.length?h(Array.from(t,va)):h().map(ya)},f.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},f.tickFormat=function(t,e){return null==e?b:u(e)},f.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(n=r,r=i,i=n,n=a,a=o,o=n),t[r]=e.floor(a),t[i]=e.ceil(o),t}(n,t)):f},f.copy=function(){return wr(f,wa(t,e,n,r,i,a,o,l,s,u))},f}function xa(t){return function(){return t}}function ba(t){this._context=t}function _a(t){return new ba(t)}function Aa(t){return t[0]}function Ma(t){return t[1]}function Ta(t,e){var n=xa(!0),r=null,i=_a,a=null;function o(o){var l,s,u,f=(o=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(o)).length,c=!1;for(null==r&&(a=i(u=Qn())),l=0;l<=f;++l)!(l<f&&n(s=o[l],l,o))===c&&((c=!c)?a.lineStart():a.lineEnd()),c&&a.point(+t(s,l,o),+e(s,l,o));if(u)return a=null,u+""||null}return t="function"==typeof t?t:void 0===t?Aa:xa(t),e="function"==typeof e?e:void 0===e?Ma:xa(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:xa(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:xa(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:xa(!!t),o):n},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o}!function(t){Qr=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,l=t.months,s=t.shortMonths,u=oi(i),f=li(i),c=oi(a),h=li(a),d=oi(o),g=li(o),p=oi(l),m=li(l),y=oi(s),v=li(s),w={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:Ci,e:Ci,f:Li,g:Wi,G:ji,H:Fi,I:Ni,j:Si,L:Ii,m:Pi,M:Bi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:pa,s:ma,S:Yi,u:Ui,U:Vi,V:Hi,w:zi,W:qi,x:null,X:null,y:Oi,Y:Xi,Z:Ri,"%":ga},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:$i,e:$i,f:Ki,g:fa,G:ha,H:Zi,I:Qi,j:Gi,L:Ji,m:ta,M:ea,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:pa,s:ma,S:na,u:ra,U:ia,V:oa,w:la,W:sa,x:null,X:null,y:ua,Y:ca,Z:da,"%":ga},b={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:vi,e:vi,f:Mi,g:gi,G:di,H:xi,I:xi,j:wi,L:Ai,m:yi,M:bi,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=f.get(r[0].toLowerCase()),n+r[0].length):-1},q:mi,Q:Di,s:ki,S:_i,u:ui,U:fi,V:ci,w:si,W:hi,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:gi,Y:di,Z:pi,"%":Ti};function _(t,e){return function(n){var r,i,a,o=[],l=-1,s=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++l<u;)37===t.charCodeAt(l)&&(o.push(t.slice(s,l)),null!=(i=ti[r=t.charAt(++l)])?r=t.charAt(++l):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),s=l+1);return o.push(t.slice(s,l)),o.join("")}}function A(t,e){return function(n){var r,i,a=Zr(1900,void 0,1);if(M(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(e&&!("Z"in a)&&(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=$r(Zr(a.y,0,1))).getUTCDay(),r=i>4||0===i?qr.ceil(r):qr(r),r=Er.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=Rr(Zr(a.y,0,1))).getDay(),r=i>4||0===i?Br.ceil(r):Br(r),r=Ir.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?$r(Zr(a.y,0,1)).getUTCDay():Rr(Zr(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,$r(a)):Rr(a)}}function M(t,e,n,r){for(var i,a,o=0,l=e.length,s=n.length;o<l;){if(r>=s)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=b[i in ti?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=A(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=A(t+="",!0);return e.toString=function(){return t},e}}}(t),Gr=Qr.format,Qr.parse,Qr.utcFormat,Qr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),ba.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.Text=3]="Text",t[t.dvField=4]="dvField",t[t.Table=5]="Table"}(Jr||(Jr={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Radar=2]="Radar",t[t.Summary=3]="Summary",t[t.Table=4]="Table",t[t.Heatmap=5]="Heatmap"}(Kr||(Kr={}));class Da{constructor(t,e){this.date=t,this.value=e}}class ka{constructor(t,e,n){if(this.type=e,this.target=n,this.separator="/",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueIsTime=!1,this.usedAsXDataset=!1,e===Jr.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let i=parseFloat(t.groups.accessor1);if(Number.isNumber(i)){let a;void 0!==t.groups.accessor2&&(a=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=i,Number.isNumber(a)&&(this.accessor2=a),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}isUsingTimeValue(){return this.valueIsTime}setUsingTimeValue(){this.valueIsTime=!0}setSeparator(t){this.separator=t}getSeparator(){return this.separator}}class Ca{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.lineInfo=null,this.barInfo=null,this.valueIsTime=e.isUsingTimeValue();for(let e=0;e<t.getDates().length;e++)this.values.push(null)}getName(){return this.name}setName(t){this.name=t}getLineInfo(){return this.lineInfo}setLineInfo(t){this.lineInfo=t}getBarInfo(){return this.barInfo}setBarInfo(t){this.barInfo=t}getId(){return this.id}setId(t){this.id=t}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e))}getYMin(){return this.yMin}getYMax(){return this.yMax}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}isUsingTimeValue(){return this.valueIsTime}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new Da(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class Fa{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new Ca(this,t);return n.setId(t.getId()),e&&(n.setName(e.datasetName[t.getId()]),e.line&&n.setLineInfo(e.line),e.bar&&n.setBarInfo(e.bar)),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class Na{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.dataAreaSize=new Ba(300,300),this.margin=new Ya(10,10,10,10),this.tooltipSize=new Ba(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=Kr.Line,this.line=null,this.summary=null,this.bar=null,this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class Sa{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}}class Ia extends Sa{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}}class La extends Sa{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}}class Pa{constructor(){this.template="",this.style=""}}class Ba{constructor(t,e){this.width=t,this.height=e}}class Ya{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class Ua{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Va{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}function Ea(t,e="",n=""){var r=Xt("body").append("svg");let i=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&i.attr("class",e),n&&i.attr("transform","rotate("+n+")");var a=r.node().getBBox();return r.remove(),{width:a.width,height:a.height}}function Ha(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());switch(e.output){case Kr.Line:return function(t,e){if(null===e.line)return;let n=Za(t,e);Ra(n,e),za(n,e);let r=[],i=[],a=e.datasets.getXDatasetIds();for(let t=0;t<e.line.yAxisLocation.length;t++){if(a.includes(t))continue;let n=e.line.yAxisLocation[t];"left"===n.toLowerCase()?r.push(t):"right"===n.toLocaleLowerCase()&&i.push(t)}let o=qa(n,e,"left",r);if("string"==typeof o)return o;if(n.leftYAxis&&n.leftYScale)for(let t of r){let r=e.datasets.getDatasetById(t);r.getQuery().usedAsXDataset||(Oa(n,e,r,"left"),Wa(n,e,r,"left"))}let l=qa(n,e,"right",i);if("string"==typeof l)return l;if(n.rightYAxis&&n.rightYScale)for(let t of i){let r=e.datasets.getDatasetById(t);r.getQuery().usedAsXDataset||(Oa(n,e,r,"right"),Wa(n,e,r,"right"))}e.line.showLegend&&ja(n,e);$a(t,n,e)}(t,e);case Kr.Bar:return function(t,e){if(null===e.bar)return;let n=Za(t,e);Ra(n,e),za(n,e);let r=[],i=[],a=e.datasets.getXDatasetIds();for(let t=0;t<e.bar.yAxisLocation.length;t++){if(a.includes(t))continue;let n=e.bar.yAxisLocation[t];"left"===n.toLowerCase()?r.push(t):"right"===n.toLocaleLowerCase()&&i.push(t)}let o=qa(n,e,"left",r);if("string"==typeof o)return o;let l=r.length+i.length,s=0;if(n.leftYAxis&&n.leftYScale)for(let t of r){let r=e.datasets.getDatasetById(t);r.getQuery().usedAsXDataset||(Xa(n,e,r,"left",s,l),s++)}let u=qa(n,e,"right",i);if("string"==typeof u)return u;if(n.rightYAxis&&n.rightYScale)for(let t of i){let r=e.datasets.getDatasetById(t);r.getQuery().usedAsXDataset||(Xa(n,e,r,"right",s,l),s++)}e.bar.showLegend&&ja(n,e);$a(t,n,e)}(t,e);case Kr.Summary:return function(t,e){if(null===e.summary)return;let n="";e.summary.template,n=e.summary.template;let r={};Object.entries(Ja).forEach((([t,i])=>{let a,o=new RegExp("{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*((?<datasetId>\\d+)|(?<datasetName>\\w+))\\s*\\)\\s*\\))?\\s*}}","gm");for(;a=o.exec(n);)if(void 0!==a.groups)if(void 0!==a.groups.datasetId){let n=parseInt(a.groups.datasetId);if(Number.isInteger(n)){let a="{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*"+n.toString()+"\\s*\\)\\s*\\))?\\s*}}";if(!(a in r)){let t=i(e,n),o="{{NA}}";null!=t&&(o=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[a]=o}}}else if(void 0!==a.groups.datasetName){let n=a.groups.datasetName,o="{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*"+n+"\\s*\\)\\s*\\))?\\s*}}",l=e.datasetName.indexOf(n);if(!(o in r)){let t="{{NA}}";if(l>=0){let n=i(e,l);null!=n&&(t=Number.isInteger(n)?n.toFixed(0):n.toFixed(2))}r[o]=t}}else{let n="{{\\s*"+t+"\\s*}}";if(!(n in r)){let t=i(e,0),a="{{NA}}";null!=t&&(a=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[n]=a}}else{let n="{{\\s*"+t+"\\s*}}";if(!(n in r)){let t=i(e,0),a="{{NA}}";null!=t&&(a=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[n]=a}}}));for(let t in r){let e=r[t],i=new RegExp(t,"gi");n=n.replace(i,e)}if(""!==n){let r=Xt(t).append("div");if(n.includes("\n")){let t=n.split("\n");for(let e of t)r.append("div").text(e)}else r.text(n);""!==e.summary.style&&r.attr("style",e.summary.style)}}(t,e);default:return"Unknown output type"}}function za(t,e){let n=null;if(e.output===Kr.Line)n=e.line;else{if(e.output!==Kr.Bar)return;n=e.bar}if(!n)return;let r=e.datasets,i=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(void 0===n?a>=a&&(n=r=a):(n>a&&(n=a),r<a&&(r=a)))}return[n,r]}(r.getDates()),a=function(){return hr.apply(wa(Xr,jr,Vr,Ur,Pr,Ir,Sr,Nr,Fr,Gr).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(i).range([0,e.dataAreaSize.width]);t.xScale=a;let o=function(t){let e,n=t.getDates().length;return e=n<=15?Ir:n<=60?Ir.every(4):n<=105?Pr:n<=450?Ur:n<=900?Ur.every(2):Vr,e}(r),l=function(t){let e,n=t.getDates().length;return e=Gr(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(r),s=(u=a,T(3,u)).ticks(o).tickFormat(l);var u;let f=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(s).attr("class","tracker-axis");n.xAxisColor&&f.style("stroke",n.xAxisColor),t.xAxis=f;let c=Ea("99-99-99"),h=f.selectAll("text").attr("x",-1*c.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&h.style("fill",n.xAxisColor);let d=c.width*Math.sin(65/180*Math.PI),g=f.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+d)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&g.style("fill",n.xAxisLabelColor),f.attr("height",6+d),Qa(t.svg,0,6+d),Qa(t.graphArea,0,6+d)}function qa(t,e,n,r){let i=null;if(e.output===Kr.Line)i=e.line;else{if(e.output!==Kr.Bar)return;i=e.bar}if(!i)return;let a=e.datasets;if(0===r.length)return;if("left"!==n&&"right"!==n)return;let o=null,l=null,s=null,u=!1;for(let t of r){let e=a.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),u=e.isUsingTimeValue(),null===s)s=u;else if(u!==s)return"Not all values in time format"}let f=null;"left"===n?f=i.yMin[0]:"right"===n&&(f=i.yMin[1]);let c=!1;"number"!=typeof f?f=o:c=!0;let h=null;"left"===n?h=i.yMax[0]:"right"===n&&(h=i.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<f){let t=f;f=h,h=t;let e=c;c=d,d=e}let g,p,m=h-f,y=Mr();g=c?f:f-.2*m,p=d?h:h+.2*m,e.output===Kr.Bar&&(p<0&&(p=0),g>0&&(g=0)),y.domain([g,p]).range([e.dataAreaSize.height,0]),"left"===n?t.leftYScale=y:"right"===n&&(t.rightYScale=y);let v="";"left"===n?v=i.yAxisColor[0]:"right"===n&&(v=i.yAxisColor[1]);let w="";"left"===n?w=i.yAxisLabelColor[0]:"right"===n&&(w=i.yAxisLabelColor[1]);let x="";"left"===n?x=i.yAxisLabel[0]:"right"===n&&(x=i.yAxisLabel[1]);let b,_="";if("left"===n?_=i.yAxisUnit[0]:"right"===n&&(_=i.yAxisUnit[1]),"left"===n?b=T(4,y):"right"===n&&(b=function(t){return T(2,t)}(y)),b&&u){let t=function(t){return window.moment("00:00","HH:mm",!0).add(t,"seconds").format("HH:mm")};b.tickFormat(t)}let A=t.dataArea.append("g").attr("id","yAxis").call(b).attr("class","tracker-axis");"right"==n&&A.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===n?t.leftYAxis=A:"right"===n&&(t.rightYAxis=A);let M=A.selectAll("path");v&&M.style("stroke",v);let D=A.selectAll("line");v&&D.style("stroke",v);let k=A.selectAll("text").attr("class","tracker-tick-label");v&&k.style("fill",v);let C=_r(g,p,10),F=Ea(C(g),"tracker-axis-label"),N=Ea(C(p),"tracker-axis-label"),S=Math.max(F.width,N.width);""!==_&&(x+=" ("+_+")");let I=Ea(x),L=A.append("text").text(x).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===n?L.attr("y",-6-S-I.height/2):L.attr("y",6+S+I.height),w&&L.style("fill",w);let P=I.height+S+6;A.attr("width",P),Qa(t.svg,P,0),Qa(t.graphArea,P,0),"left"===n&&(Ga(t.dataArea,P,0),t.title&&Ga(t.title,P,0))}function Oa(t,e,n,r){if(e.output!==Kr.Line)return;let i=e.line;if(!i)return;let a=null;if("left"===r?a=t.leftYScale:"right"===r&&(a=t.rightYScale),i.showLine[n.getId()]){let e=Ta().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return a(t.value)})),r=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",i.lineWidth[n.getId()]);i.fillGap[n.getId()]?r.datum(Array.from(n).filter((function(t){return null!==t.value}))).attr("d",e):r.datum(n).attr("d",e),i.lineColor[n.getId()]&&r.style("stroke",i.lineColor[n.getId()])}}function Wa(t,e,n,r){if(e.output!==Kr.Line)return;let i=e.line;if(!i)return;let a=null;if("left"===r?a=t.leftYScale:"right"===r&&(a=t.rightYScale),i.showPoint[n.getId()]){let r=t.dataArea.selectAll("dot").data(Array.from(n).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",i.pointSize[n.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return a(t.value)})).attr("date",(function(t){return Gr("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("class","tracker-dot");if(i.pointColor[n.getId()]&&(r.style("fill",i.pointColor[n.getId()]),i.pointBorderColor[n.getId()]&&i.pointBorderWidth[n.getId()]>0&&(r.style("stroke",i.pointBorderColor[n.getId()]),r.style("stroke-width",i.pointBorderWidth[n.getId()]))),i.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let i=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),a=i.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=i.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);r.on("mouseenter",(function(t){a.text("date:"+Xt(this).attr("date")),o.text("value:"+Xt(this).attr("value"));const[r,i]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);r<e.dataAreaSize.width/2?n.attr("transform","translate("+(r+1.3*e.tooltipSize.width)+","+(i-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(r-0*e.tooltipSize.width)+","+(i-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function Xa(t,e,n,r,i,a){if(e.output!==Kr.Bar)return;let o=e.bar;if(!o)return;let l=e.dataAreaSize.width/n.getLength(),s=l;l-1>0&&(s=l-1),s/=a;let u=null;"left"===r?u=t.leftYScale:"right"===r&&(u=t.rightYScale);let f=t.dataArea.selectAll("bar").data(Array.from(n).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=i+1-a/2;if(n<1)return t.xScale(e.date)-l/2+i*s+n*s}return t.xScale(e.date)-l/2+i*s})).attr("y",(function(t){return u(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=i+1-a/2;return t<0?0:t<1?s*t:s}if(e===n.getLength()-1){let t=1-(i+1-a/2);return t<0?0:t<1?s*t:s}return s})).attr("height",(function(t){if(null!==t.value)return Math.abs(u(t.value)-u(0))})).attr("class","tracker-bar");o.barColor[n.getId()]&&f.style("fill",o.barColor[n.getId()])}function ja(t,e){let n=null;e.output===Kr.Line?n=e.line:e.output===Kr.Bar&&(n=e.bar);let r=t.svg;t.graphArea;let i=t.dataArea,a=t.title,o=t.xAxis,l=t.leftYAxis,s=t.rightYAxis,u=0;a&&(u=parseFloat(a.attr("height")));let f=parseFloat(o.attr("height")),c=0;l&&(c=parseFloat(l.attr("width")));let h=0;s&&(h=parseFloat(s.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),m=p.map((function(t){return Ea(t,"tracker-legend-label")})),v=0,w=0;for(let t=0;t<p.length;t++)g.includes(t)||m[t].width>w&&(w=m[t].width,v=t);let x=w/p[v].length,b=m[v].height,_=p.length-g.length,A=2*x,M=b,T=2*x,D=0,k=0;"vertical"===n.legendOrientation?(D=3*A+T+w,k=(_+1)*M):"horizontal"===n.legendOrientation&&(D=(2*A+T)*_+A+y(m,(function(t,e){return g.includes(e)?0:t.width})),k=M+b);let C=0,F=0;if("top"===n.legendPosition)C=c+e.dataAreaSize.width/2-D/2,F=u,Qa(r,0,k+M),Ga(i,0,k+M);else if("bottom"===n.legendPosition)C=c+e.dataAreaSize.width/2-D/2,F=u+e.dataAreaSize.height+f+M,Qa(r,0,k+M);else if("left"===n.legendPosition)C=0,F=u+e.dataAreaSize.height/2-k/2,Qa(r,D+A,0),Ga(i,D+A,0);else{if("right"!==n.legendPosition)return;C=e.dataAreaSize.width+c+h+A,F=u+e.dataAreaSize.height/2-k/2,Qa(r,D+A,0)}let N=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+C+","+F+")"),S=N.append("rect").attr("class","tracker-legend").attr("width",D).attr("height",k);n.legendBgColor&&S.style("fill",n.legendBgColor),n.legendBorderColor&&S.style("stroke",n.legendBorderColor);let I=A,L=b,P=I+A+T,B=L;if("vertical"===n.legendOrientation){e.output===Kr.Line?(N.selectAll("markers").data(p).enter().append("line").attr("x1",I).attr("x2",I+T).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M})).style("stroke",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().lineColor[e]})),N.selectAll("markers").data(p).enter().append("circle").attr("cx",I+T/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M})).attr("r",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().showPoint[e]?d.getDatasetById(e).getLineInfo().pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().pointColor[e]}))):e.output===Kr.Bar&&N.selectAll("markers").data(p).enter().append("rect").attr("x",I).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M-b/2})).attr("width",T).attr("height",b).style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getBarInfo().barColor[e]}));let t=N.selectAll("labels").data(p).enter().append("text").attr("x",P).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return B+(e-=n)*M})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");e.output===Kr.Line?t.style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().lineColor[e]})):e.output===Kr.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getBarInfo().barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,n=0;e.output===Kr.Line?(N.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=m[n].width+A+T+A,t})).attr("x2",(function(t,e){let r=g.filter((t=>t<e)).length;return 0===(e-=r)?n=I+T:n+=m[e].width+A+T+A,n})).attr("y1",L).attr("y2",L).style("stroke",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().lineColor[e]})),t=0,N.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I+T/2:t+=m[n].width+A+T+A,t})).attr("cy",L).attr("r",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().showPoint[e]?d.getDatasetById(e).getLineInfo().pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().pointColor[e]}))):e.output===Kr.Bar&&(t=0,N.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=m[n].width+A+T+A,t})).attr("y",L-b/2).attr("width",T).attr("height",b).style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getBarInfo().barColor[e]}))),t=0;let r=N.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=P:t+=m[n].width+A+T+A,t})).attr("y",B).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");e.output===Kr.Line?r.style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getLineInfo().lineColor[e]})):e.output===Kr.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return d.getDatasetById(e).getBarInfo().barColor[e]}))}}function Ra(t,e){let n=null;if(e.output===Kr.Line)n=e.line;else{if(e.output!==Kr.Bar)return;n=e.bar}if(!n)return;if(!n.title)return;let r=Ea(n.title,"tracker-title"),i=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=i,Qa(t.svg,0,r.height),Qa(t.graphArea,0,r.height),Ga(t.dataArea,0,r.height)}function $a(t,e,n){let r=Xt(t),i=e.svg,a=parseFloat(i.attr("width")),o=parseFloat(i.attr("height"));i.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${a} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(a*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function Za(t,e){let n={},r=Xt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let i=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=i;let a=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=a,n}function Qa(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,i=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",i)}function Ga(t,e,n){let r=new Ua(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}let Ja={min:function(t,e){return d(t.datasets.getDatasetById(e).getValues())},max:function(t,e){return h(t.datasets.getDatasetById(e).getValues())},sum:function(t,e){return y(t.datasets.getDatasetById(e).getValues())},count:function(t,e){return t.datasets.getDatasetById(e).getLengthNotNull()},days:function(t,e){return t.datasets.getDatasetById(e).getLength()},maxStreak:function(t,e){let n=0,r=0,i=t.datasets.getDatasetById(e);for(let t of i)null!==t.value?n++:n=0,n>r&&(r=n);return r},maxBreak:function(t,e){let n=0,r=0,i=t.datasets.getDatasetById(e);for(let t of i)null===t.value?n++:n=0,n>r&&(r=n);return r},lastStreak:function(t,e){let n=0,r=t.datasets.getDatasetById(e).getValues();for(let t=r.length-1;t>=0;t--){if(null===r[t])break;n++}return n},average:function(t,e){let n=t.datasets.getDatasetById(e),r=n.getLengthNotNull();if(r>0){return y(n.getValues())/r}return null},median:function(t,e){let n=t.datasets.getDatasetById(e);return m(n.getValues(),.5,r);var r},variance:function(t,e){return function(t,e){let n,r=0,i=0,a=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-i,i+=n/++r,a+=n*(e-i));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-i,i+=n/++r,a+=n*(l-i))}if(r>1)return a/(r-1)}(t.datasets.getDatasetById(e).getValues())}};function Ka(t,e){Xt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}var to=function(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});const r="YYYY-MM-DD",i="gggg-[W]ww",a="YYYY-MM";function o(t){const e=window.app.plugins.getPlugin("periodic-notes");return e&&e.settings?.[t]?.enabled}function l(){try{const{internalPlugins:t,plugins:e}=window.app;if(o("daily")){const{format:t,folder:n,template:i}=e.getPlugin("periodic-notes")?.settings?.daily||{};return{format:t||r,folder:n?.trim()||"",template:i?.trim()||""}}const{folder:n,format:i,template:a}=t.getPluginById("daily-notes")?.instance?.options||{};return{format:i||r,folder:n?.trim()||"",template:a?.trim()||""}}catch(t){console.info("No custom daily note settings found!",t)}}function s(){try{const t=window.app.plugins,e=t.getPlugin("calendar")?.options,n=t.getPlugin("periodic-notes")?.settings?.weekly;if(o("weekly"))return{format:n.format||i,folder:n.folder?.trim()||"",template:n.template?.trim()||""};const r=e||{};return{format:r.weeklyNoteFormat||i,folder:r.weeklyNoteFolder?.trim()||"",template:r.weeklyNoteTemplate?.trim()||""}}catch(t){console.info("No custom weekly note settings found!",t)}}function u(){const t=window.app.plugins;try{const e=o("monthly")&&t.getPlugin("periodic-notes")?.settings?.monthly||{};return{format:e.format||a,folder:e.folder?.trim()||"",template:e.template?.trim()||""}}catch(t){console.info("No custom monthly note settings found!",t)}}function f(...t){let e=[];for(let n=0,r=t.length;n<r;n++)e=e.concat(t[n].split("/"));const n=[];for(let t=0,r=e.length;t<r;t++){const r=e[t];r&&"."!==r&&n.push(r)}return""===e[0]&&n.unshift(""),n.join("/")}async function c(t,e){e.endsWith(".md")||(e+=".md");const r=n.default.normalizePath(f(t,e));return await async function(t){const e=t.replace(/\\/g,"/").split("/");if(e.pop(),e.length){const t=f(...e);window.app.vault.getAbstractFileByPath(t)||await window.app.vault.createFolder(t)}}(r),r}async function h(t){const{metadataCache:e,vault:r}=window.app,i=n.default.normalizePath(t);if("/"===i)return Promise.resolve(["",null]);try{const t=e.getFirstLinkpathDest(i,""),n=await r.cachedRead(t);return[n,window.app.foldManager.load(t)]}catch(t){return console.error(`Failed to read the daily note template '${i}'`,t),new n.default.Notice("Failed to read the daily note template"),["",null]}}function d(t,e="day"){return`${e}-${t.clone().startOf(e).format()}`}function g(t){return t.replace(/\[[^\]]*\]/g,"")}function p(t,e){return m(t.basename,e)}function m(t,e){const n={day:l,week:s,month:u}[e]().format.split("/").pop(),r=window.moment(t,n,!0);if(!r.isValid())return null;if(function(t,e){if("week"===e){const e=g(t);return/w{1,2}/i.test(e)&&(/M{1,4}/.test(e)||/D{1,4}/.test(e))}return!1}(n,e)&&"week"===e){const e=g(n);if(/w{1,2}/i.test(e))return window.moment(t,n.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return r}class y extends Error{}async function v(t){const e=window.app,{vault:r}=e,i=window.moment,{template:a,format:o,folder:s}=l(),[u,f]=await h(a),d=t.format(o),g=await c(s,d);try{const n=await r.create(g,u.replace(/{{\s*date\s*}}/gi,d).replace(/{{\s*time\s*}}/gi,i().format("HH:mm")).replace(/{{\s*title\s*}}/gi,d).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,l,s)=>{const u=i(),f=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&f.add(parseInt(a,10),l),s?f.format(s.substring(1).trim()):f.format(o)})).replace(/{{\s*yesterday\s*}}/gi,t.clone().subtract(1,"day").format(o)).replace(/{{\s*tomorrow\s*}}/gi,t.clone().add(1,"d").format(o)));return e.foldManager.save(n,f),n}catch(t){console.error(`Failed to create file: '${g}'`,t),new n.default.Notice("Unable to create new file.")}}class w extends Error{}function x(t){return function(){const{moment:t}=window;let e=t.localeData()._week.dow;const n=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;e;)n.push(n.shift()),e--;return n}().indexOf(t.toLowerCase())}async function b(t){const{vault:e}=window.app,{template:r,format:i,folder:a}=s(),[o,l]=await h(r),u=t.format(i),f=await c(a,u);try{const n=await e.create(f,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,o,l)=>{const s=window.moment(),u=t.clone().set({hour:s.get("hour"),minute:s.get("minute"),second:s.get("second")});return r&&u.add(parseInt(a,10),o),l?u.format(l.substring(1).trim()):u.format(i)})).replace(/{{\s*title\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,((e,n,r)=>{const i=x(n);return t.weekday(i).format(r.trim())})));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${f}'`,t),new n.default.Notice("Unable to create new file.")}}class _ extends Error{}async function A(t){const{vault:e}=window.app,{template:r,format:i,folder:a}=u(),[o,l]=await h(r),s=t.format(i),f=await c(a,s);try{const n=await e.create(f,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,o,l)=>{const s=window.moment(),u=t.clone().set({hour:s.get("hour"),minute:s.get("minute"),second:s.get("second")});return r&&u.add(parseInt(a,10),o),l?u.format(l.substring(1).trim()):u.format(i)})).replace(/{{\s*date\s*}}/gi,s).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,s));return window.app.foldManager.save(n,l),n}catch(t){console.error(`Failed to create file: '${f}'`,t),new n.default.Notice("Unable to create new file.")}}function M(){const{app:t}=window;if(t.plugins.getPlugin("calendar"))return!0;const e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.weekly?.enabled}function T(){const{app:t}=window,e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.monthly?.enabled}e.DEFAULT_DAILY_NOTE_FORMAT=r,e.DEFAULT_MONTHLY_NOTE_FORMAT=a,e.DEFAULT_WEEKLY_NOTE_FORMAT=i,e.appHasDailyNotesPluginLoaded=function(){const{app:t}=window,e=t.internalPlugins.plugins["daily-notes"];if(e&&e.enabled)return!0;const n=t.plugins.getPlugin("periodic-notes");return n&&n.settings?.daily?.enabled},e.appHasMonthlyNotesPluginLoaded=T,e.appHasWeeklyNotesPluginLoaded=M,e.createDailyNote=v,e.createMonthlyNote=A,e.createPeriodicNote=function(t,e){return{day:v,month:A,week:b}[t](e)},e.createWeeklyNote=b,e.getAllDailyNotes=function(){const{vault:t}=window.app,{folder:e}=l(),r=t.getAbstractFileByPath(n.default.normalizePath(e));if(!r)throw new y("Failed to find daily notes folder");const i={};return n.default.Vault.recurseChildren(r,(t=>{if(t instanceof n.default.TFile){const e=p(t,"day");if(e){const n=d(e,"day");i[n]=t}}})),i},e.getAllMonthlyNotes=function(){const t={};if(!T())return t;const{vault:e}=window.app,{folder:r}=u(),i=e.getAbstractFileByPath(n.default.normalizePath(r));if(!i)throw new _("Failed to find monthly notes folder");return n.default.Vault.recurseChildren(i,(e=>{if(e instanceof n.default.TFile){const n=p(e,"month");if(n){const r=d(n,"month");t[r]=e}}})),t},e.getAllWeeklyNotes=function(){const t={};if(!M())return t;const{vault:e}=window.app,{folder:r}=s(),i=e.getAbstractFileByPath(n.default.normalizePath(r));if(!i)throw new w("Failed to find weekly notes folder");return n.default.Vault.recurseChildren(i,(e=>{if(e instanceof n.default.TFile){const n=p(e,"week");if(n){const r=d(n,"week");t[r]=e}}})),t},e.getDailyNote=function(t,e){return e[d(t,"day")]??null},e.getDailyNoteSettings=l,e.getDateFromFile=p,e.getDateFromPath=function(t,e){return m(function(t){let e=t.substring(t.lastIndexOf("/")+1);return-1!=e.lastIndexOf(".")&&(e=e.substring(0,e.lastIndexOf("."))),e}(t),e)},e.getDateUID=d,e.getMonthlyNote=function(t,e){return e[d(t,"month")]??null},e.getMonthlyNoteSettings=u,e.getPeriodicNoteSettings=function(t){return(0,{day:l,week:s,month:u}[t])()},e.getTemplateInfo=h,e.getWeeklyNote=function(t,e){return e[d(t,"week")]??null},e.getWeeklyNoteSettings=s}));function eo(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function no(t){return"tag"===t||"text"===t||"frontmatter"===t||"wiki"===t||"dvField"===t||"table"===t}function ro(t){return"left"===t||"right"===t||"none"===t}function io(t){return!0}function ao(t,e,n,r,i){let a=[],o="",l=0;for(;n>a.length;)a.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==s?s:r}else{if("boolean"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,l++}}else{let t=e[e.length-1];a[n]=l>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<a.length;e++)if(e<i.length){let n=i[e].trim(),s=null;if(e>0&&(s=eo(i[e-1].trim())),""===n)a[e]=null!==s?s:r;else{let r=eo(n);if(null===r){o="Invalid inputs for "+t;break}a[e]=r,l++}}else{let t=eo(i[i.length-1].trim());a[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=eo(e);if(null!==n){a[0]=n,l++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){a[0]=e,l++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;return i||0!==l||(o="No valid input for "+t),""!==o?o:a}function oo(t,e,n,r,i){let a=[],o="",l=0;for(;n>a.length;)a.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==s?s:r}else{if("number"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,l++}}else{let t=e[e.length-1];a[n]=l>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<a.length;n++)if(n<i.length){let e=i[n].trim(),s=null;if(n>0&&(s=parseFloat(i[n-1].trim())),""===e)null!==s&&Number.isNumber(s)?a[n]=s:a[n]=r;else{let r=parseFloat(e);if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}a[n]=r,l++}}else{let t=parseFloat(i[e.length-1].trim());l>0&&Number.isNumber(t)?a[n]=t:a[n]=r}}else if(""===e);else{let n=parseFloat(e);if(Number.isNumber(n)){a[0]=n,l++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){a[0]=e,l++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return i||0!==l||(o="No valid input for "+t),""!==o?o:a}function lo(t,e,n,r,i,a){let o=[],l="",s=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"!=typeof a){l="Invalid inputs for "+t;break}if(a=a.trim(),""===a)o[n]=null!==u?u:r;else if(i){if(!i(a)){l="Invalid inputs for "+t;break}o[n]=a,s++}else o[n]=a,s++}else{let t=e[e.length-1].trim();o[n]=s>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<a.length){let n=a[e].trim(),u=null;if(e>0&&(u=a[e-1].trim()),""===n)o[e]=null!==u?u:r;else if(i){if(!i(n)){l="Invalid inputs for "+t;break}o[e]=n,s++}else o[e]=n,s++}else{let t=a[a.length-1].trim();o[e]=s>0?t:r}}else if(""===e);else if(i)if(i(e)){o[0]=e,s++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,s++;for(let t=1;t<o.length;t++)o[t]=e}}else l="Invalid inputs for "+t;return a||0!==s||(l="No valid input for "+t),""!==l?l:o}function so(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=lo("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=lo("yAxisColor",null==t?void 0:t.yAxisColor,2,"",io,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let i=lo("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",io,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=i;let a=lo("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=a;let o=oo("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let l=oo("yMax",null==t?void 0:t.yMax,2,null,!0);return"string"==typeof l?l:l.length>2?"yMax accepts not more than two values for left and right y-axes":void(e.yMax=l)}function uo(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}let fo=["HH:mm","HH:m","H:mm","H:m","hh:mm A","hh:mm a","hh:m A","hh:m a","h:mm A","h:mm a","h:m A","h:m a"];function co(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let i=new Array;i.push({query:n,value:r}),t.set(e,i)}}const ho={folder:"/",dateFormat:"YYYY-MM-DD"};class go extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(e).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}function po(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),i=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===i?t:t.substring(r,t.length-i)}function mo(t,e){let n=t.basename;return e.dateFormatPrefix&&n.startsWith(e.dateFormatPrefix)&&(n=n.slice(e.dateFormatPrefix.length)),e.dateFormatSuffix&&n.endsWith(e.dateFormatSuffix)&&(n=n.slice(0,n.length-e.dateFormatSuffix.length)),window.moment(n,e.dateFormat,!0)}class yo extends t.Plugin{onload(){return r(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new go(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Kr.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Kr.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Kr.Summary)})}))}loadSettings(){return r(this,void 0,void 0,(function*(){this.settings=Object.assign({},ho,yield this.loadData())}))}saveSettings(){return r(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let i of e.children)i instanceof t.TFile?"md"===i.extension&&r.push(i):i instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(i)));return r}getFiles(e,n=!0){let r=[],i=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return i&&i instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(i))),r}addToDataMap(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let i=new Array;i.push({query:n,value:r}),t.set(e,i)}}postprocessor(e,n,i){return r(this,void 0,void 0,(function*(){const i=document.createElement("div");let a=function(e,n){var r,i,a,o,l,s,u,f,c,h,d,g;let p;try{p=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!p)return"Error parsing YAML";let m=uo(p),y="";if(!m.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let v=[];if("object"==typeof p.searchTarget&&null!==p.searchTarget){if(Array.isArray(p.searchTarget))for(let t of p.searchTarget)if("string"==typeof t){if(""===t){y="Empty search target is not allowed.";break}v.push(t)}}else if("string"==typeof p.searchTarget){let t=p.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){y="Empty search target is not allowed.";break}v.push(e)}else""===p.searchTarget?y="Empty search target is not allowed.":v.push(p.searchTarget)}else y="Invalid search target (searchTarget)";if(""!==y)return y;let w=v.length;if(!m.includes("searchType"))return"Parameter 'searchType' not found in YAML";let x=[],b=lo("searchType",p.searchType,w,"",no,!1);if("string"==typeof b)return b;for(let t of b)switch(t){case"tag":x.push(Jr.Tag);break;case"frontmatter":x.push(Jr.Frontmatter);break;case"wiki":x.push(Jr.Wiki);break;case"text":x.push(Jr.Text);break;case"dvField":x.push(Jr.dvField);break;case"table":x.push(Jr.Table)}if(x.includes(Jr.Table)&&x.filter((t=>t!==Jr.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let _=[],A=lo("separator",p.separator,w,"/",null,!0);if("string"==typeof A)return A;_=A;let M=null;"number"==typeof p.xDataset&&(M=p.xDataset);let T=[];for(let t=0;t<v.length;t++){let e=new ka(T.length,x[t],v[t]);e.setSeparator(_[t]),t===M&&(e.usedAsXDataset=!0),T.push(e)}let D=new Na(T),k=uo(D),C=["searchType","searchTarget","separator"];for(let t of m)if(!k.includes(t)&&!C.includes(t))return y="'"+t+"' is not an available key",y;to.getDailyNoteSettings(),"string"==typeof p.folder?""===p.folder?D.folder=n.settings.folder:D.folder=p.folder:D.folder=n.settings.folder;let F=n.app.vault.getAbstractFileByPath(t.normalizePath(D.folder));if(!(F&&F instanceof t.TFolder))return"Folder '"+D.folder+"' doesn't exist";const N=p.dateFormat;if("string"==typeof p.dateFormat?""===p.dateFormat?D.dateFormat=n.settings.dateFormat:D.dateFormat=N:D.dateFormat=n.settings.dateFormat,"string"==typeof p.dateFormatPrefix&&(D.dateFormatPrefix=p.dateFormatPrefix),"string"==typeof p.dateFormatSuffix&&(D.dateFormatSuffix=p.dateFormatSuffix),"string"==typeof p.startDate){let t=p.startDate;D.dateFormatPrefix&&t.startsWith(D.dateFormatPrefix)&&(t=t.slice(D.dateFormatPrefix.length)),D.dateFormatSuffix&&t.endsWith(D.dateFormatSuffix)&&(t=t.slice(0,t.length-D.dateFormatSuffix.length));let e=window.moment(t,D.dateFormat,!0);if(!e.isValid())return"Invalid startDate, the format of startDate may not match your dateFormat "+D.dateFormat;D.startDate=e}if("string"==typeof p.endDate){let t=p.endDate;D.dateFormatPrefix&&t.startsWith(D.dateFormatPrefix)&&(t=t.slice(D.dateFormatPrefix.length)),D.dateFormatSuffix&&t.endsWith(D.dateFormatSuffix)&&(t=t.slice(0,t.length-D.dateFormatSuffix.length));let e=window.moment(t,D.dateFormat,!0);if(!e.isValid())return"Invalid endDate, the format of endDate may not match your dateFormat "+D.dateFormat;D.endDate=e}if(null!==D.startDate&&D.startDate.isValid()&&null!==D.endDate&&D.endDate.isValid()&&D.endDate<D.startDate)return"Invalid date range (startDate larger than endDate)";let S=oo("xDataset",p.xDataset,w,-1,!0);if("string"==typeof S)return S;S=S.map((t=>t<0||t>=w?-1:t)),D.xDataset=S;let I=lo("datasetName",p.datasetName,w,"untitled",null,!0);if("string"==typeof I)return I;let L=0;for(let t=0;t<I.length;t++)D.xDataset.includes(t)||"untitled"===I[t]&&(I[t]="untitled"+L.toString(),L++);if(new Set(I).size!==I.length)return"Not enough dataset names or duplicated names";D.datasetName=I;let P=oo("constValue",p.constValue,w,1,!0);if("string"==typeof P)return P;D.constValue=P;let B=ao("ignoreAttachedValue",p.ignoreAttachedValue,w,!1,!0);if("string"==typeof B)return B;D.ignoreAttachedValue=B;let Y=ao("ignoreZeroValue",p.ignoreZeroValue,w,!1,!0);if("string"==typeof Y)return Y;D.ignoreZeroValue=Y;let U=ao("accum",p.accum,w,!1,!0);if("string"==typeof U)return U;D.accum=U;let V=oo("penalty",p.penalty,w,null,!0);if("string"==typeof V)return V;D.penalty=V,"number"==typeof p.fixedScale&&(D.fixedScale=p.fixedScale),"boolean"==typeof p.fitPanelWidth&&(D.fitPanelWidth=p.fitPanelWidth);let E=oo("margin",p.margin,4,10,!0);if("string"==typeof E)return E;if(E.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";D.margin=new Ya(E[0],E[1],E[2],E[3]);let H=!1;void 0!==p.line&&(H=!0);let z=!1;void 0!==p.bar&&(z=!0);let q=!1;void 0!==p.summary&&(q=!0);let O=Number(H)+Number(z)+Number(q);if(0===O)return"No output parameter provided, please place line, bar, or summary.";if(1===O)H&&(D.output=Kr.Line),z&&(D.output=Kr.Bar),q&&(D.output=Kr.Summary);else if(O>=2)return"Too many output parameters, pick line, bar, or summary.";if(D.output===Kr.Line){if(D.line=new Ia,null!==p.line){let t=uo(D.line),e=uo(p.line);for(let n of e)if(!t.includes(n))return y="'"+n+"' is not an available key",y}let t=so(p.line,D.line);if("string"==typeof t)return t;let e=lo("lineColor",null===(r=null==p?void 0:p.line)||void 0===r?void 0:r.lineColor,w,"",io,!0);if("string"==typeof e)return e;D.line.lineColor=e;let n=oo("lineWidth",null===(i=null==p?void 0:p.line)||void 0===i?void 0:i.lineWidth,w,1.5,!0);if("string"==typeof n)return n;D.line.lineWidth=n;let d=ao("showLine",null===(a=null==p?void 0:p.line)||void 0===a?void 0:a.showLine,w,!0,!0);if("string"==typeof d)return d;D.line.showLine=d;let g=ao("showPoint",null===(o=null==p?void 0:p.line)||void 0===o?void 0:o.showPoint,w,!0,!0);if("string"==typeof g)return g;D.line.showPoint=g;let m=lo("pointColor",null===(l=null==p?void 0:p.line)||void 0===l?void 0:l.pointColor,w,"#69b3a2",io,!0);if("string"==typeof m)return m;D.line.pointColor=m;let v=lo("pointBorderColor",null===(s=null==p?void 0:p.line)||void 0===s?void 0:s.pointBorderColor,w,"#69b3a2",io,!0);if("string"==typeof v)return v;D.line.pointBorderColor=v;let x=oo("pointBorderWidth",null===(u=null==p?void 0:p.line)||void 0===u?void 0:u.pointBorderWidth,w,0,!0);if("string"==typeof x)return x;D.line.pointBorderWidth=x;let b=oo("pointSize",null===(f=null==p?void 0:p.line)||void 0===f?void 0:f.pointSize,w,3,!0);if("string"==typeof b)return b;D.line.pointSize=b;let _=ao("fillGap",null===(c=null==p?void 0:p.line)||void 0===c?void 0:c.fillGap,w,!1,!0);if("string"==typeof _)return _;D.line.fillGap=_;let A=lo("yAxisLocation",null===(h=null==p?void 0:p.line)||void 0===h?void 0:h.yAxisLocation,w,"left",ro,!0);if("string"==typeof A)return A;D.line.yAxisLocation=A}if(D.output===Kr.Bar){if(D.bar=new La,null!==p.bar){let t=uo(D.bar),e=uo(p.bar);for(let n of e)if(!t.includes(n))return y="'"+n+"' is not an available key",y}let t=so(p.bar,D.bar);if("string"==typeof t)return t;let e=lo("barColor",null===(d=null==p?void 0:p.bar)||void 0===d?void 0:d.barColor,w,"",io,!0);if("string"==typeof e)return e;D.bar.barColor=e;let n=lo("yAxisLocation",null===(g=null==p?void 0:p.bar)||void 0===g?void 0:g.yAxisLocation,w,"left",ro,!0);if("string"==typeof n)return n;D.bar.yAxisLocation=n}if(D.output===Kr.Summary){if(D.summary=new Pa,null!==p.summary){let t=uo(D.summary),e=uo(p.summary);for(let n of e)if(!t.includes(n))return y="'"+n+"' is not an available key",y}null!==p.summary&&("string"==typeof p.summary.template&&(D.summary.template=p.summary.template),"string"==typeof p.summary.style&&(D.summary.style=p.summary.style))}return D}(e.trim(),this);if("string"==typeof a){return Ka(i,a),void n.appendChild(i)}let o,l=a;try{o=this.getFiles(l.folder)}catch(t){return Ka(i,t.message),void n.appendChild(i)}let s=window.moment(""),u=window.moment(""),f=0,c=new Map;const h=o.map((t=>r(this,void 0,void 0,(function*(){let e=null;l.queries.some((t=>{let e=t.getType();return e===Jr.Frontmatter||e===Jr.Tag||e===Jr.Wiki}))&&(e=this.app.metadataCache.getFileCache(t));let n=null;l.queries.some((t=>{let e=t.getType();return e===Jr.Tag||e===Jr.Text||e===Jr.dvField}))&&(n=yield this.app.vault.adapter.read(t.path));let i=new Map,a=!1;for(let e of l.xDataset)if(!i.has(e))if(-1===e){let e=mo(t,l);e.isValid()?(null!==l.startDate&&e<l.startDate&&(a=!0),null!==l.endDate&&e>l.endDate&&(a=!0)):a=!0,a||(i.set(-1,e.format(l.dateFormat)),f++,1==f?(s=e.clone(),u=e.clone()):(e<s&&(s=e.clone()),e>u&&(u=e.clone())))}else{switch(l.queries[e].getType()){case Jr.Frontmatter:case Jr.Tag:case Jr.Text:case Jr.dvField:}}if(a)return;const o=l.queries.filter((t=>t.getType()!==Jr.Table&&!t.usedAsXDataset)).map((t=>r(this,void 0,void 0,(function*(){e&&t.getType()===Jr.Tag&&function(t,e,n,r,i){let a=t.frontmatter,o=[];if(a&&a.tags){let t=0,l=!1;Array.isArray(a.tags)?o=o.concat(a.tags):o.push(a.tags);for(let a of o){if(a===e.getTarget())t+=n.constValue[e.getId()],l=!0;else{if(!a.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0}let o=null;l&&(o=t),co(r,i.get(-1),e,o)}}}(e,t,l,c,i),e&&t.getType()===Jr.Frontmatter&&"tags"!==t.getTarget()&&function(t,e,n,r,i){let a=t.frontmatter;if(a)if(a[e.getTarget()]){let t=null,n=a[e.getTarget()];if("string"==typeof n)if(n.includes(":")){let r=window.moment(n,fo,!0);r.isValid()&&(e.setUsingTimeValue(),t=r.diff(window.moment("00:00","HH:mm",!0),"seconds"))}else t=parseFloat(n);else t=parseFloat(n);Number.isNumber(t)&&co(r,i.get(-1),e,t)}else if(e.getParentTarget()&&a[e.getParentTarget()]){let t=a[e.getParentTarget()],n=null;if(Array.isArray(t)?n=t.map((t=>t.toString())):"string"==typeof t&&(n=t.split(e.getSeparator())),n&&n.length>e.getAccessor()&&e.getAccessor()>=0){let a=null,o=n[e.getAccessor()].trim();if(t.includes(":")){let t=window.moment(o,fo,!0);t.isValid()&&(e.setUsingTimeValue(),a=t.diff(window.moment("00:00","HH:mm",!0),"seconds"))}else a=parseFloat(o);Number.isNumber(a)&&co(r,i.get(-1),e,a)}}}(e,t,0,c,i),e&&t.getType()===Jr.Wiki&&function(t,e,n,r,i){let a=t.links,o=0,l=!1;for(let t of a)t.link===e.getTarget()&&(l=!0,o+=n.constValue[e.getId()]);let s=null;l&&(s=o),co(r,i.get(-1),e,s)}(e,t,l,c,i),n&&t.getType()===Jr.Tag&&function(t,e,n,r,i){let a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let o,l=new RegExp("(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),s=0,u=!1;for(;o=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)s+=n.constValue[e.getId()],u=!0;else{let t=o.groups.values.split(e.getSeparator());if(!t)continue;if(1===t.length){let r=t[0].trim();if(r.includes(":")){let t=window.moment(r,fo,!0);t.isValid()&&(e.setUsingTimeValue(),s=t.diff(window.moment("00:00","HH:mm",!0),"seconds"),u=!0)}else{let t=parseFloat(r);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,u=!0)}}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=t[e.getAccessor()].trim();if(n.includes(":")){let t=window.moment(n,fo,!0);t.isValid()&&(e.setUsingTimeValue(),s=t.diff(window.moment("00:00","HH:mm",!0),"seconds"),u=!0)}else{let t=parseFloat(n);Number.isNumber(t)&&(s+=t,u=!0)}}}let f=null;u&&(f=s),co(r,i.get(-1),e,f)}(n,t,l,c,i),n&&t.getType()===Jr.Text&&function(t,e,n,r,i){let a,o=e.getTarget(),l=new RegExp(o,"gm"),s=0,u=!1;for(;a=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===a.groups)s+=n.constValue[e.getId()],u=!0;else if(void 0!==a.groups.value){let t=parseFloat(a.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,u=!0)}u&&co(r,i.get(-1),e,s)}(n,t,l,c,i),n&&t.getType()===Jr.dvField&&function(t,e,n,r,i){let a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let o,l=new RegExp("(^|\\s)\\*{0,2}"+a+"\\*{0,2}(::\\s*(?<values>[\\d\\.\\/\\-\\w,@;\\s]*))(\\s|$)","gm"),s=0,u=!1;for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.values){let t=o.groups.values.trim().split(e.getSeparator());if(!t)continue;if(1===t.length){let r=t[0];if(r.includes(":")){let t=window.moment(r,fo,!0);t.isValid()&&(e.setUsingTimeValue(),s=t.diff(window.moment("00:00","HH:mm",!0),"seconds"),u=!0)}else{let t=parseFloat(r);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,u=!0)}}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=t[e.getAccessor()].trim();if(n.includes(":")){let t=window.moment(n,fo,!0);t.isValid()&&(e.setUsingTimeValue(),s=t.diff(window.moment("00:00","HH:mm",!0),"seconds"),u=!0)}else{let t=parseFloat(n);Number.isNumber(t)&&(s+=t,u=!0)}}}else s+=n.constValue[e.getId()],u=!0;let f=null;u&&(f=s),co(r,i.get(-1),e,f)}(n,t,l,c,i)}))));yield Promise.all(o)}))));yield Promise.all(h);let d=l.queries.filter((t=>t.getType()===Jr.Table)),g=[];for(let t of d){let e=t.getParentTarget(),n=t.getAccessor(),r=t.usedAsXDataset,i=g.find((t=>t.filePath===e&&t.tableIndex===n));if(i)r?i.xDataset=t:i.yDatasets.push(t);else{let i=new Va(e,n);r?i.xDataset=t:i.yDatasets.push(t),g.push(i)}}for(let e of g){let r=e.xDataset,a=e.yDatasets,o=r.getParentTarget(),h=r.getAccessor(),d="";o+=".md";let g=this.app.vault.getAbstractFileByPath(t.normalizePath(o));if(!(g&&g instanceof t.TFile))continue;{f++;let t,e=yield this.app.vault.adapter.read(g.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===h){d=t[0];break}r++}}let p=d.split(/\r?\n/);p=p.filter((t=>""!==t));let m=0,y=0;if(p.length>=2){let t=p.shift().trim();t=po(t,"|"),m=t.split("|").length;let e=p.shift().trim();e=po(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;y=p.length}if(0==y)continue;let v=r.getAccessor(1);if(v>=m)continue;let w=[];for(let t of p){let e=po(t.trim(),"|").split("|");if(v<e.length){let t=e[v].trim(),n=window.moment(t,l.dateFormat,!0);s.isValid()||u.isValid()?(n<s&&(s=n.clone()),n>u&&(u=n.clone())):(s=n.clone(),u=n.clone()),n.isValid()?w.push(n):w.push(null)}else w.push(null)}if(w.every((t=>null===t))){return Ka(i,"No valid X value found"),void n.appendChild(i)}for(let t of a){let e=t.getAccessor(1);if(e>=m)continue;let n=0;for(let r of p){let i=po(r.trim(),"|").split("|");if(e<i.length){let r=i[e].trim().split(t.getSeparator());if(!r)continue;if(1===r.length){let e=parseFloat(r[0]);Number.isNumber(e)&&n<w.length&&w[n]&&this.addToDataMap(c,w[n].format(l.dateFormat),t,e)}else if(r.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,i=r[t.getAccessor(2)].trim();e=parseFloat(i),Number.isNumber(e)&&n<w.length&&w[n]&&this.addToDataMap(c,w[n].format(l.dateFormat),t,e)}}n++}}}if(0===f){return Ka(i,"No notes found under the given search condition"),void n.appendChild(i)}if(!s.isValid()||!u.isValid()){return Ka(i,"Invalid date range"),void n.appendChild(i)}if(null===l.startDate&&null===l.endDate)l.startDate=s.clone(),l.endDate=u.clone();else if(null!==l.startDate&&null===l.endDate){if(!(l.startDate<u)){return Ka(i,"Invalid date range"),void n.appendChild(i)}l.endDate=u.clone()}else if(null!==l.endDate&&null===l.startDate){if(!(l.endDate>s)){return Ka(i,"Invalid date range"),void n.appendChild(i)}l.startDate=s.clone()}else if(l.startDate<s&&l.endDate<s||l.startDate>u&&l.endDate>u){return Ka(i,"Invalid date range"),void n.appendChild(i)}let p=new Fa(l.startDate,l.endDate);for(let t of l.queries){let e=p.createDataset(t,l);for(let n=l.startDate.clone();n<=l.endDate;n.add(1,"days"))if(c.has(n.format(l.dateFormat))){let r=c.get(n.format(l.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){r[0];let t=0,i=!1;for(let e=0;e<r.length;e++)null!==r[e].value&&(t+=r[e].value,i=!0);i&&e.setValue(n,t)}}}l.datasets=p;let m=Ha(i,l);if("string"==typeof m){return Ka(i,m),void n.appendChild(i)}n.appendChild(i)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Kr.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Kr.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Kr.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,i=e.getLine(r);return n.ch=i.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=yo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVpY2tzZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanMiLCJub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCJub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCJub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIm5vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvYXJyYXkuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGQuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXJBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjSG91ci5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNb250aC5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3RpY2tzLmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJzcmMvZGF0YS50cyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbmljZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnQuanMiLCJub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmUuanMiLCJub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FycmF5LmpzIiwic3JjL3JlbmRlcmluZy50cyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZXh0ZW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWRpYW4uanMiLCJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwibm9kZV9tb2R1bGVzL29ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZS9kaXN0L21haW4uanMiLCJzcmMvcGFyc2luZy50cyIsInNyYy9jb2xsZWN0aW5nLnRzIiwic3JjL3NldHRpbmdzLnRzIiwic3JjL2hlbHBlci50cyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGYpIHtcbiAgbGV0IGRlbHRhID0gZjtcbiAgbGV0IGNvbXBhcmUgPSBmO1xuXG4gIGlmIChmLmxlbmd0aCA9PT0gMSkge1xuICAgIGRlbHRhID0gKGQsIHgpID0+IGYoZCkgLSB4O1xuICAgIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGYpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVmdChhLCB4LCBsbywgaGkpIHtcbiAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gcmlnaHQoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRlcihhLCB4LCBsbywgaGkpIHtcbiAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgIGNvbnN0IGkgPSBsZWZ0KGEsIHgsIGxvLCBoaSAtIDEpO1xuICAgIHJldHVybiBpID4gbG8gJiYgZGVsdGEoYVtpIC0gMV0sIHgpID4gLWRlbHRhKGFbaV0sIHgpID8gaSAtIDEgOiBpO1xuICB9XG5cbiAgcmV0dXJuIHtsZWZ0LCBjZW50ZXIsIHJpZ2h0fTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiAoZCwgeCkgPT4gYXNjZW5kaW5nKGYoZCksIHgpO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3Rvci5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxuY29uc3QgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCBjb25zdCBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCBjb25zdCBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgY29uc3QgYmlzZWN0Q2VudGVyID0gYmlzZWN0b3IobnVtYmVyKS5jZW50ZXI7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBudW1iZXJzKHZhbHVlcywgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIGxldCByMCA9IE1hdGgucm91bmQoc3RhcnQgLyBzdGVwKSwgcjEgPSBNYXRoLnJvdW5kKHN0b3AgLyBzdGVwKTtcbiAgICBpZiAocjAgKiBzdGVwIDwgc3RhcnQpICsrcjA7XG4gICAgaWYgKHIxICogc3RlcCA+IHN0b3ApIC0tcjE7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IHIxIC0gcjAgKyAxKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAocjAgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RlcCA9IC1zdGVwO1xuICAgIGxldCByMCA9IE1hdGgucm91bmQoc3RhcnQgKiBzdGVwKSwgcjEgPSBNYXRoLnJvdW5kKHN0b3AgKiBzdGVwKTtcbiAgICBpZiAocjAgLyBzdGVwIDwgc3RhcnQpICsrcjA7XG4gICAgaWYgKHIxIC8gc3RlcCA+IHN0b3ApIC0tcjE7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IHIxIC0gcjAgKyAxKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAocjAgKyBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXgodmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtYXg7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtaW47XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGxcbiAgICAgICAgICAmJiAobWluID4gdmFsdWUgfHwgKG1pbiA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGxcbiAgICAgICAgICAmJiAobWluID4gdmFsdWUgfHwgKG1pbiA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9xdWlja3NlbGVjdFxuLy8gSVNDIGxpY2Vuc2UsIENvcHlyaWdodCAyMDE4IFZsYWRpbWlyIEFnYWZvbmtpbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1aWNrc2VsZWN0KGFycmF5LCBrLCBsZWZ0ID0gMCwgcmlnaHQgPSBhcnJheS5sZW5ndGggLSAxLCBjb21wYXJlID0gYXNjZW5kaW5nKSB7XG4gIHdoaWxlIChyaWdodCA+IGxlZnQpIHtcbiAgICBpZiAocmlnaHQgLSBsZWZ0ID4gNjAwKSB7XG4gICAgICBjb25zdCBuID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgIGNvbnN0IG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICBjb25zdCB6ID0gTWF0aC5sb2cobik7XG4gICAgICBjb25zdCBzID0gMC41ICogTWF0aC5leHAoMiAqIHogLyAzKTtcbiAgICAgIGNvbnN0IHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgY29uc3QgbmV3TGVmdCA9IE1hdGgubWF4KGxlZnQsIE1hdGguZmxvb3IoayAtIG0gKiBzIC8gbiArIHNkKSk7XG4gICAgICBjb25zdCBuZXdSaWdodCA9IE1hdGgubWluKHJpZ2h0LCBNYXRoLmZsb29yKGsgKyAobiAtIG0pICogcyAvIG4gKyBzZCkpO1xuICAgICAgcXVpY2tzZWxlY3QoYXJyYXksIGssIG5ld0xlZnQsIG5ld1JpZ2h0LCBjb21wYXJlKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ID0gYXJyYXlba107XG4gICAgbGV0IGkgPSBsZWZ0O1xuICAgIGxldCBqID0gcmlnaHQ7XG5cbiAgICBzd2FwKGFycmF5LCBsZWZ0LCBrKTtcbiAgICBpZiAoY29tcGFyZShhcnJheVtyaWdodF0sIHQpID4gMCkgc3dhcChhcnJheSwgbGVmdCwgcmlnaHQpO1xuXG4gICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICBzd2FwKGFycmF5LCBpLCBqKSwgKytpLCAtLWo7XG4gICAgICB3aGlsZSAoY29tcGFyZShhcnJheVtpXSwgdCkgPCAwKSArK2k7XG4gICAgICB3aGlsZSAoY29tcGFyZShhcnJheVtqXSwgdCkgPiAwKSAtLWo7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhcmUoYXJyYXlbbGVmdF0sIHQpID09PSAwKSBzd2FwKGFycmF5LCBsZWZ0LCBqKTtcbiAgICBlbHNlICsraiwgc3dhcChhcnJheSwgaiwgcmlnaHQpO1xuXG4gICAgaWYgKGogPD0gaykgbGVmdCA9IGogKyAxO1xuICAgIGlmIChrIDw9IGopIHJpZ2h0ID0gaiAtIDE7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBzd2FwKGFycmF5LCBpLCBqKSB7XG4gIGNvbnN0IHQgPSBhcnJheVtpXTtcbiAgYXJyYXlbaV0gPSBhcnJheVtqXTtcbiAgYXJyYXlbal0gPSB0O1xufVxuIiwiaW1wb3J0IG1heCBmcm9tIFwiLi9tYXguanNcIjtcbmltcG9ydCBtaW4gZnJvbSBcIi4vbWluLmpzXCI7XG5pbXBvcnQgcXVpY2tzZWxlY3QgZnJvbSBcIi4vcXVpY2tzZWxlY3QuanNcIjtcbmltcG9ydCBudW1iZXIsIHtudW1iZXJzfSBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpbGUodmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIHZhbHVlcyA9IEZsb2F0NjRBcnJheS5mcm9tKG51bWJlcnModmFsdWVzLCB2YWx1ZW9mKSk7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuIG1pbih2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gbWF4KHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gbWF4KHF1aWNrc2VsZWN0KHZhbHVlcywgaTApLnN1YmFycmF5KDAsIGkwICsgMSkpLFxuICAgICAgdmFsdWUxID0gbWluKHZhbHVlcy5zdWJhcnJheShpMCArIDEpKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFudGlsZVNvcnRlZCh2YWx1ZXMsIHAsIHZhbHVlb2YgPSBudW1iZXIpIHtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1bSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IHN1bSA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZSkge1xuICAgICAgICBzdW0gKz0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpIHtcbiAgICAgICAgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3VtO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeCArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIHkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBkID0+ICtzY2FsZShkKTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlLCBvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSBvZmZzZXQgKiAyKSAvIDI7XG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBkID0+ICtzY2FsZShkKSArIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBvZmZzZXQgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSA/IDAgOiAwLjUsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyBvZmZzZXQsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIG9mZnNldCxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCksIG9mZnNldCksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkICsgb2Zmc2V0KSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0oKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKSArIG9mZnNldCk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkhcIiArIG9mZnNldCArIFwiVlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgb2Zmc2V0ICsgXCIsXCIgKyByYW5nZTAgKyBcIlZcIiArIHJhbmdlMSlcbiAgICAgICAgICAgIDogKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIlZcIiArIG9mZnNldCArIFwiSFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBvZmZzZXQgKyBcIkhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpICsgb2Zmc2V0KTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgYXhpcy5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gK18sIGF4aXMpIDogb2Zmc2V0O1xuICB9O1xuXG4gIHJldHVybiBheGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNSaWdodChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhyaWdodCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0JvdHRvbShzY2FsZSkge1xuICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbn1cbiIsInZhciBub29wID0ge3ZhbHVlOiAoKSA9PiB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2UuanNcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4geFxuICAgID8geCAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oeCk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQ7XG5cbmZ1bmN0aW9uIGNoaWxkRmluZChtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmQuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoaWxkRmlyc3QoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QobWF0Y2ggPT0gbnVsbCA/IGNoaWxkRmlyc3RcbiAgICAgIDogY2hpbGRGaW5kKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbHRlciA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXI7XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5GaWx0ZXIobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdEFsbChtYXRjaCA9PSBudWxsID8gY2hpbGRyZW5cbiAgICAgIDogY2hpbGRyZW5GaWx0ZXIodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtFbnRlck5vZGV9IGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0gbmV3IE1hcCxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkgKyBcIlwiO1xuICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmhhcyhrZXlWYWx1ZSkpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpICsgXCJcIjtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZSkpIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlLmRlbGV0ZShrZXlWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlc1tpXSkgPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0dW0obm9kZSkge1xuICByZXR1cm4gbm9kZS5fX2RhdGFfXztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBBcnJheS5mcm9tKHRoaXMsIGRhdHVtKTtcblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQodmFsdWUpO1xuXG4gIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGEgPSBhcnJheSh2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cykpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlLmpzXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwiZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQsIHRoaXMuX19kYXRhX18pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKHZhbHVlKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLm9wdGlvbnMgPSBvcHRpb25zKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgb3B0aW9uczogb3B0aW9uc307XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgb3B0aW9ucykpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkIGZyb20gXCIuL3NlbGVjdENoaWxkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuIGZyb20gXCIuL3NlbGVjdENoaWxkcmVuLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW0uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3NlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uX3NlbGVjdGlvbixcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9pdGVyYXRvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsLmpzXCI7XG5cbmZ1bmN0aW9uIGFycmF5QWxsKHNlbGVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGdyb3VwID09IG51bGwgPyBbXSA6IGFycmF5KGdyb3VwKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IGFycmF5QWxsKHNlbGVjdCk7XG4gIGVsc2Ugc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvbmVudGVyLCBvbnVwZGF0ZSwgb25leGl0KSB7XG4gIHZhciBlbnRlciA9IHRoaXMuZW50ZXIoKSwgdXBkYXRlID0gdGhpcywgZXhpdCA9IHRoaXMuZXhpdCgpO1xuICBlbnRlciA9IHR5cGVvZiBvbmVudGVyID09PSBcImZ1bmN0aW9uXCIgPyBvbmVudGVyKGVudGVyKSA6IGVudGVyLmFwcGVuZChvbmVudGVyICsgXCJcIik7XG4gIGlmIChvbnVwZGF0ZSAhPSBudWxsKSB1cGRhdGUgPSBvbnVwZGF0ZSh1cGRhdGUpO1xuICBpZiAob25leGl0ID09IG51bGwpIGV4aXQucmVtb3ZlKCk7IGVsc2Ugb25leGl0KGV4aXQpO1xuICByZXR1cm4gZW50ZXIgJiYgdXBkYXRlID8gZW50ZXIubWVyZ2UodXBkYXRlKS5vcmRlcigpIDogdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuICBpZiAoIShzZWxlY3Rpb24gaW5zdGFuY2VvZiBTZWxlY3Rpb24pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG1lcmdlXCIpO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgbGV0IHNpemUgPSAwO1xuICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcykgKytzaXplOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qKCkge1xuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgeWllbGQgbm9kZTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiAoaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5IDogZ2VuZXJpY0FycmF5KShhLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSAqICgxIC0gdCkgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBzdmdOb2RlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGNvbnN0IG0gPSBuZXcgKHR5cGVvZiBET01NYXRyaXggPT09IFwiZnVuY3Rpb25cIiA/IERPTU1hdHJpeCA6IFdlYktpdENTU01hdHJpeCkodmFsdWUgKyBcIlwiKTtcbiAgcmV0dXJuIG0uaXNJZGVudGl0eSA/IGlkZW50aXR5IDogZGVjb21wb3NlKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVhc2VWYXJ5aW5nOiB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX3Byb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gd2FzIGVtcHR5LCByZXNvbHZlIGVuZCBpbW1lZGlhdGVseVxuICAgIGlmIChzaXplID09PSAwKSByZXNvbHZlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyYW5zaXRpb24gJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiY29uc3QgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIuKIklwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB7XG4gICAgICBpZiAodHlwZW9mIGRvbWFpbiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihkb21haW4pO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGRvbWFpbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhpcy5kb21haW4oZG9tYWluKTtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJwb2xhdG9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG51bWJlcih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGEsIGIpIHtcbiAgdmFyIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCk7XG4gICAgaWYgKGNsYW1wICE9PSBpZGVudGl0eSkgY2xhbXAgPSBjbGFtcGVyKGRvbWFpblswXSwgZG9tYWluW24gLSAxXSk7XG4gICAgcGllY2V3aXNlID0gbiA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsIHx8IGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnRzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRpY2tGb3JtYXQoc3RhcnQsIHN0b3AsIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IGNvbnN0IGR1cmF0aW9uU2Vjb25kID0gMTAwMDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjA7XG5leHBvcnQgY29uc3QgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0O1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNztcbmV4cG9ydCBjb25zdCBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMDtcbmV4cG9ydCBjb25zdCBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGRheSA9IGludGVydmFsKFxuICBkYXRlID0+IGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCksXG4gIChkYXRlLCBzdGVwKSA9PiBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKSxcbiAgKHN0YXJ0LCBlbmQpID0+IChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXksXG4gIGRhdGUgPT4gZGF0ZS5nZXREYXRlKCkgLSAxXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7YmlzZWN0b3IsIHRpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uTW9udGgsIGR1cmF0aW9uU2Vjb25kLCBkdXJhdGlvbldlZWssIGR1cmF0aW9uWWVhcn0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCBtaWxsaXNlY29uZCBmcm9tIFwiLi9taWxsaXNlY29uZC5qc1wiO1xuaW1wb3J0IHNlY29uZCBmcm9tIFwiLi9zZWNvbmQuanNcIjtcbmltcG9ydCBtaW51dGUgZnJvbSBcIi4vbWludXRlLmpzXCI7XG5pbXBvcnQgaG91ciBmcm9tIFwiLi9ob3VyLmpzXCI7XG5pbXBvcnQgZGF5IGZyb20gXCIuL2RheS5qc1wiO1xuaW1wb3J0IHtzdW5kYXkgYXMgd2Vla30gZnJvbSBcIi4vd2Vlay5qc1wiO1xuaW1wb3J0IG1vbnRoIGZyb20gXCIuL21vbnRoLmpzXCI7XG5pbXBvcnQgeWVhciBmcm9tIFwiLi95ZWFyLmpzXCI7XG5pbXBvcnQgdXRjTWludXRlIGZyb20gXCIuL3V0Y01pbnV0ZS5qc1wiO1xuaW1wb3J0IHV0Y0hvdXIgZnJvbSBcIi4vdXRjSG91ci5qc1wiO1xuaW1wb3J0IHV0Y0RheSBmcm9tIFwiLi91dGNEYXkuanNcIjtcbmltcG9ydCB7dXRjU3VuZGF5IGFzIHV0Y1dlZWt9IGZyb20gXCIuL3V0Y1dlZWsuanNcIjtcbmltcG9ydCB1dGNNb250aCBmcm9tIFwiLi91dGNNb250aC5qc1wiO1xuaW1wb3J0IHV0Y1llYXIgZnJvbSBcIi4vdXRjWWVhci5qc1wiO1xuXG5mdW5jdGlvbiB0aWNrZXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlKSB7XG5cbiAgY29uc3QgdGlja0ludGVydmFscyA9IFtcbiAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGVdLFxuICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkgICBdLFxuICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayAgXSxcbiAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyBtb250aCwgIDMsICAzICogZHVyYXRpb25Nb250aCBdLFxuICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICBdO1xuXG4gIGZ1bmN0aW9uIHRpY2tzKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIGNvbnN0IHJldmVyc2UgPSBzdG9wIDwgc3RhcnQ7XG4gICAgaWYgKHJldmVyc2UpIFtzdGFydCwgc3RvcF0gPSBbc3RvcCwgc3RhcnRdO1xuICAgIGNvbnN0IGludGVydmFsID0gY291bnQgJiYgdHlwZW9mIGNvdW50LnJhbmdlID09PSBcImZ1bmN0aW9uXCIgPyBjb3VudCA6IHRpY2tJbnRlcnZhbChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIGNvbnN0IHRpY2tzID0gaW50ZXJ2YWwgPyBpbnRlcnZhbC5yYW5nZShzdGFydCwgK3N0b3AgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByZXZlcnNlID8gdGlja3MucmV2ZXJzZSgpIDogdGlja3M7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIGNvdW50O1xuICAgIGNvbnN0IGkgPSBiaXNlY3RvcigoWywsIHN0ZXBdKSA9PiBzdGVwKS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgIGlmIChpID09PSB0aWNrSW50ZXJ2YWxzLmxlbmd0aCkgcmV0dXJuIHllYXIuZXZlcnkodGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGNvdW50KSk7XG4gICAgaWYgKGkgPT09IDApIHJldHVybiBtaWxsaXNlY29uZC5ldmVyeShNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLCAxKSk7XG4gICAgY29uc3QgW3QsIHN0ZXBdID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgIHJldHVybiB0LmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgcmV0dXJuIFt0aWNrcywgdGlja0ludGVydmFsXTtcbn1cblxuY29uc3QgW3V0Y1RpY2tzLCB1dGNUaWNrSW50ZXJ2YWxdID0gdGlja2VyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSk7XG5jb25zdCBbdGltZVRpY2tzLCB0aW1lVGlja0ludGVydmFsXSA9IHRpY2tlcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUpO1xuXG5leHBvcnQge3V0Y1RpY2tzLCB1dGNUaWNrSW50ZXJ2YWwsIHRpbWVUaWNrcywgdGltZVRpY2tJbnRlcnZhbH07XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdEYXRlKHksIG0sIGQpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiBtLCBkOiBkLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcImdcIjogZm9ybWF0VVRDWWVhcklTTyxcbiAgICBcIkdcIjogZm9ybWF0VVRDRnVsbFllYXJJU08sXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBwYXJzZVllYXIsXG4gICAgXCJHXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwicVwiOiBwYXJzZVF1YXJ0ZXIsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBaKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdEYXRlKDE5MDAsIHVuZGVmaW5lZCwgMSksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuICAgICAgaWYgKFwic1wiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLnMgKiAxMDAwICsgKFwiTFwiIGluIGQgPyBkLkwgOiAwKSk7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdXRjUGFyc2UsIG5ldmVyIHVzZSB0aGUgbG9jYWwgdGltZXpvbmUuXG4gICAgICBpZiAoWiAmJiAhKFwiWlwiIGluIGQpKSBkLlogPSAwO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIElmIHRoZSBtb250aCB3YXMgbm90IHNwZWNpZmllZCwgaW5oZXJpdCBmcm9tIHRoZSBxdWFydGVyLlxuICAgICAgaWYgKGQubSA9PT0gdW5kZWZpbmVkKSBkLm0gPSBcInFcIiBpbiBkID8gZC5xIDogMDtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldFVUQ0RheSgpIDogbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBsb2NhbERhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0TW9udGgoKSAvIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldFVUQ01vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgZmFsc2UpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCB0cnVlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICByZXR1cm4gbmV3IE1hcChuYW1lcy5tYXAoKG5hbWUsIGkpID0+IFtuYW1lLnRvTG93ZXJDYXNlKCksIGldKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVhcnRlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnEgPSBuWzBdICogMyAtIDMsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5zID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBkSVNPKGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IGRJU08oZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBVVENkSVNPKGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIGQgPSBVVENkSVNPKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcklTTyhkLCBwKSB7XG4gIGQgPSBVVENkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQgeyBNb21lbnQgfSBmcm9tIFwibW9tZW50XCI7XHJcblxyXG5leHBvcnQgdHlwZSBOdWxsYWJsZU51bWJlciA9IG51bWJlciB8IG51bGw7XHJcblxyXG5leHBvcnQgZW51bSBTZWFyY2hUeXBlIHtcclxuICAgIFRhZyxcclxuICAgIEZyb250bWF0dGVyLFxyXG4gICAgV2lraSxcclxuICAgIFRleHQsXHJcbiAgICBkdkZpZWxkLFxyXG4gICAgVGFibGUsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE91dHB1dFR5cGUge1xyXG4gICAgTGluZSxcclxuICAgIEJhcixcclxuICAgIFJhZGFyLFxyXG4gICAgU3VtbWFyeSxcclxuICAgIFRhYmxlLFxyXG4gICAgSGVhdG1hcCxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFQb2ludCB7XHJcbiAgICBkYXRlOiBNb21lbnQ7XHJcbiAgICB2YWx1ZTogTnVsbGFibGVOdW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0ZTogTW9tZW50LCB2YWx1ZTogTnVsbGFibGVOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXJ5IHtcclxuICAgIHByaXZhdGUgdHlwZTogU2VhcmNoVHlwZSB8IG51bGw7XHJcbiAgICBwcml2YXRlIHRhcmdldDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBwYXJlbnRUYXJnZXQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICBwcml2YXRlIHNlcGFyYXRvcjogc3RyaW5nOyAvLyBtdWx0aXBsZSB2YWx1ZSBzZXBhcmF0b3JcclxuICAgIHByaXZhdGUgaWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgYWNjZXNzb3I6IG51bWJlcjtcclxuICAgIHByaXZhdGUgYWNjZXNzb3IxOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGFjY2Vzc29yMjogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgdmFsdWVJc1RpbWU6IGJvb2xlYW47XHJcbiAgICB1c2VkQXNYRGF0YXNldDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCBzZWFyY2hUeXBlOiBTZWFyY2hUeXBlLCBzZWFyY2hUYXJnZXQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHNlYXJjaFR5cGU7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBzZWFyY2hUYXJnZXQ7XHJcbiAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBcIi9cIjtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IC0xO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzb3IxID0gLTE7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NvcjIgPSAtMTtcclxuICAgICAgICB0aGlzLnZhbHVlSXNUaW1lID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51c2VkQXNYRGF0YXNldCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoc2VhcmNoVHlwZSA9PT0gU2VhcmNoVHlwZS5UYWJsZSkge1xyXG4gICAgICAgICAgICAvLyBzZWFyY2hUYXJnZXQgLS0+IHt7ZmlsZVBhdGh9fVt7e3RhYmxlfX1dW3t7Y29sdW1ufX1dXHJcbiAgICAgICAgICAgIGxldCBzdHJSZWdleCA9XHJcbiAgICAgICAgICAgICAgICBcIlxcXFxbKD88YWNjZXNzb3I+WzAtOV0rKVxcXFxdXFxcXFsoPzxhY2Nlc3NvcjE+WzAtOV0rKVxcXFxdKFxcXFxbKD88YWNjZXNzb3IyPlswLTldKylcXFxcXSk/XCI7XHJcbiAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoc3RyUmVnZXgsIFwiZ21cIik7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoc2VhcmNoVGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzLmFjY2Vzc29yICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjY2Vzc29yID0gcGFyc2VGbG9hdChtYXRjaC5ncm91cHMuYWNjZXNzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOdW1iZXIoYWNjZXNzb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2guZ3JvdXBzLmFjY2Vzc29yMSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFjY2Vzc29yMSA9IHBhcnNlRmxvYXQobWF0Y2guZ3JvdXBzLmFjY2Vzc29yMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGFjY2Vzc29yMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWNjZXNzb3IyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3Vwcy5hY2Nlc3NvcjIgIT09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3IyID0gcGFyc2VGbG9hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoLmdyb3Vwcy5hY2Nlc3NvcjJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yMSA9IGFjY2Vzc29yMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGFjY2Vzc29yMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NvcjIgPSBhY2Nlc3NvcjI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50VGFyZ2V0ID0gc2VhcmNoVGFyZ2V0LnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHN0clJlZ2V4ID0gXCJcXFxcWyg/PGFjY2Vzc29yPlswLTldKylcXFxcXVwiO1xyXG4gICAgICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHN0clJlZ2V4LCBcImdtXCIpO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2g7XHJcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHNlYXJjaFRhcmdldCkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy5hY2Nlc3NvciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhY2Nlc3NvciA9IHBhcnNlRmxvYXQobWF0Y2guZ3JvdXBzLmFjY2Vzc29yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGFjY2Vzc29yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50VGFyZ2V0ID0gc2VhcmNoVGFyZ2V0LnJlcGxhY2UocmVnZXgsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXF1YWxUbyhvdGhlcjogUXVlcnkpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBvdGhlci50eXBlICYmIHRoaXMudGFyZ2V0ID09PSBvdGhlci50YXJnZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUYXJnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJlbnRUYXJnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50VGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QWNjZXNzb3IoaW5kZXggPSAwKSB7XHJcbiAgICAgICAgc3dpdGNoIChpbmRleCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NvcjtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3IxO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NvcjI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNVc2luZ1RpbWVWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUlzVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VXNpbmdUaW1lVmFsdWUoKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZUlzVGltZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlcGFyYXRvcihzZXA6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTZXBhcmF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VwYXJhdG9yO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5VmFsdWVQYWlyIHtcclxuICAgIHF1ZXJ5OiBRdWVyeTtcclxuICAgIHZhbHVlOiBOdWxsYWJsZU51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFzZXQgaW1wbGVtZW50cyBJdGVyYWJsZUl0ZXJhdG9yPERhdGFQb2ludD4ge1xyXG4gICAgLy8gQXJyYXkgb2YgRGF0YVBvaW50c1xyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHF1ZXJ5OiBRdWVyeTtcclxuICAgIHByaXZhdGUgdmFsdWVzOiBOdWxsYWJsZU51bWJlcltdO1xyXG4gICAgcHJpdmF0ZSBwYXJlbnQ6IERhdGFzZXRzO1xyXG4gICAgcHJpdmF0ZSBpZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB5TWluOiBOdWxsYWJsZU51bWJlcjtcclxuICAgIHByaXZhdGUgeU1heDogTnVsbGFibGVOdW1iZXI7XHJcbiAgICBwcml2YXRlIGxpbmVJbmZvOiBMaW5lSW5mbztcclxuICAgIHByaXZhdGUgYmFySW5mbzogQmFySW5mbztcclxuICAgIHByaXZhdGUgdmFsdWVJc1RpbWU6IGJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBjdXJyZW50SW5kZXggPSAwOyAvLyBJdGVyYWJsZUl0ZXJhdG9yXHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyZW50OiBEYXRhc2V0cywgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJ1bnRpdGxlZFwiO1xyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuaWQgPSAtMTtcclxuICAgICAgICB0aGlzLnlNaW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMueU1heCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5saW5lSW5mbyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iYXJJbmZvID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZhbHVlSXNUaW1lID0gcXVlcnkuaXNVc2luZ1RpbWVWYWx1ZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBwYXJlbnQuZ2V0RGF0ZXMoKS5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRMaW5lSW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW5lSW5mbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0TGluZUluZm8obGluZUluZm86IExpbmVJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5saW5lSW5mbyA9IGxpbmVJbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRCYXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhckluZm87XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEJhckluZm8oYmFySW5mbzogQmFySW5mbykge1xyXG4gICAgICAgIHRoaXMuYmFySW5mbyA9IGJhckluZm87XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWx1ZShkYXRlOiBNb21lbnQsIHZhbHVlOiBOdWxsYWJsZU51bWJlcikge1xyXG4gICAgICAgIGxldCBpbmQgPSB0aGlzLnBhcmVudC5nZXRJbmRleE9mRGF0ZShkYXRlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmQpO1xyXG4gICAgICAgIGlmIChpbmQgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1tpbmRdID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy55TWluID09PSBudWxsIHx8IHZhbHVlIDwgdGhpcy55TWluKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlNaW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy55TWF4ID09PSBudWxsIHx8IHZhbHVlID4gdGhpcy55TWF4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlNYXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WU1pbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy55TWluO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRZTWF4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnlNYXg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFBlbmFsdHkocGVuYWx0eTogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kXSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbaW5kXSA9IHBlbmFsdHk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGVuYWx0eSA8IHRoaXMueU1pbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueU1pbiA9IHBlbmFsdHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocGVuYWx0eSA+IHRoaXMueU1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueU1heCA9IHBlbmFsdHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFF1ZXJ5KCk6IFF1ZXJ5IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNVc2luZ1RpbWVWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUlzVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWNjdW11bGF0ZVZhbHVlcygpIHtcclxuICAgICAgICBsZXQgYWNjdW1WYWx1ZSA9IDAuMDtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1tpbmRdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhY2N1bVZhbHVlICs9IHRoaXMudmFsdWVzW2luZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy52YWx1ZXNbaW5kXSA9IGFjY3VtVmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChhY2N1bVZhbHVlIDwgdGhpcy55TWluKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlNaW4gPSBhY2N1bVZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhY2N1bVZhbHVlID4gdGhpcy55TWF4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlNYXggPSBhY2N1bVZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRMZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TGVuZ3RoTm90TnVsbCgpIHtcclxuICAgICAgICBsZXQgY291bnROb3ROdWxsID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLnZhbHVlcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1tpbmRdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudE5vdE51bGwrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY291bnROb3ROdWxsO1xyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKTogSXRlcmF0b3JSZXN1bHQ8RGF0YVBvaW50PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZGV4IDwgdGhpcy52YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmQgPSB0aGlzLmN1cnJlbnRJbmRleCsrO1xyXG4gICAgICAgICAgICBsZXQgZGF0YVBvaW50ID0gbmV3IERhdGFQb2ludChcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmdldERhdGVzKClbaW5kXSxcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzW2luZF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGFQb2ludCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8RGF0YVBvaW50PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhc2V0cyBpbXBsZW1lbnRzIEl0ZXJhYmxlSXRlcmF0b3I8RGF0YXNldD4ge1xyXG4gICAgLy8gSXRlcmFibGUgb2YgRGF0YXNldFxyXG4gICAgcHJpdmF0ZSBkYXRlczogTW9tZW50W107XHJcbiAgICBwcml2YXRlIGRhdGFzZXRzOiBEYXRhc2V0W107XHJcblxyXG4gICAgcHJpdmF0ZSBjdXJyZW50SW5kZXggPSAwOyAvLyBJdGVyYWJsZUl0ZXJhdG9yXHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3RhcnREYXRlOiBNb21lbnQsIGVuZERhdGU6IE1vbWVudCkge1xyXG4gICAgICAgIHRoaXMuZGF0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmRhdGFzZXRzID0gW107XHJcbiAgICAgICAgbGV0IGNEYXRhID0gc3RhcnREYXRlLmNyZWF0aW9uRGF0YSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVGb3JtYXQgPSBjRGF0YS5mb3JtYXQudG9TdHJpbmcoKTtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgICBsZXQgY3VyRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjdXJEYXRlIDw9IGVuZERhdGU7XHJcbiAgICAgICAgICAgIGN1ckRhdGUuYWRkKDEsIFwiZGF5c1wiKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgbmV3RGF0ZSA9IHdpbmRvdy5tb21lbnQoXHJcbiAgICAgICAgICAgICAgICBjdXJEYXRlLmZvcm1hdChkYXRlRm9ybWF0KSxcclxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQsXHJcbiAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZXMucHVzaChuZXdEYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5kYXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZURhdGFzZXQocXVlcnk6IFF1ZXJ5LCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSBuZXcgRGF0YXNldCh0aGlzLCBxdWVyeSk7XHJcbiAgICAgICAgZGF0YXNldC5zZXRJZChxdWVyeS5nZXRJZCgpKTtcclxuICAgICAgICBpZiAocmVuZGVySW5mbykge1xyXG4gICAgICAgICAgICBkYXRhc2V0LnNldE5hbWUocmVuZGVySW5mby5kYXRhc2V0TmFtZVtxdWVyeS5nZXRJZCgpXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVuZGVySW5mby5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LnNldExpbmVJbmZvKHJlbmRlckluZm8ubGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbmRlckluZm8uYmFyKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LnNldEJhckluZm8ocmVuZGVySW5mby5iYXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJbmRleE9mRGF0ZShkYXRlOiBNb21lbnQpIHtcclxuICAgICAgICBsZXQgY0RhdGEgPSBkYXRlLmNyZWF0aW9uRGF0YSgpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVGb3JtYXQgPSBjRGF0YS5mb3JtYXQudG9TdHJpbmcoKTtcclxuICAgICAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCB0aGlzLmRhdGVzLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlc1tpbmRdLmZvcm1hdChkYXRlRm9ybWF0KSA9PT0gZGF0ZS5mb3JtYXQoZGF0ZUZvcm1hdClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0YXNldEJ5UXVlcnkocXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkuZXF1YWxUbyhxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREYXRhc2V0QnlJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldCBvZiB0aGlzLmRhdGFzZXRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldElkKCkgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WERhdGFzZXRJZHMoKSB7XHJcbiAgICAgICAgbGV0IGlkczogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXQgb2YgdGhpcy5kYXRhc2V0cykge1xyXG4gICAgICAgICAgICBpZiAoZGF0YXNldC5nZXRRdWVyeSgpLnVzZWRBc1hEYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBkYXRhc2V0LmdldFF1ZXJ5KCkuZ2V0SWQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghaWRzLmluY2x1ZGVzKGlkKSAmJiBpZCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZHMucHVzaChpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlkcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5hbWVzKCkge1xyXG4gICAgICAgIGxldCBuYW1lcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXQgb2YgdGhpcy5kYXRhc2V0cykge1xyXG4gICAgICAgICAgICBuYW1lcy5wdXNoKGRhdGFzZXQuZ2V0TmFtZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5hbWVzO1xyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKTogSXRlcmF0b3JSZXN1bHQ8RGF0YXNldD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbmRleCA8IHRoaXMuZGF0YXNldHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmRhdGFzZXRzW3RoaXMuY3VycmVudEluZGV4KytdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxEYXRhc2V0PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJJbmZvIHtcclxuICAgIC8vIElucHV0XHJcbiAgICBxdWVyaWVzOiBRdWVyeVtdO1xyXG4gICAgeERhdGFzZXQ6IG51bWJlcltdO1xyXG4gICAgZm9sZGVyOiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0UHJlZml4OiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0U3VmZml4OiBzdHJpbmc7XHJcbiAgICBzdGFydERhdGU6IE1vbWVudCB8IG51bGw7XHJcbiAgICBlbmREYXRlOiBNb21lbnQgfCBudWxsO1xyXG4gICAgZGF0YXNldE5hbWU6IHN0cmluZ1tdO1xyXG4gICAgY29uc3RWYWx1ZTogbnVtYmVyW107XHJcbiAgICBpZ25vcmVBdHRhY2hlZFZhbHVlOiBib29sZWFuW107XHJcbiAgICBpZ25vcmVaZXJvVmFsdWU6IGJvb2xlYW5bXTtcclxuICAgIGFjY3VtOiBib29sZWFuW107XHJcbiAgICBwZW5hbHR5OiBudW1iZXJbXTtcclxuXHJcbiAgICBkYXRhQXJlYVNpemU6IFNpemU7XHJcbiAgICBtYXJnaW46IE1hcmdpbjtcclxuICAgIHRvb2x0aXBTaXplOiBTaXplO1xyXG5cclxuICAgIGZpeGVkU2NhbGU6IG51bWJlcjtcclxuICAgIGZpdFBhbmVsV2lkdGg6IGJvb2xlYW47XHJcblxyXG4gICAgb3V0cHV0OiBPdXRwdXRUeXBlO1xyXG4gICAgbGluZTogTGluZUluZm8gfCBudWxsO1xyXG4gICAgYmFyOiBCYXJJbmZvIHwgbnVsbDtcclxuICAgIHN1bW1hcnk6IFN1bW1hcnlJbmZvIHwgbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgZGF0YXNldHM6IERhdGFzZXRzIHwgbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihxdWVyaWVzOiBRdWVyeVtdKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gcXVlcmllcztcclxuICAgICAgICB0aGlzLnhEYXRhc2V0ID0gW107IC8vIHVzZSBmaWxlIG5hbWVcclxuICAgICAgICB0aGlzLmZvbGRlciA9IFwiL1wiO1xyXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IFwiWVlZWS1NTS1ERFwiO1xyXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdFByZWZpeCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0U3VmZml4ID0gXCJcIjtcclxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbmREYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRhdGFzZXROYW1lID0gW107IC8vIHVudGl0bGVkXHJcbiAgICAgICAgdGhpcy5jb25zdFZhbHVlID0gWzEuMF07XHJcbiAgICAgICAgdGhpcy5pZ25vcmVBdHRhY2hlZFZhbHVlID0gW107IC8vIGZhbHNlXHJcbiAgICAgICAgdGhpcy5pZ25vcmVaZXJvVmFsdWUgPSBbXTsgLy8gZmFsc2VcclxuICAgICAgICB0aGlzLmFjY3VtID0gW107IC8vIGZhbHNlLCBhY2N1bSB2YWx1ZXMgc3RhcnQgZnJvbSB6ZXJvIG92ZXIgZGF5c1xyXG4gICAgICAgIHRoaXMucGVuYWx0eSA9IFtdOyAvLyBudWxsLCB1c2UgdGhpcyB2YWx1ZSBpbnN0ZWFkIG9mIG51bGwgdmFsdWVcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhQXJlYVNpemUgPSBuZXcgU2l6ZSgzMDAsIDMwMCk7XHJcbiAgICAgICAgdGhpcy5tYXJnaW4gPSBuZXcgTWFyZ2luKDEwLCAxMCwgMTAsIDEwKTsgLy8gdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XHJcbiAgICAgICAgdGhpcy50b29sdGlwU2l6ZSA9IG5ldyBTaXplKDkwLCA0NSk7XHJcblxyXG4gICAgICAgIHRoaXMuZml4ZWRTY2FsZSA9IDEuMDtcclxuICAgICAgICB0aGlzLmZpdFBhbmVsV2lkdGggPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5vdXRwdXQgPSBPdXRwdXRUeXBlLkxpbmU7XHJcbiAgICAgICAgdGhpcy5saW5lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1bW1hcnkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmFyID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhc2V0cyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFF1ZXJ5QnlJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcXVlcnkgb2YgdGhpcy5xdWVyaWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWVyeS5nZXRJZCgpID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbW9uQ2hhcnRJbmZvIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICB4QXhpc0xhYmVsOiBzdHJpbmc7XHJcbiAgICB4QXhpc0NvbG9yOiBzdHJpbmc7XHJcbiAgICB4QXhpc0xhYmVsQ29sb3I6IHN0cmluZztcclxuICAgIHlBeGlzTGFiZWw6IHN0cmluZ1tdO1xyXG4gICAgeUF4aXNDb2xvcjogc3RyaW5nW107XHJcbiAgICB5QXhpc0xhYmVsQ29sb3I6IHN0cmluZ1tdO1xyXG4gICAgeUF4aXNVbml0OiBzdHJpbmdbXTtcclxuICAgIHlNaW46IE51bGxhYmxlTnVtYmVyW107XHJcbiAgICB5TWF4OiBOdWxsYWJsZU51bWJlcltdO1xyXG4gICAgYWxsb3dJbnNwZWN0RGF0YTogYm9vbGVhbjtcclxuICAgIHNob3dMZWdlbmQ6IGJvb2xlYW47XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgbGVnZW5kT3JpZW50YXRpb246IHN0cmluZztcclxuICAgIGxlZ2VuZEJnQ29sb3I6IHN0cmluZztcclxuICAgIGxlZ2VuZEJvcmRlckNvbG9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy54QXhpc0xhYmVsID0gXCJEYXRlXCI7XHJcbiAgICAgICAgdGhpcy54QXhpc0NvbG9yID0gXCJcIjtcclxuICAgICAgICB0aGlzLnhBeGlzTGFiZWxDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy55QXhpc0xhYmVsID0gW107IC8vIFwiVmFsdWVcIiwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMueUF4aXNDb2xvciA9IFtdOyAvLyBcIlwiLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy55QXhpc0xhYmVsQ29sb3IgPSBbXTsgLy8gXCJcIiwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMueUF4aXNVbml0ID0gW107IC8vIFwiXCIsIDIgZWxlbWVudHNcclxuICAgICAgICB0aGlzLnlNaW4gPSBbXTsgLy8gbnVsbCwgMiBlbGVtZW50c1xyXG4gICAgICAgIHRoaXMueU1heCA9IFtdOyAvLyBudWxsLCAyIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy5hbGxvd0luc3BlY3REYXRhID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dMZWdlbmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZ2VuZFBvc2l0aW9uID0gXCJcIjsgLy8gdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0XHJcbiAgICAgICAgdGhpcy5sZWdlbmRPcmllbnRhdGlvbiA9IFwiXCI7IC8vIGhvcml6b250YWwsIHZlcnRpY2FsXHJcbiAgICAgICAgdGhpcy5sZWdlbmRCZ0NvbG9yID0gXCJcIjtcclxuICAgICAgICB0aGlzLmxlZ2VuZEJvcmRlckNvbG9yID0gXCJcIjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVJbmZvIGV4dGVuZHMgQ29tbW9uQ2hhcnRJbmZvIHtcclxuICAgIGxpbmVDb2xvcjogc3RyaW5nW107XHJcbiAgICBsaW5lV2lkdGg6IG51bWJlcltdO1xyXG4gICAgc2hvd0xpbmU6IGJvb2xlYW5bXTtcclxuICAgIHNob3dQb2ludDogYm9vbGVhbltdO1xyXG4gICAgcG9pbnRDb2xvcjogc3RyaW5nW107XHJcbiAgICBwb2ludEJvcmRlckNvbG9yOiBzdHJpbmdbXTtcclxuICAgIHBvaW50Qm9yZGVyV2lkdGg6IG51bWJlcltdO1xyXG4gICAgcG9pbnRTaXplOiBudW1iZXJbXTtcclxuICAgIGZpbGxHYXA6IGJvb2xlYW5bXTtcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5saW5lQ29sb3IgPSBbXTsgLy8gXCJcIlxyXG4gICAgICAgIHRoaXMubGluZVdpZHRoID0gW107IC8vIDEuNVxyXG4gICAgICAgIHRoaXMuc2hvd0xpbmUgPSBbXTsgLy8gdHJ1ZVxyXG4gICAgICAgIHRoaXMuc2hvd1BvaW50ID0gW107IC8vIHRydWVcclxuICAgICAgICB0aGlzLnBvaW50Q29sb3IgPSBbXTsgLy8gIzY5YjNhMlxyXG4gICAgICAgIHRoaXMucG9pbnRCb3JkZXJDb2xvciA9IFtdO1xyXG4gICAgICAgIHRoaXMucG9pbnRCb3JkZXJXaWR0aCA9IFtdOyAvLyAwLjBcclxuICAgICAgICB0aGlzLnBvaW50U2l6ZSA9IFtdOyAvLyAzLjBcclxuICAgICAgICB0aGlzLmZpbGxHYXAgPSBbXTsgLy8gZmFsc2VcclxuICAgICAgICB0aGlzLnlBeGlzTG9jYXRpb24gPSBbXTsgLy8gbGVmdCwgZm9yIGVhY2ggdGFyZ2V0XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYXJJbmZvIGV4dGVuZHMgQ29tbW9uQ2hhcnRJbmZvIHtcclxuICAgIGJhckNvbG9yOiBzdHJpbmdbXTtcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZ1tdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5iYXJDb2xvciA9IFtdOyAvLyAjNjliM2EyXHJcbiAgICAgICAgdGhpcy55QXhpc0xvY2F0aW9uID0gW107IC8vIGxlZnQsIGZvciBlYWNoIHRhcmdldFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3VtbWFyeUluZm8ge1xyXG4gICAgdGVtcGxhdGU6IHN0cmluZztcclxuICAgIHN0eWxlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5zdHlsZSA9IFwiXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaXplIHtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcmdpbiB7XHJcbiAgICB0b3A6IG51bWJlcjtcclxuICAgIHJpZ2h0OiBudW1iZXI7XHJcbiAgICBib3R0b206IG51bWJlcjtcclxuICAgIGxlZnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zbGF0ZVg6IG51bWJlcjtcclxuICAgIHRyYW5zbGF0ZVk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IGFueSkge1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlWCA9IDA7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGVZID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGdyb3VwcyA9IHRyYW5zZm9ybS5tYXRjaChcclxuICAgICAgICAgICAgICAgIC90cmFuc2xhdGVcXChcXHMqKD88eD5bXFxkXFwuXFwvLV0rKVxccyosXFxzKig/PHk+W1xcZFxcLlxcLy1dKylcXHMqXFwpL1xyXG4gICAgICAgICAgICApLmdyb3VwcztcclxuICAgICAgICAgICAgaWYgKGdyb3Vwcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVYID0gcGFyc2VGbG9hdChncm91cHMueCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVkgPSBwYXJzZUZsb2F0KGdyb3Vwcy55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ2hhcnRFbGVtZW50cyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZURhdGEge1xyXG4gICAgZmlsZVBhdGg6IHN0cmluZztcclxuICAgIHRhYmxlSW5kZXg6IG51bWJlcjtcclxuICAgIHhEYXRhc2V0OiBRdWVyeSB8IG51bGw7XHJcbiAgICB5RGF0YXNldHM6IEFycmF5PFF1ZXJ5PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nLCB0YWJsZUluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4ID0gdGFibGVJbmRleDtcclxuICAgICAgICB0aGlzLnhEYXRhc2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEYXRhc2V0cyA9IFtdOyAvLyBhcnJheSBvZiBxdWVyeVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBYVmFsdWVNYXAgPSBNYXA8bnVtYmVyLCBzdHJpbmc+O1xyXG5leHBvcnQgdHlwZSBEYXRhTWFwID0gTWFwPHN0cmluZywgQXJyYXk8UXVlcnlWYWx1ZVBhaXI+PjtcclxuIiwiaW1wb3J0IHt0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVUaWNrcywgdGltZVRpY2tJbnRlcnZhbH0gZnJvbSBcImQzLXRpbWVcIjtcbmltcG9ydCB7dGltZUZvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlLmpzXCI7XG5cbmZ1bmN0aW9uIGRhdGUodCkge1xuICByZXR1cm4gbmV3IERhdGUodCk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcih0KSB7XG4gIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGVuZGFyKHRpY2tzLCB0aWNrSW50ZXJ2YWwsIHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXG4gICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcbiAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4oQXJyYXkuZnJvbShfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBpbnRlcnZhbCA9PSBudWxsID8gMTAgOiBpbnRlcnZhbCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICBpZiAoIWludGVydmFsIHx8IHR5cGVvZiBpbnRlcnZhbC5yYW5nZSAhPT0gXCJmdW5jdGlvblwiKSBpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGludGVydmFsID09IG51bGwgPyAxMCA6IGludGVydmFsKTtcbiAgICByZXR1cm4gaW50ZXJ2YWwgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih0aWNrcywgdGlja0ludGVydmFsLCB5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lKCkge1xuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGNhbGVuZGFyKHRpbWVUaWNrcywgdGltZVRpY2tJbnRlcnZhbCwgdGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lRm9ybWF0KS5kb21haW4oW25ldyBEYXRlKDIwMDAsIDAsIDEpLCBuZXcgRGF0ZSgyMDAwLCAwLCAyKV0pLCBhcmd1bWVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICB4ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAoeCA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WCA6IGNvbnN0YW50KHgpO1xuICB5ID0gdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkgOiAoeSA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WSA6IGNvbnN0YW50KHkpO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gKGRhdGEgPSBhcnJheShkYXRhKSkubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBEYXRhc2V0cyxcclxuICAgIERhdGFQb2ludCxcclxuICAgIFJlbmRlckluZm8sXHJcbiAgICBEYXRhc2V0LFxyXG4gICAgTGluZUluZm8sXHJcbiAgICBCYXJJbmZvLFxyXG4gICAgU2l6ZSxcclxuICAgIFRyYW5zZm9ybSxcclxuICAgIENvbW1vbkNoYXJ0SW5mbyxcclxuICAgIENoYXJ0RWxlbWVudHMsXHJcbiAgICBPdXRwdXRUeXBlLFxyXG59IGZyb20gXCIuL2RhdGFcIjtcclxuXHJcbmZ1bmN0aW9uIGdldFRpY2tJbnRlcnZhbChkYXRhc2V0czogRGF0YXNldHMpIHtcclxuICAgIGxldCB0aWNrSW50ZXJ2YWw7XHJcbiAgICBsZXQgZGF5cyA9IGRhdGFzZXRzLmdldERhdGVzKCkubGVuZ3RoO1xyXG5cclxuICAgIGlmIChkYXlzIDw9IDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiAwLTE1XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZURheTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSA0ICogMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDQtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lRGF5LmV2ZXJ5KDQpO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDcgKiAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVXZWVrO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDE1ICogMzApIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDQtMTVcclxuICAgICAgICB0aWNrSW50ZXJ2YWwgPSBkMy50aW1lTW9udGg7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMTUgKiA2MCkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogOC0xNVxyXG4gICAgICAgIHRpY2tJbnRlcnZhbCA9IGQzLnRpbWVNb250aC5ldmVyeSgyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGlja0ludGVydmFsID0gZDMudGltZVllYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRpY2tJbnRlcnZhbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0WFRpY2tGb3JtYXQoZGF0YXNldHM6IERhdGFzZXRzKSB7XHJcbiAgICBsZXQgdGlja0Zvcm1hdDtcclxuICAgIGxldCBkYXlzID0gZGF0YXNldHMuZ2V0RGF0ZXMoKS5sZW5ndGg7XHJcblxyXG4gICAgaWYgKGRheXMgPD0gMTUpIHtcclxuICAgICAgICAvLyBudW1iZXIgb2YgdGlja3M6IDAtMTVcclxuICAgICAgICB0aWNrRm9ybWF0ID0gZDMudGltZUZvcm1hdChcIiV5LSVtLSVkXCIpO1xyXG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDQgKiAxNSkge1xyXG4gICAgICAgIC8vIG51bWJlciBvZiB0aWNrczogNC0xNVxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJXktJW0tJWRcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gNyAqIDE1KSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA4LTE1XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIleS0lbS0lZFwiKTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSAxNSAqIDMwKSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA0LTE1XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIleSAlYlwiKTtcclxuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSAxNSAqIDYwKSB7XHJcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRpY2tzOiA4LTE1XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIleSAlYlwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGlja0Zvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIlWVwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGlja0Zvcm1hdDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0WVRpY2tGb3JtYXQoKSB7XHJcbiAgICAvLyBjdXJyZW50bHkgdXNlZCBmb3IgdGltZSB2YWx1ZSB0aWNrIG9ubHlcclxuICAgIC8vIHJldHVybiBhIGZ1bmN0aW9uIGNvbnZlcnQgdmFsdWUgdG8gdGltZSBzdHJpbmdcclxuICAgIGZ1bmN0aW9uIHRpY2tGb3JtYXQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGRheVN0YXJ0ID0gd2luZG93Lm1vbWVudChcIjAwOjAwXCIsIFwiSEg6bW1cIiwgdHJ1ZSk7XHJcbiAgICAgICAgbGV0IHRpY2tUaW1lID0gZGF5U3RhcnQuYWRkKHZhbHVlLCBcInNlY29uZHNcIik7XHJcbiAgICAgICAgcmV0dXJuIHRpY2tUaW1lLmZvcm1hdChcIkhIOm1tXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aWNrRm9ybWF0O1xyXG59XHJcblxyXG4vLyBJcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gbWVhc3VyZSB0ZXh0IHNpemU/P1xyXG5mdW5jdGlvbiBtZWFzdXJlVGV4dFNpemUoXHJcbiAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmcgPSBcIlwiLFxyXG4gICAgcm90YXRlOiBzdHJpbmcgPSBcIlwiXHJcbik6IFNpemUge1xyXG4gICAgdmFyIGNvbnRhaW5lciA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpO1xyXG4gICAgbGV0IHRleHRCbG9jayA9IGNvbnRhaW5lclxyXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLnRleHQodGV4dClcclxuICAgICAgICAuYXR0cihcInhcIiwgLTk5OTk5KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCAtOTk5OTkpO1xyXG4gICAgaWYgKHN0eWxlQ2xhc3MpIHtcclxuICAgICAgICB0ZXh0QmxvY2suYXR0cihcImNsYXNzXCIsIHN0eWxlQ2xhc3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdGF0ZSkge1xyXG4gICAgICAgIHRleHRCbG9jay5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKFwiICsgcm90YXRlICsgXCIpXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHNpemUgPSBjb250YWluZXIubm9kZSgpLmdldEJCb3goKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgIHJldHVybiB7IHdpZHRoOiBzaXplLndpZHRoLCBoZWlnaHQ6IHNpemUuaGVpZ2h0IH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoY2FudmFzOiBIVE1MRWxlbWVudCwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmRhdGFzZXRzKTtcclxuXHJcbiAgICAvLyBEYXRhIHByZXByb2Nlc3NpbmdcclxuXHJcbiAgICBmb3IgKGxldCBkYXRhc2V0IG9mIHJlbmRlckluZm8uZGF0YXNldHMpIHtcclxuICAgICAgICBpZiAoZGF0YXNldC5nZXRRdWVyeSgpLnVzZWRBc1hEYXRhc2V0KSBjb250aW51ZTtcclxuICAgICAgICBpZiAocmVuZGVySW5mby5wZW5hbHR5W2RhdGFzZXQuZ2V0SWQoKV0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgZGF0YXNldC5zZXRQZW5hbHR5KHJlbmRlckluZm8ucGVuYWx0eVtkYXRhc2V0LmdldElkKCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uYWNjdW1bZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgICAgICBkYXRhc2V0LmFjY3VtdWxhdGVWYWx1ZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoIChyZW5kZXJJbmZvLm91dHB1dCkge1xyXG4gICAgICAgIGNhc2UgT3V0cHV0VHlwZS5MaW5lOlxyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyTGluZUNoYXJ0KGNhbnZhcywgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgY2FzZSBPdXRwdXRUeXBlLkJhcjpcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckJhckNoYXJ0KGNhbnZhcywgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgY2FzZSBPdXRwdXRUeXBlLlN1bW1hcnk6XHJcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJTdW1tYXJ5KGNhbnZhcywgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiVW5rbm93biBvdXRwdXQgdHlwZVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJYQXhpcyhjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlclhBeGlzXCIpO1xyXG5cclxuICAgIGxldCBjaGFydEluZm8gPSBudWxsO1xyXG4gICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICBjaGFydEluZm8gPSByZW5kZXJJbmZvLmxpbmU7XHJcbiAgICB9IGVsc2UgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgIGNoYXJ0SW5mbyA9IHJlbmRlckluZm8uYmFyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWNoYXJ0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBkYXRhc2V0cyA9IHJlbmRlckluZm8uZGF0YXNldHM7XHJcbiAgICBsZXQgeERvbWFpbiA9IGQzLmV4dGVudChkYXRhc2V0cy5nZXREYXRlcygpKTtcclxuICAgIGxldCB4U2NhbGUgPSBkM1xyXG4gICAgICAgIC5zY2FsZVRpbWUoKVxyXG4gICAgICAgIC5kb21haW4oeERvbWFpbilcclxuICAgICAgICAucmFuZ2UoWzAsIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoXSk7XHJcbiAgICBjaGFydEVsZW1lbnRzW1wieFNjYWxlXCJdID0geFNjYWxlO1xyXG5cclxuICAgIGxldCB0aWNrSW50ZXJ2YWwgPSBnZXRUaWNrSW50ZXJ2YWwoZGF0YXNldHMpO1xyXG4gICAgbGV0IHRpY2tGb3JtYXQgPSBnZXRYVGlja0Zvcm1hdChkYXRhc2V0cyk7XHJcblxyXG4gICAgbGV0IHhBeGlzR2VuID0gZDNcclxuICAgICAgICAuYXhpc0JvdHRvbSh4U2NhbGUpXHJcbiAgICAgICAgLnRpY2tzKHRpY2tJbnRlcnZhbClcclxuICAgICAgICAudGlja0Zvcm1hdCh0aWNrRm9ybWF0KTtcclxuICAgIGxldCB4QXhpcyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEgLy8gYXhpcyBpbmNsdWRlcyB0aWNrc1xyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInhBeGlzXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKDAsXCIgKyByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyBcIilcIlxyXG4gICAgICAgICkgLy8gcmVsYXRpdmUgdG8gZ3JhcGhBcmVhXHJcbiAgICAgICAgLmNhbGwoeEF4aXNHZW4pXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpc1wiKTtcclxuICAgIGlmIChjaGFydEluZm8ueEF4aXNDb2xvcikge1xyXG4gICAgICAgIHhBeGlzLnN0eWxlKFwic3Ryb2tlXCIsIGNoYXJ0SW5mby54QXhpc0NvbG9yKTtcclxuICAgIH1cclxuICAgIGNoYXJ0RWxlbWVudHNbXCJ4QXhpc1wiXSA9IHhBeGlzO1xyXG5cclxuICAgIGxldCB0ZXh0U2l6ZSA9IG1lYXN1cmVUZXh0U2l6ZShcIjk5LTk5LTk5XCIpO1xyXG5cclxuICAgIGxldCB4QXhpc1RpY2tMYWJlbHMgPSB4QXhpc1xyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC0xICogdGV4dFNpemUuaGVpZ2h0ICogTWF0aC5jb3MoKDY1IC8gMTgwKSAqIE1hdGguUEkpKVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCAwKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC02NSlcIilcclxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpY2stbGFiZWxcIik7XHJcbiAgICBpZiAoY2hhcnRJbmZvLnhBeGlzQ29sb3IpIHtcclxuICAgICAgICB4QXhpc1RpY2tMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIGNoYXJ0SW5mby54QXhpc0NvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGlja0xlbmd0aCA9IDY7XHJcbiAgICBsZXQgdGlja0xhYmVsSGVpZ2h0ID0gdGV4dFNpemUud2lkdGggKiBNYXRoLnNpbigoNjUgLyAxODApICogTWF0aC5QSSk7XHJcbiAgICBsZXQgeEF4aXNMYWJlbCA9IHhBeGlzXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dChjaGFydEluZm8ueEF4aXNMYWJlbClcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgICh0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KSArXHJcbiAgICAgICAgICAgICAgICBcIilcIlxyXG4gICAgICAgIClcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1heGlzLWxhYmVsXCIpO1xyXG4gICAgaWYgKGNoYXJ0SW5mby54QXhpc0xhYmVsQ29sb3IpIHtcclxuICAgICAgICB4QXhpc0xhYmVsLnN0eWxlKFwiZmlsbFwiLCBjaGFydEluZm8ueEF4aXNMYWJlbENvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB4QXhpcyBoZWlnaHRcclxuICAgIHhBeGlzLmF0dHIoXCJoZWlnaHRcIiwgdGlja0xlbmd0aCArIHRpY2tMYWJlbEhlaWdodCk7XHJcblxyXG4gICAgLy8gRXhwYW5kIGFyZWFzXHJcbiAgICBleHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuc3ZnLCAwLCB0aWNrTGVuZ3RoICsgdGlja0xhYmVsSGVpZ2h0KTtcclxuICAgIGV4cGFuZEFyZWEoY2hhcnRFbGVtZW50cy5ncmFwaEFyZWEsIDAsIHRpY2tMZW5ndGggKyB0aWNrTGFiZWxIZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJZQXhpcyhcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgeUF4aXNMb2NhdGlvbjogc3RyaW5nLFxyXG4gICAgZGF0YXNldElkczogQXJyYXk8bnVtYmVyPlxyXG4pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyWUF4aXNcIilcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YXNldElkcyk7XHJcblxyXG4gICAgbGV0IGNoYXJ0SW5mbyA9IG51bGw7XHJcbiAgICBpZiAocmVuZGVySW5mby5vdXRwdXQgPT09IE91dHB1dFR5cGUuTGluZSkge1xyXG4gICAgICAgIGNoYXJ0SW5mbyA9IHJlbmRlckluZm8ubGluZTtcclxuICAgIH0gZWxzZSBpZiAocmVuZGVySW5mby5vdXRwdXQgPT09IE91dHB1dFR5cGUuQmFyKSB7XHJcbiAgICAgICAgY2hhcnRJbmZvID0gcmVuZGVySW5mby5iYXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghY2hhcnRJbmZvKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGRhdGFzZXRzID0gcmVuZGVySW5mby5kYXRhc2V0cztcclxuICAgIGlmIChkYXRhc2V0SWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiAhPT0gXCJsZWZ0XCIgJiYgeUF4aXNMb2NhdGlvbiAhPT0gXCJyaWdodFwiKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHlNaW5PZkRhdGFzZXRzID0gbnVsbDtcclxuICAgIGxldCB5TWF4T2ZEYXRhc2V0cyA9IG51bGw7XHJcbiAgICBsZXQgdG1wVmFsdWVJc1RpbWUgPSBudWxsO1xyXG4gICAgbGV0IHZhbHVlSXNUaW1lID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldElkcykge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBpZiAoZGF0YXNldC5nZXRRdWVyeSgpLnVzZWRBc1hEYXRhc2V0KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgaWYgKHlNaW5PZkRhdGFzZXRzID09PSBudWxsIHx8IGRhdGFzZXQuZ2V0WU1pbigpIDwgeU1pbk9mRGF0YXNldHMpIHtcclxuICAgICAgICAgICAgeU1pbk9mRGF0YXNldHMgPSBkYXRhc2V0LmdldFlNaW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHlNYXhPZkRhdGFzZXRzID09PSBudWxsIHx8IGRhdGFzZXQuZ2V0WU1heCgpID4geU1heE9mRGF0YXNldHMpIHtcclxuICAgICAgICAgICAgeU1heE9mRGF0YXNldHMgPSBkYXRhc2V0LmdldFlNYXgoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5lZWQgYWxsIGRhdGFzZXRzIGhhdmUgc2FtZSBzZXR0aW5ncyBmb3IgdGltZSB2YWx1ZVxyXG4gICAgICAgIHZhbHVlSXNUaW1lID0gZGF0YXNldC5pc1VzaW5nVGltZVZhbHVlKCk7XHJcbiAgICAgICAgaWYgKHRtcFZhbHVlSXNUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRtcFZhbHVlSXNUaW1lID0gdmFsdWVJc1RpbWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlSXNUaW1lICE9PSB0bXBWYWx1ZUlzVGltZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTm90IGFsbCB2YWx1ZXMgaW4gdGltZSBmb3JtYXRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHlNaW5PZkRhdGFzZXRzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHlNYXhPZkRhdGFzZXRzKTtcclxuXHJcbiAgICBsZXQgeU1pbiA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWluID0gY2hhcnRJbmZvLnlNaW5bMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNaW4gPSBjaGFydEluZm8ueU1pblsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWluQXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1pbiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNaW4gPSB5TWluT2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1pbkFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeU1heCA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5TWF4ID0gY2hhcnRJbmZvLnlNYXhbMF07XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlNYXggPSBjaGFydEluZm8ueU1heFsxXTtcclxuICAgIH1cclxuICAgIGxldCB5TWF4QXNzaWduZWQgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeU1heCAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHlNYXggPSB5TWF4T2ZEYXRhc2V0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeU1heEFzc2lnbmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh5TWF4IDwgeU1pbikge1xyXG4gICAgICAgIGxldCB5VG1wID0geU1pbjtcclxuICAgICAgICB5TWluID0geU1heDtcclxuICAgICAgICB5TWF4ID0geVRtcDtcclxuICAgICAgICBsZXQgeVRtcEFzc2lnbmVkID0geU1pbkFzc2lnbmVkO1xyXG4gICAgICAgIHlNaW5Bc3NpZ25lZCA9IHlNYXhBc3NpZ25lZDtcclxuICAgICAgICB5TWF4QXNzaWduZWQgPSB5VG1wQXNzaWduZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlFeHRlbnQgPSB5TWF4IC0geU1pbjtcclxuXHJcbiAgICBsZXQgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuICAgIGxldCB5TG93ZXIsIHlVcHBlcjtcclxuICAgIGlmICh5TWluQXNzaWduZWQpIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5TG93ZXIgPSB5TWluIC0geUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIGlmICh5TWF4QXNzaWduZWQpIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB5VXBwZXIgPSB5TWF4ICsgeUV4dGVudCAqIDAuMjtcclxuICAgIH1cclxuICAgIC8vIGlmIGl0IGlzIGJhciBjaGFydCwgemVybyBtdXN0IGJlIGNvbnRhaW5lZCBpbiB0aGUgcmFuZ2VcclxuICAgIGlmIChyZW5kZXJJbmZvLm91dHB1dCA9PT0gT3V0cHV0VHlwZS5CYXIpIHtcclxuICAgICAgICBpZiAoeVVwcGVyIDwgMC4wKSB7XHJcbiAgICAgICAgICAgIHlVcHBlciA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5TG93ZXIgPiAwLjApIHtcclxuICAgICAgICAgICAgeUxvd2VyID0gMC4wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHlTY2FsZS5kb21haW4oW3lMb3dlciwgeVVwcGVyXSkucmFuZ2UoW3JlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCwgMF0pO1xyXG5cclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudHNbXCJsZWZ0WVNjYWxlXCJdID0geVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wicmlnaHRZU2NhbGVcIl0gPSB5U2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzQ29sb3IgPSBcIlwiO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeUF4aXNDb2xvciA9IGNoYXJ0SW5mby55QXhpc0NvbG9yWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0NvbG9yID0gY2hhcnRJbmZvLnlBeGlzQ29sb3JbMV07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzTGFiZWxDb2xvciA9IFwiXCI7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsQ29sb3IgPSBjaGFydEluZm8ueUF4aXNMYWJlbENvbG9yWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsQ29sb3IgPSBjaGFydEluZm8ueUF4aXNMYWJlbENvbG9yWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0xhYmVsVGV4dCA9IFwiXCI7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsVGV4dCA9IGNoYXJ0SW5mby55QXhpc0xhYmVsWzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc0xhYmVsVGV4dCA9IGNoYXJ0SW5mby55QXhpc0xhYmVsWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc1VuaXRUZXh0ID0gXCJcIjtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlBeGlzVW5pdFRleHQgPSBjaGFydEluZm8ueUF4aXNVbml0WzBdO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpc1VuaXRUZXh0ID0gY2hhcnRJbmZvLnlBeGlzVW5pdFsxXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgeUF4aXNHZW47XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5QXhpc0dlbiA9IGQzLmF4aXNMZWZ0KHlTY2FsZSk7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlBeGlzR2VuID0gZDMuYXhpc1JpZ2h0KHlTY2FsZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoeUF4aXNHZW4gJiYgdmFsdWVJc1RpbWUpIHtcclxuICAgICAgICBsZXQgdGlja0Zvcm1hdCA9IGdldFlUaWNrRm9ybWF0KCk7XHJcbiAgICAgICAgeUF4aXNHZW4udGlja0Zvcm1hdCh0aWNrRm9ybWF0KTtcclxuICAgIH1cclxuICAgIGxldCB5QXhpcyA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ5QXhpc1wiKVxyXG4gICAgICAgIC5jYWxsKHlBeGlzR2VuKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWF4aXNcIik7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5QXhpcy5hdHRyKFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICsgXCIgLDApXCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgY2hhcnRFbGVtZW50c1tcImxlZnRZQXhpc1wiXSA9IHlBeGlzO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBjaGFydEVsZW1lbnRzW1wicmlnaHRZQXhpc1wiXSA9IHlBeGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc0xpbmUgPSB5QXhpcy5zZWxlY3RBbGwoXCJwYXRoXCIpO1xyXG4gICAgaWYgKHlBeGlzQ29sb3IpIHtcclxuICAgICAgICB5QXhpc0xpbmUuc3R5bGUoXCJzdHJva2VcIiwgeUF4aXNDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzVGlja3MgPSB5QXhpcy5zZWxlY3RBbGwoXCJsaW5lXCIpO1xyXG4gICAgaWYgKHlBeGlzQ29sb3IpIHtcclxuICAgICAgICB5QXhpc1RpY2tzLnN0eWxlKFwic3Ryb2tlXCIsIHlBeGlzQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB5QXhpc1RpY2tMYWJlbHMgPSB5QXhpc1xyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdGljay1sYWJlbFwiKTtcclxuICAgIGlmICh5QXhpc0NvbG9yKSB7XHJcbiAgICAgICAgeUF4aXNUaWNrTGFiZWxzLnN0eWxlKFwiZmlsbFwiLCB5QXhpc0NvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgbWF4IHRpY2sgbGFiZWwgd2lkdGhcclxuICAgIGxldCB5VGlja0Zvcm1hdCA9IGQzLnRpY2tGb3JtYXQoeUxvd2VyLCB5VXBwZXIsIDEwKTtcclxuICAgIGxldCB5TG93ZXJMYWJlbFNpemUgPSBtZWFzdXJlVGV4dFNpemUoXHJcbiAgICAgICAgeVRpY2tGb3JtYXQoeUxvd2VyKSxcclxuICAgICAgICBcInRyYWNrZXItYXhpcy1sYWJlbFwiXHJcbiAgICApO1xyXG4gICAgbGV0IHlVcHBlckxhYmVsU2l6ZSA9IG1lYXN1cmVUZXh0U2l6ZShcclxuICAgICAgICB5VGlja0Zvcm1hdCh5VXBwZXIpLFxyXG4gICAgICAgIFwidHJhY2tlci1heGlzLWxhYmVsXCJcclxuICAgICk7XHJcbiAgICBsZXQgbWF4VGlja0xhYmVsV2lkdGggPSBNYXRoLm1heChcclxuICAgICAgICB5TG93ZXJMYWJlbFNpemUud2lkdGgsXHJcbiAgICAgICAgeVVwcGVyTGFiZWxTaXplLndpZHRoXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh5QXhpc1VuaXRUZXh0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbFRleHQgKz0gXCIgKFwiICsgeUF4aXNVbml0VGV4dCArIFwiKVwiO1xyXG4gICAgfVxyXG4gICAgbGV0IHlUaWNrTGVuZ3RoID0gNjtcclxuICAgIGxldCB5QXhpc0xhYmVsU2l6ZSA9IG1lYXN1cmVUZXh0U2l6ZSh5QXhpc0xhYmVsVGV4dCk7XHJcbiAgICBsZXQgeUF4aXNMYWJlbCA9IHlBeGlzXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAudGV4dCh5QXhpc0xhYmVsVGV4dClcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsICgtMSAqIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCkgLyAyLjApXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItYXhpcy1sYWJlbFwiKTtcclxuICAgIGlmICh5QXhpc0xvY2F0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIHlBeGlzTGFiZWwuYXR0cihcclxuICAgICAgICAgICAgXCJ5XCIsXHJcbiAgICAgICAgICAgIC15VGlja0xlbmd0aCAtIG1heFRpY2tMYWJlbFdpZHRoIC0geUF4aXNMYWJlbFNpemUuaGVpZ2h0IC8gMi4wXHJcbiAgICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeUF4aXNMYWJlbC5hdHRyKFxyXG4gICAgICAgICAgICBcInlcIixcclxuICAgICAgICAgICAgK3lUaWNrTGVuZ3RoICsgbWF4VGlja0xhYmVsV2lkdGggKyB5QXhpc0xhYmVsU2l6ZS5oZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKHlBeGlzTGFiZWxDb2xvcikge1xyXG4gICAgICAgIHlBeGlzTGFiZWwuc3R5bGUoXCJmaWxsXCIsIHlBeGlzTGFiZWxDb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHlBeGlzV2lkdGggPSB5QXhpc0xhYmVsU2l6ZS5oZWlnaHQgKyBtYXhUaWNrTGFiZWxXaWR0aCArIHlUaWNrTGVuZ3RoO1xyXG4gICAgeUF4aXMuYXR0cihcIndpZHRoXCIsIHlBeGlzV2lkdGgpO1xyXG5cclxuICAgIC8vIEV4cGFuZCBhcmVhc1xyXG4gICAgZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgeUF4aXNXaWR0aCwgMCk7XHJcbiAgICBleHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLCB5QXhpc1dpZHRoLCAwKTtcclxuXHJcbiAgICAvLyBNb3ZlIGFyZWFzXHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAvLyBNb3ZlIGRhdGFBcmVhXHJcbiAgICAgICAgbW92ZUFyZWEoY2hhcnRFbGVtZW50cy5kYXRhQXJlYSwgeUF4aXNXaWR0aCwgMCk7XHJcblxyXG4gICAgICAgIC8vIE1vdmUgdGl0bGVcclxuICAgICAgICBpZiAoY2hhcnRFbGVtZW50cy50aXRsZSkge1xyXG4gICAgICAgICAgICBtb3ZlQXJlYShjaGFydEVsZW1lbnRzLnRpdGxlLCB5QXhpc1dpZHRoLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxpbmUoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbiAgICB5QXhpc0xvY2F0aW9uOiBzdHJpbmdcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG5cclxuICAgIGlmIChyZW5kZXJJbmZvLm91dHB1dCAhPT0gT3V0cHV0VHlwZS5MaW5lKSByZXR1cm47XHJcblxyXG4gICAgbGV0IGxpbmVJbmZvID0gcmVuZGVySW5mby5saW5lO1xyXG4gICAgaWYgKCFsaW5lSW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGxldCB5U2NhbGU6IGFueSA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLmxlZnRZU2NhbGU7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlTY2FsZSA9IGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxpbmVJbmZvLnNob3dMaW5lW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICBsZXQgbGluZUdlbiA9IGQzXHJcbiAgICAgICAgICAgIC5saW5lPERhdGFQb2ludD4oKVxyXG4gICAgICAgICAgICAuZGVmaW5lZChmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcC52YWx1ZSAhPT0gbnVsbDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLngoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0RWxlbWVudHMueFNjYWxlKHAuZGF0ZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC55KGZ1bmN0aW9uIChwOiBEYXRhUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5U2NhbGUocC52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgbGluZSA9IGNoYXJ0RWxlbWVudHMuZGF0YUFyZWFcclxuICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItbGluZVwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgbGluZUluZm8ubGluZVdpZHRoW2RhdGFzZXQuZ2V0SWQoKV0pO1xyXG5cclxuICAgICAgICBpZiAobGluZUluZm8uZmlsbEdhcFtkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgICAgIGxpbmUuZGF0dW0oXHJcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGRhdGFzZXQpLmZpbHRlcihmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlICE9PSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKS5hdHRyKFwiZFwiLCBsaW5lR2VuIGFzIGFueSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGluZS5kYXR1bShkYXRhc2V0KS5hdHRyKFwiZFwiLCBsaW5lR2VuIGFzIGFueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGluZUluZm8ubGluZUNvbG9yW2RhdGFzZXQuZ2V0SWQoKV0pIHtcclxuICAgICAgICAgICAgbGluZS5zdHlsZShcInN0cm9rZVwiLCBsaW5lSW5mby5saW5lQ29sb3JbZGF0YXNldC5nZXRJZCgpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJQb2ludHMoXHJcbiAgICBjaGFydEVsZW1lbnRzOiBDaGFydEVsZW1lbnRzLFxyXG4gICAgcmVuZGVySW5mbzogUmVuZGVySW5mbyxcclxuICAgIGRhdGFzZXQ6IERhdGFzZXQsXHJcbiAgICB5QXhpc0xvY2F0aW9uOiBzdHJpbmdcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhsaW5lSW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuXHJcbiAgICBpZiAocmVuZGVySW5mby5vdXRwdXQgIT09IE91dHB1dFR5cGUuTGluZSkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBsaW5lSW5mbyA9IHJlbmRlckluZm8ubGluZTtcclxuICAgIGlmICghbGluZUluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgeVNjYWxlOiBhbnkgPSBudWxsO1xyXG4gICAgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgeVNjYWxlID0gY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlO1xyXG4gICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsaW5lSW5mby5zaG93UG9pbnRbZGF0YXNldC5nZXRJZCgpXSkge1xyXG4gICAgICAgIGxldCBkb3RzID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYVxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwiZG90XCIpXHJcbiAgICAgICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShkYXRhc2V0KS5maWx0ZXIoZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlICE9PSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCBsaW5lSW5mby5wb2ludFNpemVbZGF0YXNldC5nZXRJZCgpXSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geVNjYWxlKHAudmFsdWUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcImRhdGVcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQzLnRpbWVGb3JtYXQoXCIleS0lbS0lZFwiKShwLmRhdGUgYXMgYW55KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHAudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlLnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWRvdFwiKTtcclxuICAgICAgICBpZiAobGluZUluZm8ucG9pbnRDb2xvcltkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgICAgIGRvdHMuc3R5bGUoXCJmaWxsXCIsIGxpbmVJbmZvLnBvaW50Q29sb3JbZGF0YXNldC5nZXRJZCgpXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBsaW5lSW5mby5wb2ludEJvcmRlckNvbG9yW2RhdGFzZXQuZ2V0SWQoKV0gJiZcclxuICAgICAgICAgICAgICAgIGxpbmVJbmZvLnBvaW50Qm9yZGVyV2lkdGhbZGF0YXNldC5nZXRJZCgpXSA+IDAuMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRvdHMuc3R5bGUoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJva2VcIixcclxuICAgICAgICAgICAgICAgICAgICBsaW5lSW5mby5wb2ludEJvcmRlckNvbG9yW2RhdGFzZXQuZ2V0SWQoKV1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBkb3RzLnN0eWxlKFxyXG4gICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm8ucG9pbnRCb3JkZXJXaWR0aFtkYXRhc2V0LmdldElkKCldXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGluZUluZm8uYWxsb3dJbnNwZWN0RGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgdG9vbHRpcCA9IGNoYXJ0RWxlbWVudHMuc3ZnLmFwcGVuZChcImdcIikuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICBsZXQgdG9vbHRpcEJnID0gdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcmVuZGVySW5mby50b29sdGlwU2l6ZS53aWR0aClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHJlbmRlckluZm8udG9vbHRpcFNpemUuaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRyYWNrZXItdG9vbHRpcFwiKTtcclxuICAgICAgICAgICAgbGV0IHRvb2x0aXBMYWJlbCA9IHRvb2x0aXBcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlbmRlckluZm8udG9vbHRpcFNpemUud2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRvb2x0aXAtbGFiZWxcIik7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwTGFiZWxEYXRlID0gdG9vbHRpcExhYmVsXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidHNwYW5cIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCA0KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChyZW5kZXJJbmZvLnRvb2x0aXBTaXplLmhlaWdodCAvIDUpICogMik7XHJcbiAgICAgICAgICAgIGxldCB0b29sdGlwTGFiZWxWYWx1ZSA9IHRvb2x0aXBMYWJlbFxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRzcGFuXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgNClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAocmVuZGVySW5mby50b29sdGlwU2l6ZS5oZWlnaHQgLyA1KSAqIDQpO1xyXG5cclxuICAgICAgICAgICAgZG90cy5vbihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXBMYWJlbERhdGUudGV4dChcImRhdGU6XCIgKyBkMy5zZWxlY3QodGhpcykuYXR0cihcImRhdGVcIikpO1xyXG4gICAgICAgICAgICAgICAgdG9vbHRpcExhYmVsVmFsdWUudGV4dChcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlOlwiICsgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ2YWx1ZVwiKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBkMy5wb2ludGVyKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGlmICh4IDwgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5hdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeCArIHJlbmRlckluZm8udG9vbHRpcFNpemUud2lkdGggKiAxLjMpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh5IC0gcmVuZGVySW5mby50b29sdGlwU2l6ZS5oZWlnaHQgKiAxLjApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5hdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeCAtIHJlbmRlckluZm8udG9vbHRpcFNpemUud2lkdGggKiAwLjApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh5IC0gcmVuZGVySW5mby50b29sdGlwU2l6ZS5oZWlnaHQgKiAxLjApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0b29sdGlwLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICAgICAgfSkub24oXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckJhcihcclxuICAgIGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YXNldDogRGF0YXNldCxcclxuICAgIHlBeGlzTG9jYXRpb246IHN0cmluZyxcclxuICAgIGN1cnJCYXJTZXQ6IG51bWJlcixcclxuICAgIHRvdGFsTnVtT2ZCYXJTZXRzOiBudW1iZXJcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGJhckluZm8pO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCIlZC8lZFwiLCBjdXJyQmFyU2V0LCB0b3RhbE51bU9mQmFyU2V0cyk7XHJcblxyXG4gICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ICE9PSBPdXRwdXRUeXBlLkJhcikgcmV0dXJuO1xyXG5cclxuICAgIGxldCBiYXJJbmZvID0gcmVuZGVySW5mby5iYXI7XHJcbiAgICBpZiAoIWJhckluZm8pIHJldHVybjtcclxuXHJcbiAgICBsZXQgYmFyR2FwID0gMTtcclxuICAgIGxldCBiYXJTZXRXaWR0aCA9IHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gZGF0YXNldC5nZXRMZW5ndGgoKTtcclxuICAgIGxldCBiYXJXaWR0aCA9IGJhclNldFdpZHRoO1xyXG4gICAgaWYgKGJhclNldFdpZHRoIC0gYmFyR2FwID4gMCkge1xyXG4gICAgICAgIGJhcldpZHRoID0gYmFyU2V0V2lkdGggLSBiYXJHYXA7XHJcbiAgICB9XHJcbiAgICBiYXJXaWR0aCA9IGJhcldpZHRoIC8gdG90YWxOdW1PZkJhclNldHM7XHJcblxyXG4gICAgbGV0IHBvcnRpb25MZWZ0ID0gKGN1cnJCYXJTZXQgKyAxKSAvIHRvdGFsTnVtT2ZCYXJTZXRzO1xyXG5cclxuICAgIGxldCB5U2NhbGU6IGFueSA9IG51bGw7XHJcbiAgICBpZiAoeUF4aXNMb2NhdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB5U2NhbGUgPSBjaGFydEVsZW1lbnRzLmxlZnRZU2NhbGU7XHJcbiAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHlTY2FsZSA9IGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGJhcnMgPSBjaGFydEVsZW1lbnRzLmRhdGFBcmVhXHJcbiAgICAgICAgLnNlbGVjdEFsbChcImJhclwiKVxyXG4gICAgICAgIC5kYXRhKFxyXG4gICAgICAgICAgICBBcnJheS5mcm9tKGRhdGFzZXQpLmZpbHRlcihmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcC52YWx1ZSAhPT0gbnVsbDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb3J0aW9uVmlzaWJsZSA9IGN1cnJCYXJTZXQgKyAxIC0gdG90YWxOdW1PZkJhclNldHMgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9ydGlvblZpc2libGUgPCAxLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLnhTY2FsZShwLmRhdGUpIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2V0V2lkdGggLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmFyU2V0ICogYmFyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0aW9uVmlzaWJsZSAqIGJhcldpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cy54U2NhbGUocC5kYXRlKSAtXHJcbiAgICAgICAgICAgICAgICBiYXJTZXRXaWR0aCAvIDIuMCArXHJcbiAgICAgICAgICAgICAgICBjdXJyQmFyU2V0ICogYmFyV2lkdGhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoTWF0aC5tYXgocC52YWx1ZSwgMCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbiAocDogRGF0YVBvaW50LCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBwb3J0aW9uVmlzaWJsZSA9IGN1cnJCYXJTZXQgKyAxIC0gdG90YWxOdW1PZkJhclNldHMgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9ydGlvblZpc2libGUgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC4wO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3J0aW9uVmlzaWJsZSA8IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXJXaWR0aCAqIHBvcnRpb25WaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGRhdGFzZXQuZ2V0TGVuZ3RoKCkgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcG9ydGlvblZpc2libGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIDEuMCAtIChjdXJyQmFyU2V0ICsgMSAtIHRvdGFsTnVtT2ZCYXJTZXRzIC8gMi4wKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3J0aW9uVmlzaWJsZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvcnRpb25WaXNpYmxlIDwgMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoICogcG9ydGlvblZpc2libGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJhcldpZHRoO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKHA6IERhdGFQb2ludCkge1xyXG4gICAgICAgICAgICBpZiAocC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZShwLnZhbHVlKSAtIHlTY2FsZSgwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWJhclwiKTtcclxuXHJcbiAgICBpZiAoYmFySW5mby5iYXJDb2xvcltkYXRhc2V0LmdldElkKCldKSB7XHJcbiAgICAgICAgYmFycy5zdHlsZShcImZpbGxcIiwgYmFySW5mby5iYXJDb2xvcltkYXRhc2V0LmdldElkKCldKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTGVnZW5kKGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsIHJlbmRlckluZm86IFJlbmRlckluZm8pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24pO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbik7XHJcblxyXG4gICAgLy8gR2V0IGNoYXJ0IGluZm9cclxuICAgIGxldCBjaGFydEluZm8gPSBudWxsO1xyXG4gICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICBjaGFydEluZm8gPSByZW5kZXJJbmZvLmxpbmU7XHJcbiAgICB9IGVsc2UgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgIGNoYXJ0SW5mbyA9IHJlbmRlckluZm8uYmFyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBjaGFydCBlbGVtZW50c1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IGdyYXBoQXJlYSA9IGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhO1xyXG4gICAgbGV0IGRhdGFBcmVhID0gY2hhcnRFbGVtZW50cy5kYXRhQXJlYTtcclxuICAgIGxldCB0aXRsZSA9IGNoYXJ0RWxlbWVudHMudGl0bGU7XHJcbiAgICBsZXQgeEF4aXMgPSBjaGFydEVsZW1lbnRzLnhBeGlzO1xyXG4gICAgbGV0IGxlZnRZQXhpcyA9IGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzO1xyXG4gICAgbGV0IHJpZ2h0WUF4aXMgPSBjaGFydEVsZW1lbnRzLnJpZ2h0WUF4aXM7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgbGV0IHRpdGxlSGVpZ2h0ID0gMC4wO1xyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGVIZWlnaHQgPSBwYXJzZUZsb2F0KHRpdGxlLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgfVxyXG4gICAgbGV0IHhBeGlzSGVpZ2h0ID0gcGFyc2VGbG9hdCh4QXhpcy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIGxldCBsZWZ0WUF4aXNXaWR0aCA9IDAuMDtcclxuICAgIGlmIChsZWZ0WUF4aXMpIHtcclxuICAgICAgICBsZWZ0WUF4aXNXaWR0aCA9IHBhcnNlRmxvYXQobGVmdFlBeGlzLmF0dHIoXCJ3aWR0aFwiKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgcmlnaHRZQXhpc1dpZHRoID0gMC4wO1xyXG4gICAgaWYgKHJpZ2h0WUF4aXMpIHtcclxuICAgICAgICByaWdodFlBeGlzV2lkdGggPSBwYXJzZUZsb2F0KHJpZ2h0WUF4aXMuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIH1cclxuICAgIC8vIEdldCBkYXRhc2V0c1xyXG4gICAgbGV0IGRhdGFzZXRzID0gcmVuZGVySW5mby5kYXRhc2V0cztcclxuICAgIGxldCB4RGF0YXNldElkcyA9IGRhdGFzZXRzLmdldFhEYXRhc2V0SWRzKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh4RGF0YXNldElkcyk7XHJcblxyXG4gICAgLy8gR2V0IG5hbWVzIGFuZCB0aGVpciBkaW1lbnNpb25cclxuICAgIGxldCBuYW1lcyA9IGRhdGFzZXRzLmdldE5hbWVzKCk7IC8vIHhEYXRhc2V0IG5hbWUgaW5jbHVkZWRcclxuICAgIGxldCBuYW1lU2l6ZXMgPSBuYW1lcy5tYXAoZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICByZXR1cm4gbWVhc3VyZVRleHRTaXplKG4sIFwidHJhY2tlci1sZWdlbmQtbGFiZWxcIik7XHJcbiAgICB9KTtcclxuICAgIGxldCBpbmRNYXhOYW1lID0gMDtcclxuICAgIGxldCBtYXhOYW1lV2lkdGggPSAwLjA7XHJcbiAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBuYW1lcy5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGluZCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmIChuYW1lU2l6ZXNbaW5kXS53aWR0aCA+IG1heE5hbWVXaWR0aCkge1xyXG4gICAgICAgICAgICBtYXhOYW1lV2lkdGggPSBuYW1lU2l6ZXNbaW5kXS53aWR0aDtcclxuICAgICAgICAgICAgaW5kTWF4TmFtZSA9IGluZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgbWF4TmFtZSA9IG5hbWVzW2luZE1heE5hbWVdO1xyXG4gICAgbGV0IGNoYXJhY3RlcldpZHRoID0gbWF4TmFtZVdpZHRoIC8gbWF4TmFtZS5sZW5ndGg7XHJcbiAgICBsZXQgbmFtZUhlaWdodCA9IG5hbWVTaXplc1tpbmRNYXhOYW1lXS5oZWlnaHQ7XHJcbiAgICBsZXQgbnVtTmFtZXMgPSBuYW1lcy5sZW5ndGggLSB4RGF0YXNldElkcy5sZW5ndGg7XHJcblxyXG4gICAgbGV0IHhTcGFjaW5nID0gMiAqIGNoYXJhY3RlcldpZHRoO1xyXG4gICAgbGV0IHlTcGFjaW5nID0gbmFtZUhlaWdodDtcclxuICAgIGxldCBtYXJrZXJXaWR0aCA9IDIgKiBjaGFyYWN0ZXJXaWR0aDtcclxuXHJcbiAgICAvLyBHZXQgbGVnZW5kIHdpZHRoIGFuZCBoZWlnaHRcclxuICAgIGxldCBsZWdlbmRXaWR0aCA9IDA7XHJcbiAgICBsZXQgbGVnZW5kSGVpZ2h0ID0gMDtcclxuICAgIGlmIChjaGFydEluZm8ubGVnZW5kT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIGxlZ2VuZFdpZHRoID0geFNwYWNpbmcgKiAzICsgbWFya2VyV2lkdGggKyBtYXhOYW1lV2lkdGg7XHJcbiAgICAgICAgbGVnZW5kSGVpZ2h0ID0gKG51bU5hbWVzICsgMSkgKiB5U3BhY2luZztcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxlZ2VuZFdpZHRoID1cclxuICAgICAgICAgICAgKDIgKiB4U3BhY2luZyArIG1hcmtlcldpZHRoKSAqIG51bU5hbWVzICtcclxuICAgICAgICAgICAgeFNwYWNpbmcgK1xyXG4gICAgICAgICAgICBkMy5zdW0obmFtZVNpemVzLCBmdW5jdGlvbiAocywgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLndpZHRoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBsZWdlbmRIZWlnaHQgPSB5U3BhY2luZyArIG5hbWVIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcclxuICAgIC8vICAgICBgbWF4TmFtZTogJHttYXhOYW1lfSwgY2hhcmFjdGVyV2lkdGg6ICR7Y2hhcmFjdGVyV2lkdGh9LCBtYXhOYW1lV2lkdGg6ICR7bWF4TmFtZVdpZHRofWBcclxuICAgIC8vICk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgeFNwYWNpbmc6JHt4U3BhY2luZ30sIG51bU5hbWVzOiAke251bU5hbWVzfSwgbWFya2VyV2lkdGg6ICR7bWFya2VyV2lkdGh9YCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgbGVnZW5kV2lkdGg6ICR7bGVnZW5kV2lkdGh9LCBsZWdlbmRIZWlnaHQ6ICR7bGVnZW5kSGVpZ2h0fWApO1xyXG5cclxuICAgIC8vIENhbGN1YWx0ZSBsZW5nZW5kWCBhbmQgbGVnZW5kWVxyXG4gICAgbGV0IGxlZ2VuZFggPSAwLjA7IC8vIHJlbGF0aXZlIHRvIGdyYXBoQXJlYVxyXG4gICAgbGV0IGxlZ2VuZFkgPSAwLjA7XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInRvcFwiKSB7XHJcbiAgICAgICAgLy8gYmVsb3cgdGl0bGVcclxuICAgICAgICBsZWdlbmRYID1cclxuICAgICAgICAgICAgbGVmdFlBeGlzV2lkdGggK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZFdpZHRoIC8gMi4wO1xyXG4gICAgICAgIGxlZ2VuZFkgPSB0aXRsZUhlaWdodDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgZXhwYW5kQXJlYShzdmcsIDAsIGxlZ2VuZEhlaWdodCArIHlTcGFjaW5nKTtcclxuICAgICAgICAvLyBNb3ZlIGRhdGFBcmVhIGRvd25cclxuICAgICAgICBtb3ZlQXJlYShkYXRhQXJlYSwgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgfSBlbHNlIGlmIChjaGFydEluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwiYm90dG9tXCIpIHtcclxuICAgICAgICAvLyBiZWxsb3cgeC1heGlzIGxhYmVsXHJcbiAgICAgICAgbGVnZW5kWCA9XHJcbiAgICAgICAgICAgIGxlZnRZQXhpc1dpZHRoICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggLyAyLjAgLVxyXG4gICAgICAgICAgICBsZWdlbmRXaWR0aCAvIDIuMDtcclxuICAgICAgICBsZWdlbmRZID1cclxuICAgICAgICAgICAgdGl0bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgK1xyXG4gICAgICAgICAgICB4QXhpc0hlaWdodCArXHJcbiAgICAgICAgICAgIHlTcGFjaW5nO1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBleHBhbmRBcmVhKHN2ZywgMCwgbGVnZW5kSGVpZ2h0ICsgeVNwYWNpbmcpO1xyXG4gICAgfSBlbHNlIGlmIChjaGFydEluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgbGVnZW5kWCA9IDA7XHJcbiAgICAgICAgbGVnZW5kWSA9XHJcbiAgICAgICAgICAgIHRpdGxlSGVpZ2h0ICtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUuaGVpZ2h0IC8gMi4wIC1cclxuICAgICAgICAgICAgbGVnZW5kSGVpZ2h0IC8gMi4wO1xyXG4gICAgICAgIC8vIEV4cGFuZCBzdmdcclxuICAgICAgICBleHBhbmRBcmVhKHN2ZywgbGVnZW5kV2lkdGggKyB4U3BhY2luZywgMCk7XHJcbiAgICAgICAgLy8gTW92ZSBkYXRhQXJlYSByaWdodFxyXG4gICAgICAgIG1vdmVBcmVhKGRhdGFBcmVhLCBsZWdlbmRXaWR0aCArIHhTcGFjaW5nLCAwKTtcclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBsZWdlbmRYID1cclxuICAgICAgICAgICAgcmVuZGVySW5mby5kYXRhQXJlYVNpemUud2lkdGggK1xyXG4gICAgICAgICAgICBsZWZ0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHJpZ2h0WUF4aXNXaWR0aCArXHJcbiAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgIGxlZ2VuZFkgPVxyXG4gICAgICAgICAgICB0aXRsZUhlaWdodCArXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCAvIDIuMCAtXHJcbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCAvIDIuMDtcclxuICAgICAgICAvLyBFeHBhbmQgc3ZnXHJcbiAgICAgICAgZXhwYW5kQXJlYShzdmcsIGxlZ2VuZFdpZHRoICsgeFNwYWNpbmcsIDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgbGVnZW5kWDogJHtsZWdlbmRYfSwgbGVnZW5kWTogJHtsZWdlbmRZfWApO1xyXG5cclxuICAgIGxldCBsZWdlbmQgPSBjaGFydEVsZW1lbnRzLmdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImxlZ2VuZFwiKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbGVnZW5kWCArIFwiLFwiICsgbGVnZW5kWSArIFwiKVwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdsZWdlbmRYOiAlZCwgbGVnZW5kWTogJWQnLCBsZWdlbmRYLCBsZWdlbmRZKTtcclxuXHJcbiAgICBsZXQgbGVnZW5kQmcgPSBsZWdlbmRcclxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWxlZ2VuZFwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbGVnZW5kV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbGVnZW5kSGVpZ2h0KTtcclxuICAgIGlmIChjaGFydEluZm8ubGVnZW5kQmdDb2xvcikge1xyXG4gICAgICAgIGxlZ2VuZEJnLnN0eWxlKFwiZmlsbFwiLCBjaGFydEluZm8ubGVnZW5kQmdDb2xvcik7XHJcbiAgICB9XHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZEJvcmRlckNvbG9yKSB7XHJcbiAgICAgICAgbGVnZW5kQmcuc3R5bGUoXCJzdHJva2VcIiwgY2hhcnRJbmZvLmxlZ2VuZEJvcmRlckNvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZmlyc3RNYXJrZXJYID0geFNwYWNpbmc7XHJcbiAgICBsZXQgZmlyc3RNYXJrZXJZID0gbmFtZUhlaWdodDtcclxuICAgIGxldCBmaXJzdExhYmVsWCA9IGZpcnN0TWFya2VyWCArIHhTcGFjaW5nICsgbWFya2VyV2lkdGg7IC8vIHhTcGFjaW5nICsgMiAqIHhTcGFpbmdcclxuICAgIGxldCBmaXJzdExhYmVsWSA9IGZpcnN0TWFya2VyWTtcclxuXHJcbiAgICBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBpZiAocmVuZGVySW5mby5vdXRwdXQgPT09IE91dHB1dFR5cGUuTGluZSkge1xyXG4gICAgICAgICAgICAvLyBsaW5lc1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBmaXJzdE1hcmtlclgpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hcmtlclkgKyBpICogeVNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkIDwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hcmtlclkgKyBpICogeVNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0RGF0YXNldEJ5SWQoaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldExpbmVJbmZvKCkubGluZUNvbG9yW2ldO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBwb2ludHNcclxuICAgICAgICAgICAgbGVnZW5kXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwibWFya2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEobmFtZXMpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmaXJzdE1hcmtlclggKyBtYXJrZXJXaWR0aCAvIDIuMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXJrZXJZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoaSkuZ2V0TGluZUluZm8oKS5zaG93UG9pbnRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGkpLmdldExpbmVJbmZvKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb2ludFNpemVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldERhdGFzZXRCeUlkKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRMaW5lSW5mbygpLnBvaW50Q29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgICAgICAvLyBiYXJzXHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZmlyc3RNYXJrZXJYKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWFya2VyWSArIGkgKiB5U3BhY2luZyAtIG5hbWVIZWlnaHQgLyAyLjA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBtYXJrZXJXaWR0aClcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG5hbWVIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0cy5nZXREYXRhc2V0QnlJZChpKS5nZXRCYXJJbmZvKCkuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5hbWVzXHJcbiAgICAgICAgbGV0IG5hbWVMYWJlbHMgPSBsZWdlbmRcclxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImxhYmVsc1wiKVxyXG4gICAgICAgICAgICAuZGF0YShuYW1lcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZpcnN0TGFiZWxYKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TGFiZWxZICsgaSAqIHlTcGFjaW5nO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLWxlZ2VuZC1sYWJlbFwiKTtcclxuXHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0cy5nZXREYXRhc2V0QnlJZChpKS5nZXRMaW5lSW5mbygpLmxpbmVDb2xvcltpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyZW5kZXJJbmZvLm91dHB1dCA9PT0gT3V0cHV0VHlwZS5CYXIpIHtcclxuICAgICAgICAgICAgbmFtZUxhYmVscy5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0cy5nZXREYXRhc2V0QnlJZChpKS5nZXRCYXJJbmZvKCkuYmFyQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoY2hhcnRJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldCBjdXJyUmVuZGVyUG9zWCA9IDAuMDtcclxuICAgICAgICBsZXQgY3VyclJlbmRlclBvc1gyID0gMC4wO1xyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLm91dHB1dCA9PT0gT3V0cHV0VHlwZS5MaW5lKSB7XHJcbiAgICAgICAgICAgIC8vIGxpbmVzXHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1FbGVtc0V4Y2x1ZGVkID0geERhdGFzZXRJZHMuZmlsdGVyKChpZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaSAtIG51bUVsZW1zRXhjbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSBmaXJzdE1hcmtlclg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVTaXplc1tpXS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4U3BhY2luZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJXaWR0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4U3BhY2luZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJSZW5kZXJQb3NYO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWDIgPSBmaXJzdE1hcmtlclggKyBtYXJrZXJXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWDIgKz1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVTaXplc1tpXS53aWR0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4U3BhY2luZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJXaWR0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4U3BhY2luZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJSZW5kZXJQb3NYMjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIGZpcnN0TWFya2VyWSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgZmlyc3RNYXJrZXJZKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhc2V0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0RGF0YXNldEJ5SWQoaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldExpbmVJbmZvKCkubGluZUNvbG9yW2ldO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBwb2ludHNcclxuICAgICAgICAgICAgY3VyclJlbmRlclBvc1ggPSAwLjA7XHJcbiAgICAgICAgICAgIGxlZ2VuZFxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIm1hcmtlcnNcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWCArIG1hcmtlcldpZHRoIC8gMi4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYICs9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyUmVuZGVyUG9zWDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZpcnN0TWFya2VyWSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoaSkuZ2V0TGluZUluZm8oKS5zaG93UG9pbnRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGkpLmdldExpbmVJbmZvKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb2ludFNpemVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBpOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldERhdGFzZXRCeUlkKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRMaW5lSW5mbygpLnBvaW50Q29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgICAgICAvLyBiYXJzXHJcbiAgICAgICAgICAgIGN1cnJSZW5kZXJQb3NYID0gMC4wO1xyXG4gICAgICAgICAgICBsZWdlbmRcclxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJtYXJrZXJzXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShcclxuICAgICAgICAgICAgICAgICAgICBuYW1lcy5maWx0ZXIoKG4sIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4RGF0YXNldElkcy5pbmNsdWRlcyhpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bUVsZW1zRXhjbHVkZWQgPSB4RGF0YXNldElkcy5maWx0ZXIoKGlkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCA8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpIC0gbnVtRWxlbXNFeGNsdWRlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TWFya2VyWDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVNpemVzW2ldLndpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcldpZHRoICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZpcnN0TWFya2VyWSAtIG5hbWVIZWlnaHQgLyAyLjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG1hcmtlcldpZHRoKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbmFtZUhlaWdodClcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGkpLmdldEJhckluZm8oKS5iYXJDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbmFtZXNcclxuICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IDAuMDtcclxuICAgICAgICBsZXQgbmFtZUxhYmVscyA9IGxlZ2VuZFxyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwibGFiZWxzXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKG5hbWVzKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbXNFeGNsdWRlZCA9IHhEYXRhc2V0SWRzLmZpbHRlcigoaWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgPCBpO1xyXG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaSA9IGkgLSBudW1FbGVtc0V4Y2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCA9IGZpcnN0TGFiZWxYO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyUmVuZGVyUG9zWCArPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lU2l6ZXNbaV0ud2lkdGggKyB4U3BhY2luZyArIG1hcmtlcldpZHRoICsgeFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VyclJlbmRlclBvc1g7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmaXJzdExhYmVsWSlcclxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeERhdGFzZXRJZHMuaW5jbHVkZXMoaSkpIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdHlsZShcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidHJhY2tlci1sZWdlbmQtbGFiZWxcIik7XHJcblxyXG4gICAgICAgIGlmIChyZW5kZXJJbmZvLm91dHB1dCA9PT0gT3V0cHV0VHlwZS5MaW5lKSB7XHJcbiAgICAgICAgICAgIG5hbWVMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoaSkuZ2V0TGluZUluZm8oKS5saW5lQ29sb3JbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVuZGVySW5mby5vdXRwdXQgPT09IE91dHB1dFR5cGUuQmFyKSB7XHJcbiAgICAgICAgICAgIG5hbWVMYWJlbHMuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGk6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGkpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoaSkuZ2V0QmFySW5mbygpLmJhckNvbG9yW2ldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlclRpdGxlKGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMsIHJlbmRlckluZm86IFJlbmRlckluZm8pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyVGl0bGVcIilcclxuICAgIC8vIHVuZGVyIGdyYXBoQXJlYVxyXG5cclxuICAgIGxldCBjaGFydEluZm8gPSBudWxsO1xyXG4gICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkxpbmUpIHtcclxuICAgICAgICBjaGFydEluZm8gPSByZW5kZXJJbmZvLmxpbmU7XHJcbiAgICB9IGVsc2UgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLkJhcikge1xyXG4gICAgICAgIGNoYXJ0SW5mbyA9IHJlbmRlckluZm8uYmFyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWNoYXJ0SW5mbykgcmV0dXJuO1xyXG5cclxuICAgIGlmICghY2hhcnRJbmZvLnRpdGxlKSByZXR1cm47XHJcbiAgICBsZXQgdGl0bGVTaXplID0gbWVhc3VyZVRleHRTaXplKGNoYXJ0SW5mby50aXRsZSwgXCJ0cmFja2VyLXRpdGxlXCIpO1xyXG5cclxuICAgIC8vIEFwcGVuZCB0aXRsZVxyXG4gICAgbGV0IHRpdGxlID0gY2hhcnRFbGVtZW50cy5ncmFwaEFyZWFcclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC50ZXh0KGNoYXJ0SW5mby50aXRsZSkgLy8gcGl2b3QgYXQgY2VudGVyXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRpdGxlXCIpXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoIC8gMi4wICtcclxuICAgICAgICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgICAgICAgIHRpdGxlU2l6ZS5oZWlnaHQgLyAyLjAgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGl0bGVTaXplLmhlaWdodCkgLy8gZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmFja2VyLXRpdGxlXCIpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcInRpdGxlXCJdID0gdGl0bGU7XHJcblxyXG4gICAgLy8gRXhwYW5kIHBhcmVudCBhcmVhc1xyXG4gICAgZXhwYW5kQXJlYShjaGFydEVsZW1lbnRzLnN2ZywgMCwgdGl0bGVTaXplLmhlaWdodCk7XHJcbiAgICBleHBhbmRBcmVhKGNoYXJ0RWxlbWVudHMuZ3JhcGhBcmVhLCAwLCB0aXRsZVNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAvLyBNb3ZlIHNpYmxpbmcgYXJlYXNcclxuICAgIG1vdmVBcmVhKGNoYXJ0RWxlbWVudHMuZGF0YUFyZWEsIDAsIHRpdGxlU2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgIHJldHVybjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q2hhcnRTY2FsZShcclxuICAgIF9jYW52YXM6IEhUTUxFbGVtZW50LFxyXG4gICAgY2hhcnRFbGVtZW50czogQ2hhcnRFbGVtZW50cyxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm9cclxuKSB7XHJcbiAgICBsZXQgY2FudmFzID0gZDMuc2VsZWN0KF9jYW52YXMpO1xyXG4gICAgbGV0IHN2ZyA9IGNoYXJ0RWxlbWVudHMuc3ZnO1xyXG4gICAgbGV0IHN2Z1dpZHRoID0gcGFyc2VGbG9hdChzdmcuYXR0cihcIndpZHRoXCIpKTtcclxuICAgIGxldCBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKTtcclxuICAgIHN2Zy5hdHRyKFwid2lkdGhcIiwgbnVsbClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApXHJcbiAgICAgICAgLmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWQgbWVldFwiKTtcclxuXHJcbiAgICBpZiAocmVuZGVySW5mby5maXRQYW5lbFdpZHRoKSB7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlKFwid2lkdGhcIiwgXCIxMDAlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwid2lkdGhcIixcclxuICAgICAgICAgICAgKHN2Z1dpZHRoICogcmVuZGVySW5mby5maXhlZFNjYWxlKS50b1N0cmluZygpICsgXCJweFwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjYW52YXMuc3R5bGUoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIChzdmdIZWlnaHQgKiByZW5kZXJJbmZvLmZpeGVkU2NhbGUpLnRvU3RyaW5nKCkgKyBcInB4XCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcmVhcyhcclxuICAgIGNhbnZhczogSFRNTEVsZW1lbnQsXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvXHJcbik6IENoYXJ0RWxlbWVudHMge1xyXG4gICAgbGV0IGNoYXJ0RWxlbWVudHM6IENoYXJ0RWxlbWVudHMgPSB7fTtcclxuICAgIC8vIHdob2xlIGFyZWEgZm9yIHBsb3R0aW5nLCBpbmNsdWRlcyBtYXJnaW5zXHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInN2Z1wiKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcIndpZHRoXCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLndpZHRoICtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubWFyZ2luLmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ucmlnaHRcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0YUFyZWFTaXplLmhlaWdodCArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4uYm90dG9tXHJcbiAgICAgICAgKTtcclxuICAgIGNoYXJ0RWxlbWVudHNbXCJzdmdcIl0gPSBzdmc7XHJcblxyXG4gICAgLy8gZ3JhcGhBcmVhLCBpbmNsdWRlcyBjaGFydEFyZWEsIHRpdGxlLCBsZWdlbmRcclxuICAgIGxldCBncmFwaEFyZWEgPSBzdmdcclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJncmFwaEFyZWFcIilcclxuICAgICAgICAuYXR0cihcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5tYXJnaW4ubGVmdCArXHJcbiAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLm1hcmdpbi50b3AgK1xyXG4gICAgICAgICAgICAgICAgXCIpXCJcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aCArIHJlbmRlckluZm8ubWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgICBcImhlaWdodFwiLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQgKyByZW5kZXJJbmZvLm1hcmdpbi5ib3R0b21cclxuICAgICAgICApO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImdyYXBoQXJlYVwiXSA9IGdyYXBoQXJlYTtcclxuXHJcbiAgICAvLyBkYXRhQXJlYSwgdW5kZXIgZ3JhcGhBcmVhLCBpbmNsdWRlcyBwb2ludHMsIGxpbmVzLCB4QXhpcywgeUF4aXNcclxuICAgIGxldCBkYXRhQXJlYSA9IGdyYXBoQXJlYVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImRhdGFBcmVhXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS53aWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCByZW5kZXJJbmZvLmRhdGFBcmVhU2l6ZS5oZWlnaHQpO1xyXG4gICAgY2hhcnRFbGVtZW50c1tcImRhdGFBcmVhXCJdID0gZGF0YUFyZWE7XHJcblxyXG4gICAgcmV0dXJuIGNoYXJ0RWxlbWVudHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4cGFuZEFyZWEoYXJlYTogYW55LCBhZGRXOiBudW1iZXIsIGFkZEg6IG51bWJlcikge1xyXG4gICAgbGV0IG9yaVdpZHRoID0gcGFyc2VGbG9hdChhcmVhLmF0dHIoXCJ3aWR0aFwiKSkgfCAwO1xyXG4gICAgbGV0IG9yaUhlaWdodCA9IHBhcnNlRmxvYXQoYXJlYS5hdHRyKFwiaGVpZ2h0XCIpKSB8IDA7XHJcbiAgICBsZXQgbmV3V2lkdGggPSBvcmlXaWR0aCArIGFkZFc7XHJcbiAgICBsZXQgbmV3SGVpZ2h0ID0gb3JpSGVpZ2h0ICsgYWRkSDtcclxuICAgIGFyZWEuYXR0cihcIndpZHRoXCIsIG5ld1dpZHRoKTtcclxuICAgIGFyZWEuYXR0cihcImhlaWdodFwiLCBuZXdIZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtb3ZlQXJlYShhcmVhOiBhbnksIHNoaWZ0WDogbnVtYmVyLCBzaGlmdFk6IG51bWJlcikge1xyXG4gICAgbGV0IHRyYW5zID0gbmV3IFRyYW5zZm9ybShhcmVhLmF0dHIoXCJ0cmFuc2Zvcm1cIikpO1xyXG4gICAgYXJlYS5hdHRyKFxyXG4gICAgICAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgICAgXCJ0cmFuc2xhdGUoXCIgK1xyXG4gICAgICAgICAgICAodHJhbnMudHJhbnNsYXRlWCArIHNoaWZ0WCkgK1xyXG4gICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICh0cmFucy50cmFuc2xhdGVZICsgc2hpZnRZKSArXHJcbiAgICAgICAgICAgIFwiKVwiXHJcbiAgICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJMaW5lQ2hhcnQoY2FudmFzOiBIVE1MRWxlbWVudCwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJMaW5lQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmIChyZW5kZXJJbmZvLmxpbmUgPT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY2hhcnRFbGVtZW50cyA9IGNyZWF0ZUFyZWFzKGNhbnZhcywgcmVuZGVySW5mbyk7XHJcblxyXG4gICAgcmVuZGVyVGl0bGUoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbyk7XHJcblxyXG4gICAgcmVuZGVyWEF4aXMoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjaGFydEVsZW1lbnRzLnhBeGlzKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYXJ0RWxlbWVudHMueFNjYWxlKTtcclxuXHJcbiAgICBsZXQgZGF0YXNldE9uTGVmdFlBeGlzID0gW107XHJcbiAgICBsZXQgZGF0YXNldE9uUmlnaHRZQXhpcyA9IFtdO1xyXG4gICAgbGV0IHhEYXRhc2V0SWRzID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXRYRGF0YXNldElkcygpO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgcmVuZGVySW5mby5saW5lLnlBeGlzTG9jYXRpb24ubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgIGlmICh4RGF0YXNldElkcy5pbmNsdWRlcyhpbmQpKSBjb250aW51ZTtcclxuICAgICAgICBsZXQgeUF4aXNMb2NhdGlvbiA9IHJlbmRlckluZm8ubGluZS55QXhpc0xvY2F0aW9uW2luZF07XHJcbiAgICAgICAgaWYgKHlBeGlzTG9jYXRpb24udG9Mb3dlckNhc2UoKSA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgZGF0YXNldE9uTGVmdFlBeGlzLnB1c2goaW5kKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHlBeGlzTG9jYXRpb24udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXMucHVzaChpbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmV0UmVuZGVyTGVmdFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgIGRhdGFzZXRPbkxlZnRZQXhpc1xyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UmVuZGVyTGVmdFlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlckxlZnRZQXhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhcnRFbGVtZW50cy5sZWZ0WUF4aXMgJiYgY2hhcnRFbGVtZW50cy5sZWZ0WVNjYWxlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldElkIG9mIGRhdGFzZXRPbkxlZnRZQXhpcykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJMaW5lKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGRhdGFzZXQsIFwibGVmdFwiKTtcclxuXHJcbiAgICAgICAgICAgIHJlbmRlclBvaW50cyhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBkYXRhc2V0LCBcImxlZnRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXRSZW5kZXJSaWdodFlBeGlzID0gcmVuZGVyWUF4aXMoXHJcbiAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgIFwicmlnaHRcIixcclxuICAgICAgICBkYXRhc2V0T25SaWdodFlBeGlzXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRSZW5kZXJSaWdodFlBeGlzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFJlbmRlclJpZ2h0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMucmlnaHRZQXhpcyAmJiBjaGFydEVsZW1lbnRzLnJpZ2h0WVNjYWxlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YXNldElkIG9mIGRhdGFzZXRPblJpZ2h0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyTGluZShjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvLCBkYXRhc2V0LCBcInJpZ2h0XCIpO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyUG9pbnRzKGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8sIGRhdGFzZXQsIFwicmlnaHRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZW5kZXJJbmZvLmxpbmUuc2hvd0xlZ2VuZCkge1xyXG4gICAgICAgIHJlbmRlckxlZ2VuZChjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDaGFydFNjYWxlKGNhbnZhcywgY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckJhckNoYXJ0KGNhbnZhczogSFRNTEVsZW1lbnQsIHJlbmRlckluZm86IFJlbmRlckluZm8pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyQmFyQ2hhcnRcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvKTtcclxuICAgIGlmIChyZW5kZXJJbmZvLmJhciA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGxldCBjaGFydEVsZW1lbnRzID0gY3JlYXRlQXJlYXMoY2FudmFzLCByZW5kZXJJbmZvKTtcclxuXHJcbiAgICByZW5kZXJUaXRsZShjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxuXHJcbiAgICByZW5kZXJYQXhpcyhjaGFydEVsZW1lbnRzLCByZW5kZXJJbmZvKTtcclxuXHJcbiAgICBsZXQgZGF0YXNldE9uTGVmdFlBeGlzID0gW107XHJcbiAgICBsZXQgZGF0YXNldE9uUmlnaHRZQXhpcyA9IFtdO1xyXG4gICAgbGV0IHhEYXRhc2V0SWRzID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXRYRGF0YXNldElkcygpO1xyXG4gICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgcmVuZGVySW5mby5iYXIueUF4aXNMb2NhdGlvbi5sZW5ndGg7IGluZCsrKSB7XHJcbiAgICAgICAgaWYgKHhEYXRhc2V0SWRzLmluY2x1ZGVzKGluZCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGxldCB5QXhpc0xvY2F0aW9uID0gcmVuZGVySW5mby5iYXIueUF4aXNMb2NhdGlvbltpbmRdO1xyXG4gICAgICAgIGlmICh5QXhpc0xvY2F0aW9uLnRvTG93ZXJDYXNlKCkgPT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgICAgIGRhdGFzZXRPbkxlZnRZQXhpcy5wdXNoKGluZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh5QXhpc0xvY2F0aW9uLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgICAgICAvLyByaWdodFxyXG4gICAgICAgICAgICBkYXRhc2V0T25SaWdodFlBeGlzLnB1c2goaW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldFJlbmRlckxlZnRZQXhpcyA9IHJlbmRlcllBeGlzKFxyXG4gICAgICAgIGNoYXJ0RWxlbWVudHMsXHJcbiAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICBcImxlZnRcIixcclxuICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlckxlZnRZQXhpcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRSZW5kZXJMZWZ0WUF4aXM7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRvdGFsTnVtT2ZCYXJTZXRzID1cclxuICAgICAgICBkYXRhc2V0T25MZWZ0WUF4aXMubGVuZ3RoICsgZGF0YXNldE9uUmlnaHRZQXhpcy5sZW5ndGg7XHJcbiAgICBsZXQgY3VyckJhclNldCA9IDA7XHJcblxyXG4gICAgaWYgKGNoYXJ0RWxlbWVudHMubGVmdFlBeGlzICYmIGNoYXJ0RWxlbWVudHMubGVmdFlTY2FsZSkge1xyXG4gICAgICAgIGZvciAobGV0IGRhdGFzZXRJZCBvZiBkYXRhc2V0T25MZWZ0WUF4aXMpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhc2V0LmdldFF1ZXJ5KCkudXNlZEFzWERhdGFzZXQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyQmFyKFxyXG4gICAgICAgICAgICAgICAgY2hhcnRFbGVtZW50cyxcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0LFxyXG4gICAgICAgICAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICBjdXJyQmFyU2V0LFxyXG4gICAgICAgICAgICAgICAgdG90YWxOdW1PZkJhclNldHNcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJCYXJTZXQrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldFJlbmRlclJpZ2h0WUF4aXMgPSByZW5kZXJZQXhpcyhcclxuICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgIHJlbmRlckluZm8sXHJcbiAgICAgICAgXCJyaWdodFwiLFxyXG4gICAgICAgIGRhdGFzZXRPblJpZ2h0WUF4aXNcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFJlbmRlclJpZ2h0WUF4aXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0UmVuZGVyUmlnaHRZQXhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hhcnRFbGVtZW50cy5yaWdodFlBeGlzICYmIGNoYXJ0RWxlbWVudHMucmlnaHRZU2NhbGUpIHtcclxuICAgICAgICBmb3IgKGxldCBkYXRhc2V0SWQgb2YgZGF0YXNldE9uUmlnaHRZQXhpcykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICAgICAgaWYgKGRhdGFzZXQuZ2V0UXVlcnkoKS51c2VkQXNYRGF0YXNldCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZW5kZXJCYXIoXHJcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXQsXHJcbiAgICAgICAgICAgICAgICBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICBjdXJyQmFyU2V0LFxyXG4gICAgICAgICAgICAgICAgdG90YWxOdW1PZkJhclNldHNcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJCYXJTZXQrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlbmRlckluZm8uYmFyLnNob3dMZWdlbmQpIHtcclxuICAgICAgICByZW5kZXJMZWdlbmQoY2hhcnRFbGVtZW50cywgcmVuZGVySW5mbyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q2hhcnRTY2FsZShjYW52YXMsIGNoYXJ0RWxlbWVudHMsIHJlbmRlckluZm8pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1N1bW1hcnlUZW1wbGF0ZVZhbGlkKHN1bW1hcnlUZW1wbGF0ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxubGV0IGZuU2V0ID0ge1xyXG4gICAgbWluOiBmdW5jdGlvbiAocmVuZGVySW5mbzogUmVuZGVySW5mbywgZGF0YXNldElkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICByZXR1cm4gZDMubWluKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxuICAgIG1heDogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGQzLm1heChkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIH0sXHJcbiAgICBzdW06IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBkMy5zdW0oZGF0YXNldC5nZXRWYWx1ZXMoKSk7XHJcbiAgICB9LFxyXG4gICAgY291bnQ6IGZ1bmN0aW9uIChyZW5kZXJJbmZvOiBSZW5kZXJJbmZvLCBkYXRhc2V0SWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG4gICAgICAgIHJldHVybiBkYXRhc2V0LmdldExlbmd0aE5vdE51bGwoKTtcclxuICAgIH0sXHJcbiAgICBkYXlzOiBmdW5jdGlvbiAocmVuZGVySW5mbzogUmVuZGVySW5mbywgZGF0YXNldElkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZGF0YXNldCA9IHJlbmRlckluZm8uZGF0YXNldHMuZ2V0RGF0YXNldEJ5SWQoZGF0YXNldElkKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YXNldC5nZXRMZW5ndGgoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIG1heFN0cmVhazogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IG1heFN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgZm9yIChsZXQgZGF0YVBvaW50IG9mIGRhdGFzZXQpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFQb2ludC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc3RyZWFrKys7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYWsgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJlYWsgPiBtYXhTdHJlYWspIHtcclxuICAgICAgICAgICAgICAgIG1heFN0cmVhayA9IHN0cmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4U3RyZWFrO1xyXG4gICAgfSxcclxuICAgIG1heEJyZWFrOiBmdW5jdGlvbiAocmVuZGVySW5mbzogUmVuZGVySW5mbywgZGF0YXNldElkOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgc3RyZWFrID0gMDtcclxuICAgICAgICBsZXQgbWF4QnJlYWsgPSAwO1xyXG4gICAgICAgIGxldCBkYXRhc2V0ID0gcmVuZGVySW5mby5kYXRhc2V0cy5nZXREYXRhc2V0QnlJZChkYXRhc2V0SWQpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBkYXRhUG9pbnQgb2YgZGF0YXNldCkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YVBvaW50LnZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYWsrKztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhayA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cmVhayA+IG1heEJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhCcmVhayA9IHN0cmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF4QnJlYWs7XHJcbiAgICB9LFxyXG4gICAgbGFzdFN0cmVhazogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHN0cmVhayA9IDA7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IGRhdGFzZXQuZ2V0VmFsdWVzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gdmFsdWVzLmxlbmd0aCAtIDE7IGluZCA+PSAwOyBpbmQtLSkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaW5kXTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhaysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJlYWs7XHJcbiAgICB9LFxyXG4gICAgYXZlcmFnZTogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgbGV0IGNvdW50Tm90TnVsbCA9IGRhdGFzZXQuZ2V0TGVuZ3RoTm90TnVsbCgpO1xyXG4gICAgICAgIGlmIChjb3VudE5vdE51bGwgPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBzdW0gPSBkMy5zdW0oZGF0YXNldC5nZXRWYWx1ZXMoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdW0gLyBjb3VudE5vdE51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuICAgIG1lZGlhbjogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGQzLm1lZGlhbihkYXRhc2V0LmdldFZhbHVlcygpKTtcclxuICAgIH0sXHJcbiAgICB2YXJpYW5jZTogZnVuY3Rpb24gKHJlbmRlckluZm86IFJlbmRlckluZm8sIGRhdGFzZXRJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGFzZXQgPSByZW5kZXJJbmZvLmRhdGFzZXRzLmdldERhdGFzZXRCeUlkKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGQzLnZhcmlhbmNlKGRhdGFzZXQuZ2V0VmFsdWVzKCkpO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlclN1bW1hcnkoY2FudmFzOiBIVE1MRWxlbWVudCwgcmVuZGVySW5mbzogUmVuZGVySW5mbykge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJTdW1tYXJ5XCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mbyk7XHJcbiAgICBpZiAocmVuZGVySW5mby5zdW1tYXJ5ID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgbGV0IG91dHB1dFN1bW1hcnkgPSBcIlwiO1xyXG4gICAgaWYgKGNoZWNrU3VtbWFyeVRlbXBsYXRlVmFsaWQocmVuZGVySW5mby5zdW1tYXJ5LnRlbXBsYXRlKSkge1xyXG4gICAgICAgIG91dHB1dFN1bW1hcnkgPSByZW5kZXJJbmZvLnN1bW1hcnkudGVtcGxhdGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIkludmFsaWQgc3VtbWFyeSB0ZW1wbGF0ZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXBsYWNlTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcbiAgICAvLyBMb29wIG92ZXIgZm5TZXQsIHByZXBhcmUgcmVwbGFjZU1hcFxyXG4gICAgT2JqZWN0LmVudHJpZXMoZm5TZXQpLmZvckVhY2goKFtmbk5hbWUsIGZuXSkgPT4ge1xyXG4gICAgICAgIC8vIHt7XFxzKm1heChcXChcXHMqRGF0YXNldFxcKFxccyooPzxkYXRhc2V0SWQ+XFxkKylcXHMqXFwpXFxzKlxcKSk/XFxzKn19XHJcbiAgICAgICAgbGV0IHN0clJlZ2V4ID1cclxuICAgICAgICAgICAgXCJ7e1xcXFxzKlwiICtcclxuICAgICAgICAgICAgZm5OYW1lICtcclxuICAgICAgICAgICAgXCIoXFxcXChcXFxccypEYXRhc2V0XFxcXChcXFxccyooKD88ZGF0YXNldElkPlxcXFxkKyl8KD88ZGF0YXNldE5hbWU+XFxcXHcrKSlcXFxccypcXFxcKVxcXFxzKlxcXFwpKT9cXFxccyp9fVwiO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0clJlZ2V4KTtcclxuICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHN0clJlZ2V4LCBcImdtXCIpO1xyXG4gICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhvdXRwdXRTdW1tYXJ5KSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuZGF0YXNldElkICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFzZXRJZCA9IHBhcnNlSW50KG1hdGNoLmdyb3Vwcy5kYXRhc2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZGF0YXNldElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyUmVwbGFjZVJlZ2V4ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwie3tcXFxccypcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbk5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIoXFxcXChcXFxccypEYXRhc2V0XFxcXChcXFxccypcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SWQudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXFxzKlxcXFwpXFxcXHMqXFxcXCkpP1xcXFxzKn19XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShzdHJSZXBsYWNlUmVnZXggaW4gcmVwbGFjZU1hcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBmbihyZW5kZXJJbmZvLCBkYXRhc2V0SWQpOyAvLyBjYWxjdWxhdGUgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyUmVzdWx0ID0gXCJ7e05BfX1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzdWx0ICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICE9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IHJlc3VsdC50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IHJlc3VsdC50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlTWFwW3N0clJlcGxhY2VSZWdleF0gPSBzdHJSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXRjaC5ncm91cHMuZGF0YXNldE5hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YXNldE5hbWUgPSBtYXRjaC5ncm91cHMuZGF0YXNldE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YXNldE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXBsYWNlUmVnZXggPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInt7XFxcXHMqXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbk5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIihcXFxcKFxcXFxzKkRhdGFzZXRcXFxcKFxcXFxzKlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldE5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcXFxzKlxcXFwpXFxcXHMqXFxcXCkpP1xcXFxzKn19XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhc2V0SWQgPSByZW5kZXJJbmZvLmRhdGFzZXROYW1lLmluZGV4T2YoZGF0YXNldE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzZXROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmRhdGFzZXROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhc2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHN0clJlcGxhY2VSZWdleCBpbiByZXBsYWNlTWFwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyUmVzdWx0ID0gXCJ7e05BfX1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXRJZCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm4ocmVuZGVySW5mbywgZGF0YXNldElkKTsgLy8gY2FsY3VsYXRlIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyUmVzdWx0ID0gcmVzdWx0LnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VNYXBbc3RyUmVwbGFjZVJlZ2V4XSA9IHN0clJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIGRhdGFzZXRJZCBhc3NpZ25lZCB1c2UgaWQgMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwie3tcIiArIGZuTmFtZSArIFwifX1cIilcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyUmVwbGFjZVJlZ2V4ID0gXCJ7e1xcXFxzKlwiICsgZm5OYW1lICsgXCJcXFxccyp9fVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHN0clJlcGxhY2VSZWdleCBpbiByZXBsYWNlTWFwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZm4ocmVuZGVySW5mbywgMCk7IC8vIGNhbGN1bGF0ZSByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0clJlc3VsdCA9IFwie3tOQX19XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IHJlc3VsdC50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXN1bHQgPSByZXN1bHQudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZU1hcFtzdHJSZXBsYWNlUmVnZXhdID0gc3RyUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGdyb3VwcyB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIC8vIG5vIGRhdGFzZXRJZCBhc3NpZ25lZCB1c2UgaWQgMFxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ7e1wiICsgZm5OYW1lICsgXCJ9fVwiKVxyXG4gICAgICAgICAgICAgICAgbGV0IHN0clJlcGxhY2VSZWdleCA9IFwie3tcXFxccypcIiArIGZuTmFtZSArIFwiXFxcXHMqfX1cIjtcclxuICAgICAgICAgICAgICAgIGlmICghKHN0clJlcGxhY2VSZWdleCBpbiByZXBsYWNlTWFwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBmbihyZW5kZXJJbmZvLCAwKTsgLy8gY2FsY3VsYXRlIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHJSZXN1bHQgPSBcInt7TkF9fVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJSZXN1bHQgPSByZXN1bHQudG9GaXhlZCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clJlc3VsdCA9IHJlc3VsdC50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlTWFwW3N0clJlcGxhY2VSZWdleF0gPSBzdHJSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlcGxhY2VNYXApO1xyXG4gICAgLy8gRG8gcmVwbGFjZVxyXG4gICAgZm9yIChsZXQgc3RyUmVwbGFjZVJlZ2V4IGluIHJlcGxhY2VNYXApIHtcclxuICAgICAgICBsZXQgc3RyUmVzdWx0ID0gcmVwbGFjZU1hcFtzdHJSZXBsYWNlUmVnZXhdO1xyXG4gICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoc3RyUmVwbGFjZVJlZ2V4LCBcImdpXCIpO1xyXG4gICAgICAgIG91dHB1dFN1bW1hcnkgPSBvdXRwdXRTdW1tYXJ5LnJlcGxhY2UocmVnZXgsIHN0clJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG91dHB1dFN1bW1hcnkgIT09IFwiXCIpIHtcclxuICAgICAgICBsZXQgdGV4dEJsb2NrID0gZDMuc2VsZWN0KGNhbnZhcykuYXBwZW5kKFwiZGl2XCIpO1xyXG4gICAgICAgIGlmIChvdXRwdXRTdW1tYXJ5LmluY2x1ZGVzKFwiXFxuXCIpKSB7XHJcbiAgICAgICAgICAgIGxldCBvdXRwdXRMaW5lcyA9IG91dHB1dFN1bW1hcnkuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG91dHB1dExpbmUgb2Ygb3V0cHV0TGluZXMpIHtcclxuICAgICAgICAgICAgICAgIHRleHRCbG9jay5hcHBlbmQoXCJkaXZcIikudGV4dChvdXRwdXRMaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRleHRCbG9jay50ZXh0KG91dHB1dFN1bW1hcnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uc3VtbWFyeS5zdHlsZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0ZXh0QmxvY2suYXR0cihcInN0eWxlXCIsIHJlbmRlckluZm8uc3VtbWFyeS5zdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhczogSFRNTEVsZW1lbnQsIGVycm9yTWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBsZXQgc3ZnID0gZDNcclxuICAgICAgICAuc2VsZWN0KGNhbnZhcylcclxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgLnRleHQoZXJyb3JNZXNzYWdlKVxyXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgXCJ3aGl0ZVwiKVxyXG4gICAgICAgIC5zdHlsZShcIm1hcmdpbi1ib3R0b21cIiwgXCIyMHB4XCIpXHJcbiAgICAgICAgLnN0eWxlKFwicGFkZGluZ1wiLCBcIjEwcHhcIilcclxuICAgICAgICAuc3R5bGUoXCJjb2xvclwiLCBcInJlZFwiKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IG1pbjtcbiAgbGV0IG1heDtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPj0gdmFsdWUpIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh2YWx1ZSA+PSB2YWx1ZSkgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7XG4gIGV2ZW50ID0gc291cmNlRXZlbnQoZXZlbnQpO1xuICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSBub2RlID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgaWYgKG5vZGUpIHtcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcbiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gICAgfVxuICAgIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBbZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGxldCBzb3VyY2VFdmVudDtcbiAgd2hpbGUgKHNvdXJjZUV2ZW50ID0gZXZlbnQuc291cmNlRXZlbnQpIGV2ZW50ID0gc291cmNlRXZlbnQ7XG4gIHJldHVybiBldmVudDtcbn1cbiIsImltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgcmV0dXJuIHF1YW50aWxlKHZhbHVlcywgMC41LCB2YWx1ZW9mKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhcmlhbmNlKHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgZGVsdGE7XG4gIGxldCBtZWFuID0gMDtcbiAgbGV0IHN1bSA9IDA7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK2NvdW50O1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKytjb3VudDtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChjb3VudCA+IDEpIHJldHVybiBzdW0gLyAoY291bnQgLSAxKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIG9ic2lkaWFuID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcblxuY29uc3QgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTS1ERFwiO1xuY29uc3QgREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQgPSBcImdnZ2ctW1ddd3dcIjtcbmNvbnN0IERFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1NTVwiO1xuXG5mdW5jdGlvbiBzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MocGVyaW9kaWNpdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSB3aW5kb3cuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8uW3BlcmlvZGljaXR5XT8uZW5hYmxlZDtcbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBkYWlseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgeyBpbnRlcm5hbFBsdWdpbnMsIHBsdWdpbnMgfSA9IHdpbmRvdy5hcHA7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJkYWlseVwiKSkge1xuICAgICAgICAgICAgY29uc3QgeyBmb3JtYXQsIGZvbGRlciwgdGVtcGxhdGUgfSA9IHBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy5kYWlseSB8fCB7fTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IGZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBmb2xkZXIsIGZvcm1hdCwgdGVtcGxhdGUgfSA9IGludGVybmFsUGx1Z2lucy5nZXRQbHVnaW5CeUlkKFwiZGFpbHktbm90ZXNcIik/Lmluc3RhbmNlPy5vcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIGRhaWx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHdlZWtseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgICAgIGNvbnN0IGNhbGVuZGFyU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcImNhbGVuZGFyXCIpPy5vcHRpb25zO1xuICAgICAgICBjb25zdCBwZXJpb2RpY05vdGVzU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpXG4gICAgICAgICAgICA/LnNldHRpbmdzPy53ZWVrbHk7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJ3ZWVrbHlcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBwZXJpb2RpY05vdGVzU2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgICAgIGZvbGRlcjogcGVyaW9kaWNOb3Rlc1NldHRpbmdzLmZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHBlcmlvZGljTm90ZXNTZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gY2FsZW5kYXJTZXR0aW5ncyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvcm1hdCB8fCBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3Mud2Vla2x5Tm90ZUZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2V0dGluZ3Mud2Vla2x5Tm90ZVRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gd2Vla2x5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHBlcmlvZGljLW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJtb250aGx5XCIpICYmXG4gICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ubW9udGhseSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBzZXR0aW5ncy5mb3JtYXQgfHwgREVGQVVMVF9NT05USExZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gbW9udGhseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cblxuLy8gQ3JlZGl0OiBAY3JlYXRpb25peC9wYXRoLmpzXG5mdW5jdGlvbiBqb2luKC4uLnBhcnRTZWdtZW50cykge1xuICAgIC8vIFNwbGl0IHRoZSBpbnB1dHMgaW50byBhIGxpc3Qgb2YgcGF0aCBjb21tYW5kcy5cbiAgICBsZXQgcGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRTZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFydHMgPSBwYXJ0cy5jb25jYXQocGFydFNlZ21lbnRzW2ldLnNwbGl0KFwiL1wiKSk7XG4gICAgfVxuICAgIC8vIEludGVycHJldCB0aGUgcGF0aCBjb21tYW5kcyB0byBnZXQgdGhlIG5ldyByZXNvbHZlZCBwYXRoLlxuICAgIGNvbnN0IG5ld1BhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlc1xuICAgICAgICAvLyBBbHNvIHJlbW92ZSBcIi5cIiBzZWdtZW50c1xuICAgICAgICBpZiAoIXBhcnQgfHwgcGFydCA9PT0gXCIuXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gUHVzaCBuZXcgcGF0aCBzZWdtZW50cy5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV3UGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gICAgLy8gUHJlc2VydmUgdGhlIGluaXRpYWwgc2xhc2ggaWYgdGhlcmUgd2FzIG9uZS5cbiAgICBpZiAocGFydHNbMF0gPT09IFwiXCIpXG4gICAgICAgIG5ld1BhcnRzLnVuc2hpZnQoXCJcIik7XG4gICAgLy8gVHVybiBiYWNrIGludG8gYSBzaW5nbGUgc3RyaW5nIHBhdGguXG4gICAgcmV0dXJuIG5ld1BhcnRzLmpvaW4oXCIvXCIpO1xufVxuZnVuY3Rpb24gYmFzZW5hbWUoZnVsbFBhdGgpIHtcbiAgICBsZXQgYmFzZSA9IGZ1bGxQYXRoLnN1YnN0cmluZyhmdWxsUGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICBpZiAoYmFzZS5sYXN0SW5kZXhPZihcIi5cIikgIT0gLTEpXG4gICAgICAgIGJhc2UgPSBiYXNlLnN1YnN0cmluZygwLCBiYXNlLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgcmV0dXJuIGJhc2U7XG59XG5hc3luYyBmdW5jdGlvbiBlbnN1cmVGb2xkZXJFeGlzdHMocGF0aCkge1xuICAgIGNvbnN0IGRpcnMgPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBkaXJzLnBvcCgpOyAvLyByZW1vdmUgYmFzZW5hbWVcbiAgICBpZiAoZGlycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGlyID0gam9pbiguLi5kaXJzKTtcbiAgICAgICAgaWYgKCF3aW5kb3cuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkaXIpKSB7XG4gICAgICAgICAgICBhd2FpdCB3aW5kb3cuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihkaXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZ2V0Tm90ZVBhdGgoZGlyZWN0b3J5LCBmaWxlbmFtZSkge1xuICAgIGlmICghZmlsZW5hbWUuZW5kc1dpdGgoXCIubWRcIikpIHtcbiAgICAgICAgZmlsZW5hbWUgKz0gXCIubWRcIjtcbiAgICB9XG4gICAgY29uc3QgcGF0aCA9IG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoam9pbihkaXJlY3RvcnksIGZpbGVuYW1lKSk7XG4gICAgYXdhaXQgZW5zdXJlRm9sZGVyRXhpc3RzKHBhdGgpO1xuICAgIHJldHVybiBwYXRoO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKSB7XG4gICAgY29uc3QgeyBtZXRhZGF0YUNhY2hlLCB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBvYnNpZGlhbi5ub3JtYWxpemVQYXRoKHRlbXBsYXRlKTtcbiAgICBpZiAodGVtcGxhdGVQYXRoID09PSBcIi9cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtcIlwiLCBudWxsXSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRmlsZSA9IG1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QodGVtcGxhdGVQYXRoLCBcIlwiKTtcbiAgICAgICAgY29uc3QgY29udGVudHMgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHRlbXBsYXRlRmlsZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IElGb2xkSW5mbyA9IHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIubG9hZCh0ZW1wbGF0ZUZpbGUpO1xuICAgICAgICByZXR1cm4gW2NvbnRlbnRzLCBJRm9sZEluZm9dO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlICcke3RlbXBsYXRlUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIkZhaWxlZCB0byByZWFkIHRoZSBkYWlseSBub3RlIHRlbXBsYXRlXCIpO1xuICAgICAgICByZXR1cm4gW1wiXCIsIG51bGxdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBkYXRlVUlEIGlzIGEgd2F5IG9mIHdlZWtseSBpZGVudGlmeWluZyBkYWlseS93ZWVrbHkvbW9udGhseSBub3Rlcy5cbiAqIFRoZXkgYXJlIHByZWZpeGVkIHdpdGggdGhlIGdyYW51bGFyaXR5IHRvIGF2b2lkIGFtYmlndWl0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0ZVVJRChkYXRlLCBncmFudWxhcml0eSA9IFwiZGF5XCIpIHtcbiAgICBjb25zdCB0cyA9IGRhdGUuY2xvbmUoKS5zdGFydE9mKGdyYW51bGFyaXR5KS5mb3JtYXQoKTtcbiAgICByZXR1cm4gYCR7Z3JhbnVsYXJpdHl9LSR7dHN9YDtcbn1cbmZ1bmN0aW9uIHJlbW92ZUVzY2FwZWRDaGFyYWN0ZXJzKGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFxbW15cXF1dKlxcXS9nLCBcIlwiKTsgLy8gcmVtb3ZlIGV2ZXJ5dGhpbmcgd2l0aGluIGJyYWNrZXRzXG59XG4vKipcbiAqIFhYWDogV2hlbiBwYXJzaW5nIGRhdGVzIHRoYXQgY29udGFpbiBib3RoIHdlZWsgbnVtYmVycyBhbmQgbW9udGhzLFxuICogTW9tZW50IGNob3NlcyB0byBpZ25vcmUgdGhlIHdlZWsgbnVtYmVycy4gRm9yIHRoZSB3ZWVrIGRhdGVVSUQsIHdlXG4gKiB3YW50IHRoZSBvcHBvc2l0ZSBiZWhhdmlvci4gU3RyaXAgdGhlIE1NTSBmcm9tIHRoZSBmb3JtYXQgdG8gcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybWF0QW1iaWd1b3VzKGZvcm1hdCwgZ3JhbnVsYXJpdHkpIHtcbiAgICBpZiAoZ3JhbnVsYXJpdHkgPT09IFwid2Vla1wiKSB7XG4gICAgICAgIGNvbnN0IGNsZWFuRm9ybWF0ID0gcmVtb3ZlRXNjYXBlZENoYXJhY3RlcnMoZm9ybWF0KTtcbiAgICAgICAgcmV0dXJuICgvd3sxLDJ9L2kudGVzdChjbGVhbkZvcm1hdCkgJiZcbiAgICAgICAgICAgICgvTXsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSB8fCAvRHsxLDR9Ly50ZXN0KGNsZWFuRm9ybWF0KSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbUZpbGUoZmlsZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlLmJhc2VuYW1lLCBncmFudWxhcml0eSk7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbVBhdGgocGF0aCwgZ3JhbnVsYXJpdHkpIHtcbiAgICByZXR1cm4gZ2V0RGF0ZUZyb21GaWxlbmFtZShiYXNlbmFtZShwYXRoKSwgZ3JhbnVsYXJpdHkpO1xufVxuZnVuY3Rpb24gZ2V0RGF0ZUZyb21GaWxlbmFtZShmaWxlbmFtZSwgZ3JhbnVsYXJpdHkpIHtcbiAgICBjb25zdCBnZXRTZXR0aW5ncyA9IHtcbiAgICAgICAgZGF5OiBnZXREYWlseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgd2VlazogZ2V0V2Vla2x5Tm90ZVNldHRpbmdzLFxuICAgICAgICBtb250aDogZ2V0TW9udGhseU5vdGVTZXR0aW5ncyxcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdCA9IGdldFNldHRpbmdzW2dyYW51bGFyaXR5XSgpLmZvcm1hdC5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgY29uc3Qgbm90ZURhdGUgPSB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBmb3JtYXQsIHRydWUpO1xuICAgIGlmICghbm90ZURhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNGb3JtYXRBbWJpZ3VvdXMoZm9ybWF0LCBncmFudWxhcml0eSkpIHtcbiAgICAgICAgaWYgKGdyYW51bGFyaXR5ID09PSBcIndlZWtcIikge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5Gb3JtYXQgPSByZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyhmb3JtYXQpO1xuICAgICAgICAgICAgaWYgKC93ezEsMn0vaS50ZXN0KGNsZWFuRm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBcbiAgICAgICAgICAgICAgICAvLyBJZiBmb3JtYXQgY29udGFpbnMgd2VlaywgcmVtb3ZlIGRheSAmIG1vbnRoIGZvcm1hdHRpbmdcbiAgICAgICAgICAgICAgICBmb3JtYXQucmVwbGFjZSgvTXsxLDR9L2csIFwiXCIpLnJlcGxhY2UoL0R7MSw0fS9nLCBcIlwiKSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3RlRGF0ZTtcbn1cblxuY2xhc3MgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGFpbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCBhcHAgPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IGFwcDtcbiAgICBjb25zdCBtb21lbnQgPSB3aW5kb3cubW9tZW50O1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIG1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBtb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnllc3RlcmRheVxccyp9fS9naSwgZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsIFwiZGF5XCIpLmZvcm1hdChmb3JtYXQpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRvbW9ycm93XFxzKn19L2dpLCBkYXRlLmNsb25lKCkuYWRkKDEsIFwiZFwiKS5mb3JtYXQoZm9ybWF0KSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBhcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXREYWlseU5vdGUoZGF0ZSwgZGFpbHlOb3Rlcykge1xuICAgIHJldHVybiBkYWlseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJkYXlcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxEYWlseU5vdGVzKCkge1xuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGRhaWx5IG5vdGVzIGluIHRoZSBkYWlseSBub3RlIGZvbGRlclxuICAgICAqL1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgZGFpbHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghZGFpbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIGRhaWx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgY29uc3QgZGFpbHlOb3RlcyA9IHt9O1xuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbihkYWlseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwiZGF5XCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcImRheVwiKTtcbiAgICAgICAgICAgICAgICBkYWlseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYWlseU5vdGVzO1xufVxuXG5jbGFzcyBXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmZ1bmN0aW9uIGdldERheXNPZldlZWsoKSB7XG4gICAgY29uc3QgeyBtb21lbnQgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCB3ZWVrU3RhcnQgPSBtb21lbnQubG9jYWxlRGF0YSgpLl93ZWVrLmRvdztcbiAgICBjb25zdCBkYXlzT2ZXZWVrID0gW1xuICAgICAgICBcInN1bmRheVwiLFxuICAgICAgICBcIm1vbmRheVwiLFxuICAgICAgICBcInR1ZXNkYXlcIixcbiAgICAgICAgXCJ3ZWRuZXNkYXlcIixcbiAgICAgICAgXCJ0aHVyc2RheVwiLFxuICAgICAgICBcImZyaWRheVwiLFxuICAgICAgICBcInNhdHVyZGF5XCIsXG4gICAgXTtcbiAgICB3aGlsZSAod2Vla1N0YXJ0KSB7XG4gICAgICAgIGRheXNPZldlZWsucHVzaChkYXlzT2ZXZWVrLnNoaWZ0KCkpO1xuICAgICAgICB3ZWVrU3RhcnQtLTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXNPZldlZWs7XG59XG5mdW5jdGlvbiBnZXREYXlPZldlZWtOdW1lcmljYWxWYWx1ZShkYXlPZldlZWtOYW1lKSB7XG4gICAgcmV0dXJuIGdldERheXNPZldlZWsoKS5pbmRleE9mKGRheU9mV2Vla05hbWUudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVXZWVrbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSlcXHMqOiguKj8pfX0vZ2ksIChfLCBkYXlPZldlZWssIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF5ID0gZ2V0RGF5T2ZXZWVrTnVtZXJpY2FsVmFsdWUoZGF5T2ZXZWVrKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLndlZWtkYXkoZGF5KS5mb3JtYXQobW9tZW50Rm9ybWF0LnRyaW0oKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlZWtseU5vdGUoZGF0ZSwgd2Vla2x5Tm90ZXMpIHtcbiAgICByZXR1cm4gd2Vla2x5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxXZWVrbHlOb3RlcygpIHtcbiAgICBjb25zdCB3ZWVrbHlOb3RlcyA9IHt9O1xuICAgIGlmICghYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gd2Vla2x5Tm90ZXM7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldFdlZWtseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IHdlZWtseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCF3ZWVrbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgV2Vla2x5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCB3ZWVrbHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4od2Vla2x5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJ3ZWVrXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIik7XG4gICAgICAgICAgICAgICAgd2Vla2x5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHdlZWtseU5vdGVzO1xufVxuXG5jbGFzcyBNb250aGx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU1vbnRobHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TW9udGhseU5vdGUoZGF0ZSwgbW9udGhseU5vdGVzKSB7XG4gICAgcmV0dXJuIG1vbnRobHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxNb250aGx5Tm90ZXMoKSB7XG4gICAgY29uc3QgbW9udGhseU5vdGVzID0ge307XG4gICAgaWYgKCFhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gbW9udGhseU5vdGVzO1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgbW9udGhseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCFtb250aGx5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1vbnRobHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIG1vbnRobHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4obW9udGhseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICAgICAgbW9udGhseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtb250aGx5Tm90ZXM7XG59XG5cbmZ1bmN0aW9uIGFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IGRhaWx5Tm90ZXNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXTtcbiAgICBpZiAoZGFpbHlOb3Rlc1BsdWdpbiAmJiBkYWlseU5vdGVzUGx1Z2luLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LmRhaWx5Py5lbmFibGVkO1xufVxuLyoqXG4gKiBYWFg6IFwiV2Vla2x5IE5vdGVzXCIgbGl2ZSBpbiBlaXRoZXIgdGhlIENhbGVuZGFyIHBsdWdpbiBvciB0aGUgcGVyaW9kaWMtbm90ZXMgcGx1Z2luLlxuICogQ2hlY2sgYm90aCB1bnRpbCB0aGUgd2Vla2x5IG5vdGVzIGZlYXR1cmUgaXMgcmVtb3ZlZCBmcm9tIHRoZSBDYWxlbmRhciBwbHVnaW4uXG4gKi9cbmZ1bmN0aW9uIGFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBpZiAoYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwiY2FsZW5kYXJcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LndlZWtseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/Lm1vbnRobHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBnZXRQZXJpb2RpY05vdGVTZXR0aW5ncyhncmFudWxhcml0eSkge1xuICAgIGNvbnN0IGdldFNldHRpbmdzID0ge1xuICAgICAgICBkYXk6IGdldERhaWx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB3ZWVrOiBnZXRXZWVrbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIG1vbnRoOiBnZXRNb250aGx5Tm90ZVNldHRpbmdzLFxuICAgIH1bZ3JhbnVsYXJpdHldO1xuICAgIHJldHVybiBnZXRTZXR0aW5ncygpO1xufVxuZnVuY3Rpb24gY3JlYXRlUGVyaW9kaWNOb3RlKGdyYW51bGFyaXR5LCBkYXRlKSB7XG4gICAgY29uc3QgY3JlYXRlRm4gPSB7XG4gICAgICAgIGRheTogY3JlYXRlRGFpbHlOb3RlLFxuICAgICAgICBtb250aDogY3JlYXRlTW9udGhseU5vdGUsXG4gICAgICAgIHdlZWs6IGNyZWF0ZVdlZWtseU5vdGUsXG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlRm5bZ3JhbnVsYXJpdHldKGRhdGUpO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFUID0gREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLmFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmNyZWF0ZURhaWx5Tm90ZSA9IGNyZWF0ZURhaWx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlTW9udGhseU5vdGUgPSBjcmVhdGVNb250aGx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlUGVyaW9kaWNOb3RlID0gY3JlYXRlUGVyaW9kaWNOb3RlO1xuZXhwb3J0cy5jcmVhdGVXZWVrbHlOb3RlID0gY3JlYXRlV2Vla2x5Tm90ZTtcbmV4cG9ydHMuZ2V0QWxsRGFpbHlOb3RlcyA9IGdldEFsbERhaWx5Tm90ZXM7XG5leHBvcnRzLmdldEFsbE1vbnRobHlOb3RlcyA9IGdldEFsbE1vbnRobHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsV2Vla2x5Tm90ZXMgPSBnZXRBbGxXZWVrbHlOb3RlcztcbmV4cG9ydHMuZ2V0RGFpbHlOb3RlID0gZ2V0RGFpbHlOb3RlO1xuZXhwb3J0cy5nZXREYWlseU5vdGVTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXREYXRlRnJvbUZpbGUgPSBnZXREYXRlRnJvbUZpbGU7XG5leHBvcnRzLmdldERhdGVGcm9tUGF0aCA9IGdldERhdGVGcm9tUGF0aDtcbmV4cG9ydHMuZ2V0RGF0ZVVJRCA9IGdldERhdGVVSUQ7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlID0gZ2V0TW9udGhseU5vdGU7XG5leHBvcnRzLmdldE1vbnRobHlOb3RlU2V0dGluZ3MgPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRQZXJpb2RpY05vdGVTZXR0aW5ncyA9IGdldFBlcmlvZGljTm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRUZW1wbGF0ZUluZm8gPSBnZXRUZW1wbGF0ZUluZm87XG5leHBvcnRzLmdldFdlZWtseU5vdGUgPSBnZXRXZWVrbHlOb3RlO1xuZXhwb3J0cy5nZXRXZWVrbHlOb3RlU2V0dGluZ3MgPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3M7XG4iLCJpbXBvcnQgVHJhY2tlciBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7XHJcbiAgICBTZWFyY2hUeXBlLFxyXG4gICAgQmFySW5mbyxcclxuICAgIENvbW1vbkNoYXJ0SW5mbyxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFN1bW1hcnlJbmZvLFxyXG4gICAgTWFyZ2luLFxyXG4gICAgT3V0cHV0VHlwZSxcclxuICAgIExpbmVJbmZvLFxyXG59IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0IHsgVEZvbGRlciwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBwYXJzZVlhbWwgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgZ2V0RGFpbHlOb3RlU2V0dGluZ3MgfSBmcm9tIFwib2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlXCI7XHJcblxyXG5mdW5jdGlvbiBzdHJUb0Jvb2woc3RyOiBzdHJpbmcpOiBib29sZWFuIHwgbnVsbCB7XHJcbiAgICBzdHIgPSBzdHIudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBzd2l0Y2ggKHN0cikge1xyXG4gICAgICAgIGNhc2UgXCJ0cnVlXCI6XHJcbiAgICAgICAgY2FzZSBcIjFcIjpcclxuICAgICAgICBjYXNlIFwib25cIjpcclxuICAgICAgICBjYXNlIFwieWVzXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGNhc2UgXCJmYWxzZVwiOlxyXG4gICAgICAgIGNhc2UgXCIwXCI6XHJcbiAgICAgICAgY2FzZSBcIm9mZlwiOlxyXG4gICAgICAgIGNhc2UgXCJub1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVTZWFyY2hUeXBlKHNlYXJjaFR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKFxyXG4gICAgICAgIHNlYXJjaFR5cGUgPT09IFwidGFnXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlID09PSBcInRleHRcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUgPT09IFwiZnJvbnRtYXR0ZXJcIiB8fFxyXG4gICAgICAgIHNlYXJjaFR5cGUgPT09IFwid2lraVwiIHx8XHJcbiAgICAgICAgc2VhcmNoVHlwZSA9PT0gXCJkdkZpZWxkXCIgfHxcclxuICAgICAgICBzZWFyY2hUeXBlID09PSBcInRhYmxlXCJcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVlBeGlzTG9jYXRpb24obG9jYXRpb246IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGxvY2F0aW9uID09PSBcImxlZnRcIiB8fCBsb2NhdGlvbiA9PT0gXCJyaWdodFwiIHx8IGxvY2F0aW9uID09PSBcIm5vbmVcIikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgbnVtRGF0YXNldDogbnVtYmVyLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBib29sZWFuLFxyXG4gICAgYWxsb3dOb1ZhbGlkVmFsdWU6IGJvb2xlYW5cclxuKTogQXJyYXk8Ym9vbGVhbj4gfCBzdHJpbmcge1xyXG4gICAgbGV0IGFycmF5OiBBcnJheTxib29sZWFuPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBpbnB1dFtpbnB1dC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBzcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHNwbGl0dGVkW2luZF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc3RyVG9Cb29sKHNwbGl0dGVkW2luZCAtIDFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJvb2wgPSBzdHJUb0Jvb2woY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyQm9vbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnJCb29sO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IHN0clRvQm9vbChzcGxpdHRlZFtzcGxpdHRlZC5sZW5ndGggLSAxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1WYWxpZFZhbHVlID4gMCAmJiBsYXN0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGwgZGVmYXVsdFZhbHVlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRCb29sID0gc3RyVG9Cb29sKGlucHV0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dEJvb2wgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0Qm9vbDtcclxuICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXRCb29sO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgYXJyYXlbMF0gPSBpbnB1dDtcclxuICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kID0gMTsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICBhcnJheVtpbmRdID0gaW5wdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhbGxvd05vVmFsaWRWYWx1ZSAmJiBudW1WYWxpZFZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJObyB2YWxpZCBpbnB1dCBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgbnVtRGF0YXNldDogbnVtYmVyLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBudW1iZXIsXHJcbiAgICBhbGxvd05vVmFsaWRWYWx1ZTogYm9vbGVhblxyXG4pOiBBcnJheTxudW1iZXI+IHwgc3RyaW5nIHtcclxuICAgIGxldCBhcnJheTogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1WYWxpZFZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gbGFzdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGV0IHNwbGl0dGVkID0gaW5wdXQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kID0gMDsgaW5kIDwgYXJyYXkubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZCA8IHNwbGl0dGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gc3BsaXR0ZWRbaW5kXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBwYXJzZUZsb2F0KHNwbGl0dGVkW2luZCAtIDFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsICYmIE51bWJlci5pc051bWJlcihwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJOdW0gPSBwYXJzZUZsb2F0KGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGN1cnJOdW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gY3Vyck51bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFeGNlZWRzIHRoZSBsZW5ndGggb2YgaW5wdXQsIHVzZSBwcmV2IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBwYXJzZUZsb2F0KHNwbGl0dGVkW2lucHV0Lmxlbmd0aCAtIDFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bVZhbGlkVmFsdWUgPiAwICYmIE51bWJlci5pc051bWJlcihsYXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gbGFzdDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGRlZmF1bHRWYWx1ZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFyc2VGbG9hdChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGlucHV0TnVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5WzBdID0gaW5wdXROdW07XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0TnVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKGlucHV0KSkge1xyXG4gICAgICAgICAgICBhcnJheVswXSA9IGlucHV0O1xyXG4gICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFsbG93Tm9WYWxpZFZhbHVlICYmIG51bVZhbGlkVmFsdWUgPT09IDApIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHZhbGlkIGlucHV0IGZvciBcIiArIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yTWVzc2FnZSAhPT0gXCJcIikge1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGlucHV0OiBhbnksXHJcbiAgICBudW1EYXRhc2V0OiBudW1iZXIsXHJcbiAgICBkZWZhdWx0VmFsdWU6IHN0cmluZyxcclxuICAgIHZhbGlkYXRvcjogRnVuY3Rpb24sXHJcbiAgICBhbGxvd05vVmFsaWRWYWx1ZTogYm9vbGVhblxyXG4pOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nIHtcclxuICAgIGxldCBhcnJheTogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XHJcbiAgICBsZXQgbnVtVmFsaWRWYWx1ZSA9IDA7XHJcblxyXG4gICAgd2hpbGUgKG51bURhdGFzZXQgPiBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBhcnJheS5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbnB1dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBudW1EYXRhc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRvbyBtYW55IGlucHV0cyBmb3IgcGFyYW1ldGVyICdcIiArIG5hbWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBhcnJheSBub3QgYWxsb3dkIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGlucHV0W2luZF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBpbnB1dFtpbmQgLSAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IoY3VycikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRzIGZvciBcIiArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGlucHV0W2lucHV0Lmxlbmd0aCAtIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IGlucHV0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gbnVtRGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUb28gbWFueSBpbnB1dHMgZm9yIHBhcmFtZXRlciAnXCIgKyBuYW1lICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmQgPCBzcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHNwbGl0dGVkW2luZF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc3BsaXR0ZWRbaW5kIC0gMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpbmRdID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcihjdXJyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVZhbGlkVmFsdWUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2VlZHMgdGhlIGxlbmd0aCBvZiBpbnB1dCwgdXNlIHByZXYgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IHNwbGl0dGVkW3NwbGl0dGVkLmxlbmd0aCAtIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtVmFsaWRWYWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGFsbCBkZWZhdWx0VmFsdWVcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yKGlucHV0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1WYWxpZFZhbHVlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2luZF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dHMgZm9yIFwiICsgbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5WzBdID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtVmFsaWRWYWx1ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZCA9IDE7IGluZCA8IGFycmF5Lmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kXSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0cyBmb3IgXCIgKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWxsb3dOb1ZhbGlkVmFsdWUgJiYgbnVtVmFsaWRWYWx1ZSA9PT0gMCkge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gdmFsaWQgaW5wdXQgZm9yIFwiICsgbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ29tbW9uQ2hhcnRJbmZvKHlhbWw6IGFueSwgcmVuZGVySW5mbzogQ29tbW9uQ2hhcnRJbmZvKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInBhcnNlQ29tbW9uQ2hhcnRJbmZvXCIpO1xyXG5cclxuICAgIC8vIHNpbmdsZSB2YWx1ZSwgdXNlIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgZnJvbSBZQU1MXHJcbiAgICBpZiAoeWFtbCkge1xyXG4gICAgICAgIC8vIHRpdGxlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnRpdGxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8udGl0bGUgPSB5YW1sLnRpdGxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geEF4aXNMYWJlbFxyXG4gICAgICAgIGlmICh0eXBlb2YgeWFtbC54QXhpc0xhYmVsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ueEF4aXNMYWJlbCA9IHlhbWwueEF4aXNMYWJlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHhBeGlzQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwueEF4aXNDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnhBeGlzQ29sb3IgPSB5YW1sLnhBeGlzQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB4QXhpc0xhYmVsQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwueEF4aXNMYWJlbENvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8ueEF4aXNMYWJlbENvbG9yID0geWFtbC54QXhpc0xhYmVsQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbGxvd0luc3BlY3REYXRhXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmFsbG93SW5zcGVjdERhdGEgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uYWxsb3dJbnNwZWN0RGF0YSA9IHlhbWwuYWxsb3dJbnNwZWN0RGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNob3dMZWdlbmRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwuc2hvd0xlZ2VuZCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5zaG93TGVnZW5kID0geWFtbC5zaG93TGVnZW5kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kUG9zaXRpb25cclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kUG9zaXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9IHlhbWwubGVnZW5kUG9zaXRpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9IFwiYm90dG9tXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZWdlbmRPcmllbnRcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kT3JpZW50YXRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbiA9IHlhbWwubGVnZW5kT3JpZW50YXRpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJ0b3BcIiB8fFxyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRQb3NpdGlvbiA9PT0gXCJib3R0b21cIlxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24gPSBcImhvcml6b250YWxcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24gPT09IFwibGVmdFwiIHx8XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZFBvc2l0aW9uID09PSBcInJpZ2h0XCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmxlZ2VuZE9yaWVudGF0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRPcmllbnRhdGlvbiA9IFwiaG9yaXpvbnRhbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kUG9zaXRpb24pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGVnZW5kT3JpZW50YXRpb24pO1xyXG5cclxuICAgICAgICAvLyBsZWdlbmRCZ0NvbG9yXHJcbiAgICAgICAgaWYgKHR5cGVvZiB5YW1sLmxlZ2VuZEJnQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRCZ0NvbG9yID0geWFtbC5sZWdlbmRCZ0NvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVnZW5kQm9yZGVyQ29sb3JcclxuICAgICAgICBpZiAodHlwZW9mIHlhbWwubGVnZW5kQm9yZGVyQ29sb3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5sZWdlbmRCb3JkZXJDb2xvciA9IHlhbWwubGVnZW5kQm9yZGVyQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHlBeGlzTGFiZWxcclxuICAgIGxldCByZXRZQXhpc0xhYmVsID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJ5QXhpc0xhYmVsXCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNMYWJlbCxcclxuICAgICAgICAyLFxyXG4gICAgICAgIFwiVmFsdWVcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzTGFiZWwgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WUF4aXNMYWJlbDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0WUF4aXNMYWJlbC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNMYWJlbCBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlBeGlzTGFiZWwgPSByZXRZQXhpc0xhYmVsO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc0xhYmVsKTtcclxuXHJcbiAgICAvLyB5QXhpc0NvbG9yXHJcbiAgICBsZXQgcmV0WUF4aXNDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNDb2xvclwiLFxyXG4gICAgICAgIHlhbWw/LnlBeGlzQ29sb3IsXHJcbiAgICAgICAgMixcclxuICAgICAgICBcIlwiLFxyXG4gICAgICAgIHZhbGlkYXRlQ29sb3IsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0WUF4aXNDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc0NvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGlmIChyZXRZQXhpc0NvbG9yLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICByZXR1cm4gXCJ5QXhpc0NvbG9yIGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNDb2xvciA9IHJldFlBeGlzQ29sb3I7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnlBeGlzQ29sb3IpO1xyXG5cclxuICAgIC8vIHlBeGlzTGFiZWxDb2xvclxyXG4gICAgbGV0IHJldFlBeGlzTGFiZWxDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNMYWJlbENvbG9yXCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNMYWJlbENvbG9yLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzTGFiZWxDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc0xhYmVsQ29sb3I7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlBeGlzTGFiZWxDb2xvci5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNMYWJlbENvbG9yIGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNMYWJlbENvbG9yID0gcmV0WUF4aXNMYWJlbENvbG9yO1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc0xhYmVsQ29sb3IpO1xyXG5cclxuICAgIC8vIHlBeGlzVW5pdFxyXG4gICAgbGV0IHJldFlBeGlzVW5pdCA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieUF4aXNVbml0XCIsXHJcbiAgICAgICAgeWFtbD8ueUF4aXNVbml0LFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlBeGlzVW5pdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRZQXhpc1VuaXQ7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlBeGlzVW5pdC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieUF4aXNVbml0IGFjY2VwdHMgbm90IG1vcmUgdGhhbiB0d28gdmFsdWVzIGZvciBsZWZ0IGFuZCByaWdodCB5LWF4ZXNcIjtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8ueUF4aXNVbml0ID0gcmV0WUF4aXNVbml0O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55QXhpc1VuaXQpO1xyXG5cclxuICAgIC8vIHlNaW5cclxuICAgIGxldCByZXRZTWluID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXCJ5TWluXCIsIHlhbWw/LnlNaW4sIDIsIG51bGwsIHRydWUpO1xyXG4gICAgaWYgKHR5cGVvZiByZXRZTWluID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFlNaW47IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldFlNaW4ubGVuZ3RoID4gMikge1xyXG4gICAgICAgIHJldHVybiBcInlNaW4gYWNjZXB0cyBub3QgbW9yZSB0aGFuIHR3byB2YWx1ZXMgZm9yIGxlZnQgYW5kIHJpZ2h0IHktYXhlc1wiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby55TWluID0gcmV0WU1pbjtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ueU1pbik7XHJcblxyXG4gICAgLy8geU1heFxyXG4gICAgbGV0IHJldFlNYXggPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcInlNYXhcIiwgeWFtbD8ueU1heCwgMiwgbnVsbCwgdHJ1ZSk7XHJcbiAgICBpZiAodHlwZW9mIHJldFlNYXggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0WU1heDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICB9XHJcbiAgICBpZiAocmV0WU1heC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwieU1heCBhY2NlcHRzIG5vdCBtb3JlIHRoYW4gdHdvIHZhbHVlcyBmb3IgbGVmdCBhbmQgcmlnaHQgeS1heGVzXCI7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLnlNYXggPSByZXRZTWF4O1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby55TWF4KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3Mob2JqOiBvYmplY3QpOiBzdHJpbmdbXSB7XHJcbiAgICBsZXQga2V5czogc3RyaW5nW10gPSBbXTtcclxuICAgIGlmIChvYmogIT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMob2JqKSBhcyBBcnJheTxrZXlvZiBzdHJpbmc+O1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBvYmplY3RLZXlzKSB7XHJcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW5kZXJJbmZvRnJvbVlhbWwoXHJcbiAgICB5YW1sVGV4dDogc3RyaW5nLFxyXG4gICAgcGx1Z2luOiBUcmFja2VyXHJcbik6IFJlbmRlckluZm8gfCBzdHJpbmcge1xyXG4gICAgbGV0IHlhbWw7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHlhbWwgPSBwYXJzZVlhbWwoeWFtbFRleHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBZQU1MXCI7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF5YW1sKSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBZQU1MXCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHlhbWwpO1xyXG4gICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuXHJcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJcIjtcclxuXHJcbiAgICAvLyBTZWFyY2ggdGFyZ2V0XHJcbiAgICBpZiAoIWtleXNGb3VuZEluWUFNTC5pbmNsdWRlcyhcInNlYXJjaFRhcmdldFwiKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlBhcmFtZXRlciAnc2VhcmNoVGFyZ2V0JyBub3QgZm91bmQgaW4gWUFNTFwiO1xyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICBsZXQgc2VhcmNoVGFyZ2V0OiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuc2VhcmNoVGFyZ2V0ID09PSBcIm9iamVjdFwiICYmIHlhbWwuc2VhcmNoVGFyZ2V0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeWFtbC5zZWFyY2hUYXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhcmdldCBvZiB5YW1sLnNlYXJjaFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRhcmdldC5wdXNoKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBzZWFyY2ggdGFyZ2V0IGlzIG5vdCBhbGxvd2VkLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB5YW1sLnNlYXJjaFRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzcGxpdHRlZCA9IHlhbWwuc2VhcmNoVGFyZ2V0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwaWVjZSBvZiBzcGxpdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBwaWVjZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGllY2UgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hUYXJnZXQucHVzaChwaWVjZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiRW1wdHkgc2VhcmNoIHRhcmdldCBpcyBub3QgYWxsb3dlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoeWFtbC5zZWFyY2hUYXJnZXQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJFbXB0eSBzZWFyY2ggdGFyZ2V0IGlzIG5vdCBhbGxvd2VkLlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFRhcmdldC5wdXNoKHlhbWwuc2VhcmNoVGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBzZWFyY2ggdGFyZ2V0IChzZWFyY2hUYXJnZXQpXCI7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzZWFyY2hUYXJnZXQpO1xyXG5cclxuICAgIGlmIChlcnJvck1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBudW1EYXRhc2V0cyA9IHNlYXJjaFRhcmdldC5sZW5ndGg7XHJcblxyXG4gICAgLy8gU2VhcmNoIHR5cGVcclxuICAgIGlmICgha2V5c0ZvdW5kSW5ZQU1MLmluY2x1ZGVzKFwic2VhcmNoVHlwZVwiKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlBhcmFtZXRlciAnc2VhcmNoVHlwZScgbm90IGZvdW5kIGluIFlBTUxcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgbGV0IHNlYXJjaFR5cGU6IEFycmF5PFNlYXJjaFR5cGU+ID0gW107XHJcbiAgICBsZXQgcmV0U2VhcmNoVHlwZSA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwic2VhcmNoVHlwZVwiLFxyXG4gICAgICAgIHlhbWwuc2VhcmNoVHlwZSxcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICBcIlwiLFxyXG4gICAgICAgIHZhbGlkYXRlU2VhcmNoVHlwZSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0U2VhcmNoVHlwZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRTZWFyY2hUeXBlOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIGZvciAobGV0IHN0clR5cGUgb2YgcmV0U2VhcmNoVHlwZSkge1xyXG4gICAgICAgIHN3aXRjaCAoc3RyVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGFnXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5UYWcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmcm9udG1hdHRlclwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuRnJvbnRtYXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ3aWtpXCI6XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLnB1c2goU2VhcmNoVHlwZS5XaWtpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGV4dCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImR2RmllbGRcIjpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUucHVzaChTZWFyY2hUeXBlLmR2RmllbGQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0YWJsZVwiOlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVHlwZS5wdXNoKFNlYXJjaFR5cGUuVGFibGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ3VycmVudGx5LCB3ZSBkb24ndCBhbGxvdyB0eXBlICd0YWJsZScgdXNlZCB3aXRoIG90aGVyIHR5cGVzXHJcbiAgICBpZiAoXHJcbiAgICAgICAgc2VhcmNoVHlwZS5pbmNsdWRlcyhTZWFyY2hUeXBlLlRhYmxlKSAmJlxyXG4gICAgICAgIHNlYXJjaFR5cGUuZmlsdGVyKCh0KSA9PiB0ICE9PSBTZWFyY2hUeXBlLlRhYmxlKS5sZW5ndGggPiAwXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID1cclxuICAgICAgICAgICAgXCJzZWFyY2hUeXBlICd0YWJsZScgZG9lc3RuJ3Qgd29yayB3aXRoIG90aGVyIHR5cGVzIGZvciBub3dcIjtcclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coc2VhcmNoVHlwZSk7XHJcblxyXG4gICAgLy8gc2VwYXJhdG9yXHJcbiAgICBsZXQgbXVsdGlwbGVWYWx1ZVNwYXJhdG9yOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICBsZXQgcmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yID0gZ2V0U3RyaW5nQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJzZXBhcmF0b3JcIixcclxuICAgICAgICB5YW1sLnNlcGFyYXRvcixcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICBcIi9cIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldE11bHRpcGxlVmFsdWVTcGFyYXRvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRNdWx0aXBsZVZhbHVlU3BhcmF0b3I7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgbXVsdGlwbGVWYWx1ZVNwYXJhdG9yID0gcmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yO1xyXG5cclxuICAgIC8vIHhEYXRhc2V0XHJcbiAgICBsZXQgeERhdGFzZXQgPSBudWxsO1xyXG4gICAgaWYgKHR5cGVvZiB5YW1sLnhEYXRhc2V0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgeERhdGFzZXQgPSB5YW1sLnhEYXRhc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENyZWF0ZSBxdWVyaWVzXHJcbiAgICBsZXQgcXVlcmllczogQXJyYXk8UXVlcnk+ID0gW107XHJcbiAgICBmb3IgKGxldCBpbmQgPSAwOyBpbmQgPCBzZWFyY2hUYXJnZXQubGVuZ3RoOyBpbmQrKykge1xyXG4gICAgICAgIGxldCBxdWVyeSA9IG5ldyBRdWVyeShcclxuICAgICAgICAgICAgcXVlcmllcy5sZW5ndGgsXHJcbiAgICAgICAgICAgIHNlYXJjaFR5cGVbaW5kXSxcclxuICAgICAgICAgICAgc2VhcmNoVGFyZ2V0W2luZF1cclxuICAgICAgICApO1xyXG4gICAgICAgIHF1ZXJ5LnNldFNlcGFyYXRvcihtdWx0aXBsZVZhbHVlU3BhcmF0b3JbaW5kXSk7XHJcbiAgICAgICAgaWYgKGluZCA9PT0geERhdGFzZXQpIHF1ZXJ5LnVzZWRBc1hEYXRhc2V0ID0gdHJ1ZTtcclxuICAgICAgICBxdWVyaWVzLnB1c2gocXVlcnkpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2cocXVlcmllcyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGdyYXJwaCBpbmZvXHJcbiAgICBsZXQgcmVuZGVySW5mbyA9IG5ldyBSZW5kZXJJbmZvKHF1ZXJpZXMpO1xyXG4gICAgbGV0IGtleXNPZlJlbmRlckluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhyZW5kZXJJbmZvKTtcclxuICAgIGxldCBhZGRpdGlvbmFsQWxsb3dlZEtleXMgPSBbXHJcbiAgICAgICAgXCJzZWFyY2hUeXBlXCIsXHJcbiAgICAgICAgXCJzZWFyY2hUYXJnZXRcIixcclxuICAgICAgICBcInNlcGFyYXRvclwiLFxyXG4gICAgXTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZlJlbmRlckluZm8pO1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIWtleXNPZlJlbmRlckluZm8uaW5jbHVkZXMoa2V5KSAmJlxyXG4gICAgICAgICAgICAhYWRkaXRpb25hbEFsbG93ZWRLZXlzLmluY2x1ZGVzKGtleSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCInXCIgKyBrZXkgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBrZXlcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGRhaWx5IG5vdGVzIHNldHRpbmdzIHVzaW5nIG9ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZVxyXG4gICAgbGV0IGRhaWx5Tm90ZXNTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XHJcblxyXG4gICAgLy8gUm9vdCBmb2xkZXIgdG8gc2VhcmNoXHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZm9sZGVyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHlhbWwuZm9sZGVyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZm9sZGVyID0gcGx1Z2luLnNldHRpbmdzLmZvbGRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmZvbGRlciA9IHlhbWwuZm9sZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5mb2xkZXIgPSBwbHVnaW4uc2V0dGluZ3MuZm9sZGVyO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJJbmZvIGZvbGRlcjogXCIgKyByZW5kZXJJbmZvLmZvbGRlcik7XHJcblxyXG4gICAgbGV0IGFic3RyYWN0Rm9sZGVyID0gcGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXHJcbiAgICAgICAgbm9ybWFsaXplUGF0aChyZW5kZXJJbmZvLmZvbGRlcilcclxuICAgICk7XHJcbiAgICBpZiAoIWFic3RyYWN0Rm9sZGVyIHx8ICEoYWJzdHJhY3RGb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkZvbGRlciAnXCIgKyByZW5kZXJJbmZvLmZvbGRlciArIFwiJyBkb2Vzbid0IGV4aXN0XCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEYXRlIGZvcm1hdFxyXG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IHlhbWwuZGF0ZUZvcm1hdDtcclxuICAgIC8vPz8gbm90IHN1cmUgd2h5IEkgbmVlZCB0aGlzIHRvIG1ha2UgaXQgd29ya3MsXHJcbiAgICAvLyB3aXRob3V0IHRoYXQsIHRoZSBhc3NpZ25lZCB0aGUgcmVuZGVySW5mby5kYXRlRm9ybWF0IHdpbGwgYmVjb21lIHVuZGVmaW5lZFxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmRhdGVGb3JtYXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAoeWFtbC5kYXRlRm9ybWF0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdCA9IHBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdCA9IGRhdGVGb3JtYXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQgPSBwbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdDtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVySW5mbyBkYXRlRm9ybWF0OiBcIiArIHJlbmRlckluZm8uZGF0ZUZvcm1hdCk7XHJcblxyXG4gICAgLy8gRGF0ZSBmb3JtYXQgcHJlZml4XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuZGF0ZUZvcm1hdFByZWZpeCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeCA9IHlhbWwuZGF0ZUZvcm1hdFByZWZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEYXRlIGZyb21hdCBzdWZmaXhcclxuICAgIGlmICh0eXBlb2YgeWFtbC5kYXRlRm9ybWF0U3VmZml4ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4ID0geWFtbC5kYXRlRm9ybWF0U3VmZml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0RGF0ZSwgZW5kRGF0ZVxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLnN0YXJ0RGF0ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGxldCBzdHJTdGFydERhdGUgPSB5YW1sLnN0YXJ0RGF0ZTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeCAmJlxyXG4gICAgICAgICAgICBzdHJTdGFydERhdGUuc3RhcnRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0clN0YXJ0RGF0ZSA9IHN0clN0YXJ0RGF0ZS5zbGljZShcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeC5sZW5ndGhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXggJiZcclxuICAgICAgICAgICAgc3RyU3RhcnREYXRlLmVuZHNXaXRoKHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RyU3RhcnREYXRlID0gc3RyU3RhcnREYXRlLnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHN0clN0YXJ0RGF0ZS5sZW5ndGggLSByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgubGVuZ3RoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydERhdGUgPSB3aW5kb3cubW9tZW50KFxyXG4gICAgICAgICAgICBzdHJTdGFydERhdGUsXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdCxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHN0YXJ0RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5zdGFydERhdGUgPSBzdGFydERhdGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICBcIkludmFsaWQgc3RhcnREYXRlLCB0aGUgZm9ybWF0IG9mIHN0YXJ0RGF0ZSBtYXkgbm90IG1hdGNoIHlvdXIgZGF0ZUZvcm1hdCBcIiArXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmVuZERhdGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBsZXQgc3RyRW5kRGF0ZSA9IHlhbWwuZW5kRGF0ZTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeCAmJlxyXG4gICAgICAgICAgICBzdHJFbmREYXRlLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdHJFbmREYXRlID0gc3RyRW5kRGF0ZS5zbGljZShyZW5kZXJJbmZvLmRhdGVGb3JtYXRQcmVmaXgubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXggJiZcclxuICAgICAgICAgICAgc3RyRW5kRGF0ZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0ckVuZERhdGUgPSBzdHJFbmREYXRlLnNsaWNlKFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIHN0ckVuZERhdGUubGVuZ3RoIC0gcmVuZGVySW5mby5kYXRlRm9ybWF0U3VmZml4Lmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZW5kRGF0ZSA9IHdpbmRvdy5tb21lbnQoc3RyRW5kRGF0ZSwgcmVuZGVySW5mby5kYXRlRm9ybWF0LCB0cnVlKTtcclxuICAgICAgICBpZiAoZW5kRGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlID0gZW5kRGF0ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID1cclxuICAgICAgICAgICAgICAgIFwiSW52YWxpZCBlbmREYXRlLCB0aGUgZm9ybWF0IG9mIGVuZERhdGUgbWF5IG5vdCBtYXRjaCB5b3VyIGRhdGVGb3JtYXQgXCIgK1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0O1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlLmlzVmFsaWQoKSAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZS5pc1ZhbGlkKClcclxuICAgICkge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBlbmREYXRlID4gc3RhcnREYXRlXHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uZW5kRGF0ZSA8IHJlbmRlckluZm8uc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJJbnZhbGlkIGRhdGUgcmFuZ2UgKHN0YXJ0RGF0ZSBsYXJnZXIgdGhhbiBlbmREYXRlKVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uc3RhcnREYXRlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZW5kRGF0ZSk7XHJcblxyXG4gICAgLy8geERhdGFzZXRcclxuICAgIGxldCByZXRYRGF0YXNldCA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwieERhdGFzZXRcIixcclxuICAgICAgICB5YW1sLnhEYXRhc2V0LFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIC0xLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldFhEYXRhc2V0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldFhEYXRhc2V0OyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIHJldFhEYXRhc2V0ID0gcmV0WERhdGFzZXQubWFwKChkOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAoZCA8IDAgfHwgZCA+PSBudW1EYXRhc2V0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfSk7XHJcbiAgICByZW5kZXJJbmZvLnhEYXRhc2V0ID0gcmV0WERhdGFzZXQ7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLnhEYXRhc2V0KTtcclxuXHJcbiAgICAvLyBEYXRhc2V0IG5hbWUgKG5lZWQgeERhdGFzZXQgdG8gc2V0IGRlZmF1bHQgbmFtZSlcclxuICAgIGxldCByZXREYXRhc2V0TmFtZSA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgIFwiZGF0YXNldE5hbWVcIixcclxuICAgICAgICB5YW1sLmRhdGFzZXROYW1lLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIFwidW50aXRsZWRcIixcclxuICAgICAgICBudWxsLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldERhdGFzZXROYW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldERhdGFzZXROYW1lOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgIH1cclxuICAgIC8vIHJlbmFtZSB1bnRpdGxlZFxyXG4gICAgbGV0IGluZFVudGl0bGVkID0gMDtcclxuICAgIGZvciAobGV0IGluZCA9IDA7IGluZCA8IHJldERhdGFzZXROYW1lLmxlbmd0aDsgaW5kKyspIHtcclxuICAgICAgICBpZiAocmVuZGVySW5mby54RGF0YXNldC5pbmNsdWRlcyhpbmQpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAocmV0RGF0YXNldE5hbWVbaW5kXSA9PT0gXCJ1bnRpdGxlZFwiKSB7XHJcbiAgICAgICAgICAgIHJldERhdGFzZXROYW1lW2luZF0gPSBcInVudGl0bGVkXCIgKyBpbmRVbnRpdGxlZC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpbmRVbnRpdGxlZCsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIENoZWNrIGR1cGxpY2F0ZWQgbmFtZXNcclxuICAgIGlmIChuZXcgU2V0KHJldERhdGFzZXROYW1lKS5zaXplID09PSByZXREYXRhc2V0TmFtZS5sZW5ndGgpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmRhdGFzZXROYW1lID0gcmV0RGF0YXNldE5hbWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIk5vdCBlbm91Z2ggZGF0YXNldCBuYW1lcyBvciBkdXBsaWNhdGVkIG5hbWVzXCI7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldE5hbWUpO1xyXG5cclxuICAgIC8vIGNvbnN0VmFsdWVcclxuICAgIGxldCByZXRDb25zdFZhbHVlID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJjb25zdFZhbHVlXCIsXHJcbiAgICAgICAgeWFtbC5jb25zdFZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIDEuMCxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRDb25zdFZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldENvbnN0VmFsdWU7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5jb25zdFZhbHVlID0gcmV0Q29uc3RWYWx1ZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uY29uc3RWYWx1ZSk7XHJcblxyXG4gICAgLy8gaWdub3JlQXR0YWNoZWRWYWx1ZVxyXG4gICAgbGV0IHJldElnbm9yZUF0dGFjaGVkVmFsdWUgPSBnZXRCb29sQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJpZ25vcmVBdHRhY2hlZFZhbHVlXCIsXHJcbiAgICAgICAgeWFtbC5pZ25vcmVBdHRhY2hlZFZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldElnbm9yZUF0dGFjaGVkVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gcmV0SWdub3JlQXR0YWNoZWRWYWx1ZTtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZSA9IHJldElnbm9yZUF0dGFjaGVkVmFsdWU7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmlnbm9yZUF0dGFjaGVkVmFsdWUpO1xyXG5cclxuICAgIC8vIGlnbm9yZVplcm9WYWx1ZVxyXG4gICAgbGV0IHJldElnbm9yZVplcm9WYWx1ZSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImlnbm9yZVplcm9WYWx1ZVwiLFxyXG4gICAgICAgIHlhbWwuaWdub3JlWmVyb1ZhbHVlLFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICBpZiAodHlwZW9mIHJldElnbm9yZVplcm9WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRJZ25vcmVaZXJvVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZW5kZXJJbmZvLmlnbm9yZVplcm9WYWx1ZSA9IHJldElnbm9yZVplcm9WYWx1ZTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZSk7XHJcblxyXG4gICAgLy8gYWNjdW1cclxuICAgIGxldCByZXRBY2N1bSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICBcImFjY3VtXCIsXHJcbiAgICAgICAgeWFtbC5hY2N1bSxcclxuICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgaWYgKHR5cGVvZiByZXRBY2N1bSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRBY2N1bTtcclxuICAgIH1cclxuICAgIHJlbmRlckluZm8uYWNjdW0gPSByZXRBY2N1bTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYWNjdW0pO1xyXG5cclxuICAgIC8vIHBlbmFsdHlcclxuICAgIGxldCByZXRQZW5hbHR5ID0gZ2V0TnVtYmVyQXJyYXlGcm9tSW5wdXQoXHJcbiAgICAgICAgXCJwZW5hbHR5XCIsXHJcbiAgICAgICAgeWFtbC5wZW5hbHR5LFxyXG4gICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgIG51bGwsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGlmICh0eXBlb2YgcmV0UGVuYWx0eSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRQZW5hbHR5O1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5wZW5hbHR5ID0gcmV0UGVuYWx0eTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ucGVuYWx0eSk7XHJcblxyXG4gICAgLy8gZml4ZWRTY2FsZVxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmZpeGVkU2NhbGUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICByZW5kZXJJbmZvLmZpeGVkU2NhbGUgPSB5YW1sLmZpeGVkU2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZml0UGFuZWxXaWR0aFxyXG4gICAgaWYgKHR5cGVvZiB5YW1sLmZpdFBhbmVsV2lkdGggPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5maXRQYW5lbFdpZHRoID0geWFtbC5maXRQYW5lbFdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1hcmdpblxyXG4gICAgbGV0IHJldE1hcmdpbiA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFwibWFyZ2luXCIsIHlhbWwubWFyZ2luLCA0LCAxMCwgdHJ1ZSk7XHJcbiAgICBpZiAodHlwZW9mIHJldE1hcmdpbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiByZXRNYXJnaW47IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgfVxyXG4gICAgaWYgKHJldE1hcmdpbi5sZW5ndGggPiA0KSB7XHJcbiAgICAgICAgcmV0dXJuIFwibWFyZ2luIGFjY2VwdHMgbm90IG1vcmUgdGhhbiBmb3VyIHZhbHVlcyBmb3IgdG9wLCByaWdodCwgYm90dG9tLCBhbmQgbGVmdCBtYXJnaW5zLlwiO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySW5mby5tYXJnaW4gPSBuZXcgTWFyZ2luKFxyXG4gICAgICAgIHJldE1hcmdpblswXSxcclxuICAgICAgICByZXRNYXJnaW5bMV0sXHJcbiAgICAgICAgcmV0TWFyZ2luWzJdLFxyXG4gICAgICAgIHJldE1hcmdpblszXVxyXG4gICAgKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubWFyZ2luKTtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgb3V0cHV0VHlwZVxyXG4gICAgbGV0IGhhc0xpbmUgPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgeWFtbC5saW5lICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgaGFzTGluZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBsZXQgaGFzQmFyID0gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuYmFyICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgaGFzQmFyID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGxldCBoYXNTdW1tYXJ5ID0gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIHlhbWwuc3VtbWFyeSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGhhc1N1bW1hcnkgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgbGV0IHN1bU91dHB1dCA9IE51bWJlcihoYXNMaW5lKSArIE51bWJlcihoYXNCYXIpICsgTnVtYmVyKGhhc1N1bW1hcnkpO1xyXG4gICAgaWYgKHN1bU91dHB1dCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBcIk5vIG91dHB1dCBwYXJhbWV0ZXIgcHJvdmlkZWQsIHBsZWFzZSBwbGFjZSBsaW5lLCBiYXIsIG9yIHN1bW1hcnkuXCI7XHJcbiAgICB9IGVsc2UgaWYgKHN1bU91dHB1dCA9PT0gMSkge1xyXG4gICAgICAgIGlmIChoYXNMaW5lKSByZW5kZXJJbmZvLm91dHB1dCA9IE91dHB1dFR5cGUuTGluZTtcclxuICAgICAgICBpZiAoaGFzQmFyKSByZW5kZXJJbmZvLm91dHB1dCA9IE91dHB1dFR5cGUuQmFyO1xyXG4gICAgICAgIGlmIChoYXNTdW1tYXJ5KSByZW5kZXJJbmZvLm91dHB1dCA9IE91dHB1dFR5cGUuU3VtbWFyeTtcclxuICAgIH0gZWxzZSBpZiAoc3VtT3V0cHV0ID49IDIpIHtcclxuICAgICAgICByZXR1cm4gXCJUb28gbWFueSBvdXRwdXQgcGFyYW1ldGVycywgcGljayBsaW5lLCBiYXIsIG9yIHN1bW1hcnkuXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGluZSByZWxhdGVkIHBhcmFtZXRlcnNcclxuICAgIGlmIChyZW5kZXJJbmZvLm91dHB1dCA9PT0gT3V0cHV0VHlwZS5MaW5lKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5saW5lID0gbmV3IExpbmVJbmZvKCk7XHJcblxyXG4gICAgICAgIGlmICh5YW1sLmxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGtleXNPZkxpbmVJbmZvID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MocmVuZGVySW5mby5saW5lKTtcclxuICAgICAgICAgICAgbGV0IGtleXNGb3VuZEluWUFNTCA9IGdldEF2YWlsYWJsZUtleXNPZkNsYXNzKHlhbWwubGluZSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkxpbmVJbmZvKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c0ZvdW5kSW5ZQU1MKTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXNGb3VuZEluWUFNTCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlzT2ZMaW5lSW5mby5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gXCInXCIgKyBrZXkgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBrZXlcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPSBwYXJzZUNvbW1vbkNoYXJ0SW5mbyhcclxuICAgICAgICAgICAgeWFtbC5saW5lLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmxpbmVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UGFyc2VDb21tb25DaGFydEluZm8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGluZUNvbG9yXHJcbiAgICAgICAgbGV0IHJldExpbmVDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImxpbmVDb2xvclwiLFxyXG4gICAgICAgICAgICB5YW1sPy5saW5lPy5saW5lQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldExpbmVDb2xvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0TGluZUNvbG9yOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVySW5mby5saW5lLmxpbmVDb2xvciA9IHJldExpbmVDb2xvcjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUubGluZUNvbG9yKTtcclxuXHJcbiAgICAgICAgLy8gbGluZVdpZHRoXHJcbiAgICAgICAgbGV0IHJldExpbmVXaWR0aCA9IGdldE51bWJlckFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImxpbmVXaWR0aFwiLFxyXG4gICAgICAgICAgICB5YW1sPy5saW5lPy5saW5lV2lkdGgsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICAxLjUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0TGluZVdpZHRoID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRMaW5lV2lkdGg7IC8vIGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmxpbmUubGluZVdpZHRoID0gcmV0TGluZVdpZHRoO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGluZS5saW5lV2lkdGgpO1xyXG5cclxuICAgICAgICAvLyBzaG93TGluZVxyXG4gICAgICAgIGxldCByZXRTaG93TGluZSA9IGdldEJvb2xBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJzaG93TGluZVwiLFxyXG4gICAgICAgICAgICB5YW1sPy5saW5lPy5zaG93TGluZSxcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0U2hvd0xpbmUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFNob3dMaW5lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmxpbmUuc2hvd0xpbmUgPSByZXRTaG93TGluZTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUuc2hvd0xpbmUpO1xyXG5cclxuICAgICAgICAvLyBzaG93UG9pbnRcclxuICAgICAgICBsZXQgcmV0U2hvd1BvaW50ID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInNob3dQb2ludFwiLFxyXG4gICAgICAgICAgICB5YW1sPy5saW5lPy5zaG93UG9pbnQsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFNob3dQb2ludCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0U2hvd1BvaW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmxpbmUuc2hvd1BvaW50ID0gcmV0U2hvd1BvaW50O1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8ubGluZS5zaG93UG9pbnQpO1xyXG5cclxuICAgICAgICAvLyBwb2ludENvbG9yXHJcbiAgICAgICAgbGV0IHJldFBvaW50Q29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludENvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWw/LmxpbmU/LnBvaW50Q29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIiM2OWIzYTJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQb2ludENvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRQb2ludENvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmxpbmUucG9pbnRDb2xvciA9IHJldFBvaW50Q29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5saW5lLnBvaW50Q29sb3IpO1xyXG5cclxuICAgICAgICAvLyBwb2ludEJvcmRlckNvbG9yXHJcbiAgICAgICAgbGV0IHJldFBvaW50Qm9yZGVyQ29sb3IgPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludEJvcmRlckNvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWw/LmxpbmU/LnBvaW50Qm9yZGVyQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIiM2OWIzYTJcIixcclxuICAgICAgICAgICAgdmFsaWRhdGVDb2xvcixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQb2ludEJvcmRlckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRQb2ludEJvcmRlckNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJJbmZvLmxpbmUucG9pbnRCb3JkZXJDb2xvciA9IHJldFBvaW50Qm9yZGVyQ29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5saW5lLnBvaW50Qm9yZGVyQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBwb2ludEJvcmRlcldpZHRoXHJcbiAgICAgICAgbGV0IHJldFBvaW50Qm9yZGVyV2lkdGggPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludEJvcmRlcldpZHRoXCIsXHJcbiAgICAgICAgICAgIHlhbWw/LmxpbmU/LnBvaW50Qm9yZGVyV2lkdGgsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICAwLjAsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0UG9pbnRCb3JkZXJXaWR0aCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRCb3JkZXJXaWR0aDsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8ubGluZS5wb2ludEJvcmRlcldpZHRoID0gcmV0UG9pbnRCb3JkZXJXaWR0aDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUucG9pbnRCb3JkZXJXaWR0aCk7XHJcblxyXG4gICAgICAgIC8vIHBvaW50U2l6ZVxyXG4gICAgICAgIGxldCByZXRQb2ludFNpemUgPSBnZXROdW1iZXJBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJwb2ludFNpemVcIixcclxuICAgICAgICAgICAgeWFtbD8ubGluZT8ucG9pbnRTaXplLFxyXG4gICAgICAgICAgICBudW1EYXRhc2V0cyxcclxuICAgICAgICAgICAgMy4wLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldFBvaW50U2l6ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UG9pbnRTaXplOyAvLyBlcnJvck1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVySW5mby5saW5lLnBvaW50U2l6ZSA9IHJldFBvaW50U2l6ZTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUucG9pbnRTaXplKTtcclxuXHJcbiAgICAgICAgLy8gZmlsbEdhcFxyXG4gICAgICAgIGxldCByZXRGaWxsR2FwID0gZ2V0Qm9vbEFycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImZpbGxHYXBcIixcclxuICAgICAgICAgICAgeWFtbD8ubGluZT8uZmlsbEdhcCxcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldEZpbGxHYXAgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldEZpbGxHYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8ubGluZS5maWxsR2FwID0gcmV0RmlsbEdhcDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUuZmlsbEdhcCk7XHJcblxyXG4gICAgICAgIC8vIHlBeGlzTG9jYXRpb25cclxuICAgICAgICBsZXQgcmV0WUF4aXNMb2NhdGlvbiA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcInlBeGlzTG9jYXRpb25cIixcclxuICAgICAgICAgICAgeWFtbD8ubGluZT8ueUF4aXNMb2NhdGlvbixcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZVlBeGlzTG9jYXRpb24sXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0WUF4aXNMb2NhdGlvbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0WUF4aXNMb2NhdGlvbjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8ubGluZS55QXhpc0xvY2F0aW9uID0gcmV0WUF4aXNMb2NhdGlvbjtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZW5kZXJJbmZvLmxpbmUueUF4aXNMb2NhdGlvbik7XHJcbiAgICB9IC8vIGxpbmUgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICBpZiAocmVuZGVySW5mby5vdXRwdXQgPT09IE91dHB1dFR5cGUuQmFyKSB7XHJcbiAgICAgICAgcmVuZGVySW5mby5iYXIgPSBuZXcgQmFySW5mbygpO1xyXG5cclxuICAgICAgICBpZiAoeWFtbC5iYXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGtleXNPZkJhckluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhyZW5kZXJJbmZvLmJhcik7XHJcbiAgICAgICAgICAgIGxldCBrZXlzRm91bmRJbllBTUwgPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyh5YW1sLmJhcik7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGtleXNPZkJhckluZm8pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWtleXNPZkJhckluZm8uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUga2V5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvID0gcGFyc2VDb21tb25DaGFydEluZm8oXHJcbiAgICAgICAgICAgIHlhbWwuYmFyLFxyXG4gICAgICAgICAgICByZW5kZXJJbmZvLmJhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRQYXJzZUNvbW1vbkNoYXJ0SW5mbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0UGFyc2VDb21tb25DaGFydEluZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiYXJDb2xvclxyXG4gICAgICAgIGxldCByZXRCYXJDb2xvciA9IGdldFN0cmluZ0FycmF5RnJvbUlucHV0KFxyXG4gICAgICAgICAgICBcImJhckNvbG9yXCIsXHJcbiAgICAgICAgICAgIHlhbWw/LmJhcj8uYmFyQ29sb3IsXHJcbiAgICAgICAgICAgIG51bURhdGFzZXRzLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbG9yLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJldEJhckNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRCYXJDb2xvcjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8uYmFyLmJhckNvbG9yID0gcmV0QmFyQ29sb3I7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5iYXIuYmFyQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyB5QXhpc0xvY2F0aW9uXHJcbiAgICAgICAgbGV0IHJldFlBeGlzTG9jYXRpb24gPSBnZXRTdHJpbmdBcnJheUZyb21JbnB1dChcclxuICAgICAgICAgICAgXCJ5QXhpc0xvY2F0aW9uXCIsXHJcbiAgICAgICAgICAgIHlhbWw/LmJhcj8ueUF4aXNMb2NhdGlvbixcclxuICAgICAgICAgICAgbnVtRGF0YXNldHMsXHJcbiAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZVlBeGlzTG9jYXRpb24sXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0WUF4aXNMb2NhdGlvbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0WUF4aXNMb2NhdGlvbjsgLy8gZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlckluZm8uYmFyLnlBeGlzTG9jYXRpb24gPSByZXRZQXhpc0xvY2F0aW9uO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uYmFyLnlBeGlzTG9jYXRpb24pO1xyXG4gICAgfSAvLyBiYXIgcmVsYXRlZCBwYXJhbWV0ZXJzXHJcbiAgICAvLyBzdW1tYXJ5IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG4gICAgaWYgKHJlbmRlckluZm8ub3V0cHV0ID09PSBPdXRwdXRUeXBlLlN1bW1hcnkpIHtcclxuICAgICAgICByZW5kZXJJbmZvLnN1bW1hcnkgPSBuZXcgU3VtbWFyeUluZm8oKTtcclxuXHJcbiAgICAgICAgaWYgKHlhbWwuc3VtbWFyeSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQga2V5c09mU3VtbWFyeUluZm8gPSBnZXRBdmFpbGFibGVLZXlzT2ZDbGFzcyhyZW5kZXJJbmZvLnN1bW1hcnkpO1xyXG4gICAgICAgICAgICBsZXQga2V5c0ZvdW5kSW5ZQU1MID0gZ2V0QXZhaWxhYmxlS2V5c09mQ2xhc3MoeWFtbC5zdW1tYXJ5KTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5c09mU3VtbWFyeUluZm8pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXlzRm91bmRJbllBTUwpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0ZvdW5kSW5ZQU1MKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWtleXNPZlN1bW1hcnlJbmZvLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIidcIiArIGtleSArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIGtleVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh5YW1sLnN1bW1hcnkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gdGVtcGxhdGVcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB5YW1sLnN1bW1hcnkudGVtcGxhdGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckluZm8uc3VtbWFyeS50ZW1wbGF0ZSA9IHlhbWwuc3VtbWFyeS50ZW1wbGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHlhbWwuc3VtbWFyeS5zdHlsZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW5mby5zdW1tYXJ5LnN0eWxlID0geWFtbC5zdW1tYXJ5LnN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSAvLyBzdW1tYXJ5IHJlbGF0ZWQgcGFyYW1ldGVyc1xyXG5cclxuICAgIHJldHVybiByZW5kZXJJbmZvO1xyXG59XHJcbiIsImltcG9ydCB7IENhY2hlZE1ldGFkYXRhLCBURmlsZSwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YU1hcCxcclxuICAgIFF1ZXJ5LFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFhWYWx1ZU1hcCxcclxuICAgIFF1ZXJ5VmFsdWVQYWlyLFxyXG4gICAgVGFibGVEYXRhLFxyXG4gICAgU2VhcmNoVHlwZSxcclxufSBmcm9tIFwiLi9kYXRhXCI7XHJcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi9oZWxwZXJcIjtcclxuXHJcbmxldCB0aW1lRm9ybWF0ID0gW1xyXG4gICAgXCJISDptbVwiLFxyXG4gICAgXCJISDptXCIsXHJcbiAgICBcIkg6bW1cIixcclxuICAgIFwiSDptXCIsXHJcbiAgICBcImhoOm1tIEFcIixcclxuICAgIFwiaGg6bW0gYVwiLFxyXG4gICAgXCJoaDptIEFcIixcclxuICAgIFwiaGg6bSBhXCIsXHJcbiAgICBcImg6bW0gQVwiLFxyXG4gICAgXCJoOm1tIGFcIixcclxuICAgIFwiaDptIEFcIixcclxuICAgIFwiaDptIGFcIixcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGFkZFRvRGF0YU1hcChcclxuICAgIGRhdGFNYXA6IERhdGFNYXAsXHJcbiAgICBkYXRlOiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICB2YWx1ZTogbnVtYmVyIHwgbnVsbFxyXG4pIHtcclxuICAgIGlmICghZGF0YU1hcC5oYXMoZGF0ZSkpIHtcclxuICAgICAgICBsZXQgcXVlcnlWYWx1ZVBhaXJzID0gbmV3IEFycmF5PFF1ZXJ5VmFsdWVQYWlyPigpO1xyXG4gICAgICAgIHF1ZXJ5VmFsdWVQYWlycy5wdXNoKHsgcXVlcnk6IHF1ZXJ5LCB2YWx1ZTogdmFsdWUgfSk7XHJcbiAgICAgICAgZGF0YU1hcC5zZXQoZGF0ZSwgcXVlcnlWYWx1ZVBhaXJzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHRhcmdldFZhbHVlUGFpcnMgPSBkYXRhTWFwLmdldChkYXRlKTtcclxuICAgICAgICB0YXJnZXRWYWx1ZVBhaXJzLnB1c2goeyBxdWVyeTogcXVlcnksIHZhbHVlOiB2YWx1ZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnXCIpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocXVlcnkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coZGF0YU1hcCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh4VmFsdWVNYXApO1xyXG4gICAgbGV0IGZyb250TWF0dGVyID0gZmlsZUNhY2hlLmZyb250bWF0dGVyO1xyXG4gICAgbGV0IGZyb250TWF0dGVyVGFnczogc3RyaW5nW10gPSBbXTtcclxuICAgIGlmIChmcm9udE1hdHRlciAmJiBmcm9udE1hdHRlci50YWdzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZnJvbnRNYXR0ZXIudGFncyk7XHJcbiAgICAgICAgbGV0IHRhZ01lYXN1cmUgPSAwLjA7XHJcbiAgICAgICAgbGV0IHRhZ0V4aXN0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZnJvbnRNYXR0ZXIudGFncykpIHtcclxuICAgICAgICAgICAgZnJvbnRNYXR0ZXJUYWdzID0gZnJvbnRNYXR0ZXJUYWdzLmNvbmNhdChmcm9udE1hdHRlci50YWdzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmcm9udE1hdHRlclRhZ3MucHVzaChmcm9udE1hdHRlci50YWdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHRhZyBvZiBmcm9udE1hdHRlclRhZ3MpIHtcclxuICAgICAgICAgICAgaWYgKHRhZyA9PT0gcXVlcnkuZ2V0VGFyZ2V0KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNpbXBsZSB0YWdcclxuICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0YWdNZWFzdXJlICsgcmVuZGVySW5mby5jb25zdFZhbHVlW3F1ZXJ5LmdldElkKCldO1xyXG4gICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZy5zdGFydHNXaXRoKHF1ZXJ5LmdldFRhcmdldCgpICsgXCIvXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgdGFnXHJcbiAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB2YWx1ZWQtdGFnIGluIGZyb250bWF0dGVyIGlzIG5vdCBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgXCJ0YWc6dmFsdWVcIiBpbiBmcm9udG1hdHRlciB3aWxsIGJlIGNvbnNpZGVyIGFzIGEgbmV3IHRhZyBmb3IgZGlmZmVyZW50IHZhbHVlc1xyXG5cclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRhZ0V4aXN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRhZ01lYXN1cmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZU1hcC5nZXQoLTEpLCBxdWVyeSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5KFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgZnJvbnRNYXR0ZXIgPSBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXI7XHJcbiAgICBpZiAoZnJvbnRNYXR0ZXIpIHtcclxuICAgICAgICBpZiAoZnJvbnRNYXR0ZXJbcXVlcnkuZ2V0VGFyZ2V0KCldKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2luZ2xlIHZhbHVlXCIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmcm9udE1hdHRlcltxdWVyeS5nZXRUYXJnZXQoKV0pO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgdG9QYXJzZSA9IGZyb250TWF0dGVyW3F1ZXJ5LmdldFRhcmdldCgpXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b1BhcnNlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9QYXJzZS5pbmNsdWRlcyhcIjpcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aW1lIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpbWVWYWx1ZSA9IHdpbmRvdy5tb21lbnQodG9QYXJzZSwgdGltZUZvcm1hdCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVWYWx1ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkuc2V0VXNpbmdUaW1lVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aW1lVmFsdWUuZGlmZihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb21lbnQoXCIwMDowMFwiLCBcIkhIOm1tXCIsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh0b1BhcnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh0b1BhcnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZU1hcC5nZXQoLTEpLCBxdWVyeSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCkgJiZcclxuICAgICAgICAgICAgZnJvbnRNYXR0ZXJbcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCldXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibXVsdGlwbGUgdmFsdWVzXCIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhxdWVyeS5nZXRUYXJnZXQoKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocXVlcnkuZ2V0U3ViSWQoKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAvLyAgICAgZnJvbnRNYXR0ZXJbcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCldXHJcbiAgICAgICAgICAgIC8vICk7XHJcbiAgICAgICAgICAgIGxldCB0b1BhcnNlID0gZnJvbnRNYXR0ZXJbcXVlcnkuZ2V0UGFyZW50VGFyZ2V0KCldO1xyXG4gICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b1BhcnNlKSkge1xyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQgPSB0b1BhcnNlLm1hcCgocCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdG9QYXJzZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQgPSB0b1BhcnNlLnNwbGl0KHF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBzcGxpdHRlZCAmJlxyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZWQubGVuZ3RoID4gcXVlcnkuZ2V0QWNjZXNzb3IoKSAmJlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuZ2V0QWNjZXNzb3IoKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaXQncyBub3QgZWZmaWNlbnQgdG8gcmV0cmlldmUgb25lIHZhbHVlIGF0IGEgdGltZSwgZW5oYW5jZSB0aGlzXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0dGVkUGFydCA9IHNwbGl0dGVkW3F1ZXJ5LmdldEFjY2Vzc29yKCldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b1BhcnNlLmluY2x1ZGVzKFwiOlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRpbWUgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZVZhbHVlID0gd2luZG93Lm1vbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWRQYXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZVZhbHVlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5zZXRVc2luZ1RpbWVWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWVWYWx1ZS5kaWZmKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbWVudChcIjAwOjAwXCIsIFwiSEg6bW1cIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlY29uZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHNwbGl0dGVkUGFydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc051bWJlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRUb0RhdGFNYXAoZGF0YU1hcCwgeFZhbHVlTWFwLmdldCgtMSksIHF1ZXJ5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21XaWtpKFxyXG4gICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgbGlua3MgPSBmaWxlQ2FjaGUubGlua3M7XHJcblxyXG4gICAgbGV0IGxpbmtNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IGxpbmtFeGlzdCA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgIGlmIChsaW5rLmxpbmsgPT09IHF1ZXJ5LmdldFRhcmdldCgpKSB7XHJcbiAgICAgICAgICAgIGxpbmtFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGxpbmtNZWFzdXJlID0gbGlua01lYXN1cmUgKyByZW5kZXJJbmZvLmNvbnN0VmFsdWVbcXVlcnkuZ2V0SWQoKV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBsaW5rVmFsdWUgPSBudWxsO1xyXG4gICAgaWYgKGxpbmtFeGlzdCkge1xyXG4gICAgICAgIGxpbmtWYWx1ZSA9IGxpbmtNZWFzdXJlO1xyXG4gICAgfVxyXG4gICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZU1hcC5nZXQoLTEpLCBxdWVyeSwgbGlua1ZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUlubGluZVRhZyhcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb250ZW50KTtcclxuICAgIC8vIFRlc3QgdGhpcyBpbiBSZWdleDEwMVxyXG4gICAgLy8gKF58XFxzKSN0YWdOYW1lKFxcL1tcXHctXSspKig6KD88dmFsdWVzPltcXGRcXC5cXC8tXSopW2EtekEtWl0qKT8oW1xcXFwuISxcXFxcPzt+LV0qKT8oXFxzfCQpXHJcbiAgICBsZXQgdGFnTmFtZSA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgaWYgKHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpKSB7XHJcbiAgICAgICAgdGFnTmFtZSA9IHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpOyAvLyB1c2UgcGFyZW50IHRhZyBuYW1lIGZvciBtdWx0aXBsZSB2YWx1ZXNcclxuICAgIH1cclxuICAgIGxldCBzdHJIYXNodGFnUmVnZXggPVxyXG4gICAgICAgIFwiKF58XFxcXHMpI1wiICtcclxuICAgICAgICB0YWdOYW1lICtcclxuICAgICAgICBcIihcXFxcL1tcXFxcdy1dKykqKDooPzx2YWx1ZXM+W1xcXFxkXFxcXC5cXFxcLy1dKilbYS16QS1aXSopPyhbXFxcXC4hLFxcXFw/O34tXSopPyhcXFxcc3wkKVwiO1xyXG4gICAgLy8gY29uc29sZS5sb2coc3RySGFzaHRhZ1JlZ2V4KTtcclxuICAgIGxldCBoYXNoVGFnUmVnZXggPSBuZXcgUmVnRXhwKHN0ckhhc2h0YWdSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCB0YWdNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IHRhZ0V4aXN0ID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIXJlbmRlckluZm8uaWdub3JlQXR0YWNoZWRWYWx1ZVtxdWVyeS5nZXRJZCgpXSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBtYXRjaC5ncm91cHMudmFsdWVzICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidmFsdWUtYXR0YWNoZWQgdGFnXCIpO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gbWF0Y2guZ3JvdXBzLnZhbHVlcztcclxuICAgICAgICAgICAgbGV0IHNwbGl0dGVkID0gdmFsdWVzLnNwbGl0KHF1ZXJ5LmdldFNlcGFyYXRvcigpKTtcclxuICAgICAgICAgICAgaWYgKCFzcGxpdHRlZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChzcGxpdHRlZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2luZ2xlLXZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvUGFyc2UgPSBzcGxpdHRlZFswXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9QYXJzZS5pbmNsdWRlcyhcIjpcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZVZhbHVlID0gd2luZG93Lm1vbWVudCh0b1BhcnNlLCB0aW1lRm9ybWF0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZVZhbHVlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5zZXRVc2luZ1RpbWVWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gdGltZVZhbHVlLmRpZmYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9tZW50KFwiMDA6MDBcIiwgXCJISDptbVwiLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2Vjb25kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQodG9QYXJzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVaZXJvVmFsdWVbcXVlcnkuZ2V0SWQoKV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSArPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkLmxlbmd0aCA+IHF1ZXJ5LmdldEFjY2Vzc29yKCkgJiZcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmdldEFjY2Vzc29yKCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGl0J3Mgbm90IGVmZmljZW50IHRvIHJldHJpZXZlIG9uZSB2YWx1ZSBhdCBhIHRpbWUsIGVuaGFuY2UgdGhpc1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJtdWx0aXBsZS12YWx1ZXNcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9QYXJzZSA9IHNwbGl0dGVkW3F1ZXJ5LmdldEFjY2Vzc29yKCldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b1BhcnNlLmluY2x1ZGVzKFwiOlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lVmFsdWUgPSB3aW5kb3cubW9tZW50KHRvUGFyc2UsIHRpbWVGb3JtYXQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lVmFsdWUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnNldFVzaW5nVGltZVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0aW1lVmFsdWUuZGlmZihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb21lbnQoXCIwMDowMFwiLCBcIkhIOm1tXCIsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdCh0b1BhcnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlICs9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGFnXCIpO1xyXG4gICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgaWYgKHRhZ0V4aXN0KSB7XHJcbiAgICAgICAgdmFsdWUgPSB0YWdNZWFzdXJlO1xyXG4gICAgfVxyXG4gICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZU1hcC5nZXQoLTEpLCBxdWVyeSwgdmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tVGV4dChcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHF1ZXJ5OiBRdWVyeSxcclxuICAgIHJlbmRlckluZm86IFJlbmRlckluZm8sXHJcbiAgICBkYXRhTWFwOiBEYXRhTWFwLFxyXG4gICAgeFZhbHVlTWFwOiBYVmFsdWVNYXBcclxuKSB7XHJcbiAgICBsZXQgc3RyVGV4dFJlZ2V4ID0gcXVlcnkuZ2V0VGFyZ2V0KCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdHJUZXh0UmVnZXgpO1xyXG4gICAgbGV0IHRleHRSZWdleCA9IG5ldyBSZWdFeHAoc3RyVGV4dFJlZ2V4LCBcImdtXCIpO1xyXG4gICAgbGV0IG1hdGNoO1xyXG4gICAgbGV0IHRleHRNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IHRleHRFeGlzdCA9IGZhbHNlO1xyXG4gICAgd2hpbGUgKChtYXRjaCA9IHRleHRSZWdleC5leGVjKGNvbnRlbnQpKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1hdGNoKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICFyZW5kZXJJbmZvLmlnbm9yZUF0dGFjaGVkVmFsdWVbcXVlcnkuZ2V0SWQoKV0gJiZcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBtYXRjaFswXSB3aG9sZSBtYXRjaFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInZhbHVlZC10ZXh0XCIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoLmdyb3Vwcy52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IGFzIG51bGwgZm9yIG1pc3NpbmcgdmFsdWUgaWYgaXQgaXMgdmFsdWVkLXRhZ1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdChtYXRjaC5ncm91cHMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVaZXJvVmFsdWVbcXVlcnkuZ2V0SWQoKV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09IDBcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE1lYXN1cmUgKz0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGV4dFwiKTtcclxuICAgICAgICAgICAgdGV4dE1lYXN1cmUgPSB0ZXh0TWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGV4dEV4aXN0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRleHRFeGlzdCkge1xyXG4gICAgICAgIGFkZFRvRGF0YU1hcChkYXRhTWFwLCB4VmFsdWVNYXAuZ2V0KC0xKSwgcXVlcnksIHRleHRNZWFzdXJlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUR2RmllbGQoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBxdWVyeTogUXVlcnksXHJcbiAgICByZW5kZXJJbmZvOiBSZW5kZXJJbmZvLFxyXG4gICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgIHhWYWx1ZU1hcDogWFZhbHVlTWFwXHJcbikge1xyXG4gICAgLy8gVGVzdCB0aGlzIGluIFJlZ2V4MTAxXHJcbiAgICAvLyAoXnxcXHMpXFwqezAsMn1kdlRhcmdldFxcKnswLDJ9KDo6XFxzKig/PHZhbHVlcz5bXFxkXFwuXFwvXFwtXFx3LEA7XFxzXSopKShcXHN8JClcclxuICAgIGxldCBkdlRhcmdldCA9IHF1ZXJ5LmdldFRhcmdldCgpO1xyXG4gICAgaWYgKHF1ZXJ5LmdldFBhcmVudFRhcmdldCgpKSB7XHJcbiAgICAgICAgZHZUYXJnZXQgPSBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKTsgLy8gdXNlIHBhcmVudCB0YWcgbmFtZSBmb3IgbXVsdGlwbGUgdmFsdWVzXHJcbiAgICB9XHJcbiAgICBsZXQgc3RySGFzaHRhZ1JlZ2V4ID1cclxuICAgICAgICBcIihefFxcXFxzKVxcXFwqezAsMn1cIiArXHJcbiAgICAgICAgZHZUYXJnZXQgK1xyXG4gICAgICAgIFwiXFxcXCp7MCwyfSg6OlxcXFxzKig/PHZhbHVlcz5bXFxcXGRcXFxcLlxcXFwvXFxcXC1cXFxcdyxAO1xcXFxzXSopKShcXFxcc3wkKVwiO1xyXG4gICAgLy8gY29uc29sZS5sb2coc3RySGFzaHRhZ1JlZ2V4KTtcclxuICAgIGxldCBoYXNoVGFnUmVnZXggPSBuZXcgUmVnRXhwKHN0ckhhc2h0YWdSZWdleCwgXCJnbVwiKTtcclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCB0YWdNZWFzdXJlID0gMC4wO1xyXG4gICAgbGV0IHRhZ0V4aXN0ID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gaGFzaFRhZ1JlZ2V4LmV4ZWMoY29udGVudCkpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIG1hdGNoLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbWF0Y2guZ3JvdXBzLnZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gbWF0Y2guZ3JvdXBzLnZhbHVlcy50cmltKCk7XHJcbiAgICAgICAgICAgIGxldCBzcGxpdHRlZCA9IHZhbHVlcy5zcGxpdChxdWVyeS5nZXRTZXBhcmF0b3IoKSk7XHJcbiAgICAgICAgICAgIGlmICghc3BsaXR0ZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNpbmdsZS12YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcnNlID0gc3BsaXR0ZWRbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAodG9QYXJzZS5pbmNsdWRlcyhcIjpcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZVZhbHVlID0gd2luZG93Lm1vbWVudCh0b1BhcnNlLCB0aW1lRm9ybWF0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZVZhbHVlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5zZXRVc2luZ1RpbWVWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlID0gdGltZVZhbHVlLmRpZmYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9tZW50KFwiMDA6MDBcIiwgXCJISDptbVwiLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2Vjb25kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQodG9QYXJzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhcmVuZGVySW5mby5pZ25vcmVaZXJvVmFsdWVbcXVlcnkuZ2V0SWQoKV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTWVhc3VyZSArPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4aXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVkLmxlbmd0aCA+IHF1ZXJ5LmdldEFjY2Vzc29yKCkgJiZcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmdldEFjY2Vzc29yKCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGl0J3Mgbm90IGVmZmljZW50IHRvIHJldHJpZXZlIG9uZSB2YWx1ZSBhdCBhIHRpbWUsIGVuaGFuY2UgdGhpc1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJtdWx0aXBsZS12YWx1ZXNcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9QYXJzZSA9IHNwbGl0dGVkW3F1ZXJ5LmdldEFjY2Vzc29yKCldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b1BhcnNlLmluY2x1ZGVzKFwiOlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lVmFsdWUgPSB3aW5kb3cubW9tZW50KHRvUGFyc2UsIHRpbWVGb3JtYXQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lVmFsdWUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnNldFVzaW5nVGltZVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lYXN1cmUgPSB0aW1lVmFsdWUuZGlmZihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb21lbnQoXCIwMDowMFwiLCBcIkhIOm1tXCIsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWNvbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdCh0b1BhcnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdNZWFzdXJlICs9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzaW1wbGUtdGFnXCIpO1xyXG4gICAgICAgICAgICB0YWdNZWFzdXJlID0gdGFnTWVhc3VyZSArIHJlbmRlckluZm8uY29uc3RWYWx1ZVtxdWVyeS5nZXRJZCgpXTtcclxuICAgICAgICAgICAgdGFnRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgaWYgKHRhZ0V4aXN0KSB7XHJcbiAgICAgICAgdmFsdWUgPSB0YWdNZWFzdXJlO1xyXG4gICAgfVxyXG4gICAgYWRkVG9EYXRhTWFwKGRhdGFNYXAsIHhWYWx1ZU1hcC5nZXQoLTEpLCBxdWVyeSwgdmFsdWUpO1xyXG59XHJcbiIsImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgVHJhY2tlciBmcm9tIFwiLi9tYWluXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNrZXJTZXR0aW5ncyB7XHJcbiAgICBmb2xkZXI6IHN0cmluZztcclxuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFRyYWNrZXJTZXR0aW5ncyA9IHtcclxuICAgIGZvbGRlcjogXCIvXCIsXHJcbiAgICBkYXRlRm9ybWF0OiBcIllZWVktTU0tRERcIixcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFja2VyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gICAgcGx1Z2luOiBUcmFja2VyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFRyYWNrZXIpIHtcclxuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGVmYXVsdCBmb2xkZXIgbG9jYXRpb25cIilcclxuICAgICAgICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgICAgICAgICBcIkZpbGVzIGluIHRoaXMgZm9sZGVyIHdpbGwgYmUgcGFyc2VkIGFuZCB1c2VkIGFzIGlucHV0IGRhdGEgb2YgdGhlIHRyYWNrZXIgcGx1Z2luLlxcbllvdSBjYW4gYWxzbyBvdmVycmlkZSBpdCB1c2luZyAnZm9sZGVyJyBhcmd1bWVudCBpbnQgdGhlIHRyYWNrZXIgY29kZWJsb2NrLlwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRm9sZGVyIFBhdGhcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkRlZmF1bHQgZGF0ZSBmb3JtYXRcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgICAgICAgICBcIlRoaXMgZm9ybWF0IGlzIHVzZWQgdG8gcGFyc2UgdGhlIGRhdGUgaW4geW91ciBkaWFyeSB0aXRsZS5cXG5Zb3UgY2FuIGFsc28gb3ZlcnJpZGUgaXQgdXNpbmcgJ2RhdGUtZm9ybWF0JyBhcmd1bWVudCBpbiB0aGUgdHJhY2tlciBjb2RlYmxvY2suXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJZWVlZLU1NLUREXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVuZGVySW5mbyB9IGZyb20gXCIuL2RhdGFcIjtcclxuaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltQnlDaGFyKHN0cjogc3RyaW5nLCBjaGFyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20oc3RyKTtcclxuICAgIGNvbnN0IGZpcnN0ID0gYXJyLmZpbmRJbmRleCgoYykgPT4gYyAhPT0gY2hhcik7XHJcbiAgICBjb25zdCBsYXN0ID0gYXJyLnJldmVyc2UoKS5maW5kSW5kZXgoKGMpID0+IGMgIT09IGNoYXIpO1xyXG4gICAgcmV0dXJuIGZpcnN0ID09PSAtMSAmJiBsYXN0ID09PSAtMVxyXG4gICAgICAgID8gc3RyXHJcbiAgICAgICAgOiBzdHIuc3Vic3RyaW5nKGZpcnN0LCBzdHIubGVuZ3RoIC0gbGFzdCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlRnJvbUZpbGVuYW1lKGZpbGU6IFRGaWxlLCByZW5kZXJJbmZvOiBSZW5kZXJJbmZvKSB7XHJcbiAgICBsZXQgZmlsZUJhc2VOYW1lID0gZmlsZS5iYXNlbmFtZTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4ICYmXHJcbiAgICAgICAgZmlsZUJhc2VOYW1lLnN0YXJ0c1dpdGgocmVuZGVySW5mby5kYXRlRm9ybWF0UHJlZml4KVxyXG4gICAgKSB7XHJcbiAgICAgICAgZmlsZUJhc2VOYW1lID0gZmlsZUJhc2VOYW1lLnNsaWNlKHJlbmRlckluZm8uZGF0ZUZvcm1hdFByZWZpeC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAgIHJlbmRlckluZm8uZGF0ZUZvcm1hdFN1ZmZpeCAmJlxyXG4gICAgICAgIGZpbGVCYXNlTmFtZS5lbmRzV2l0aChyZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgpXHJcbiAgICApIHtcclxuICAgICAgICBmaWxlQmFzZU5hbWUgPSBmaWxlQmFzZU5hbWUuc2xpY2UoXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIGZpbGVCYXNlTmFtZS5sZW5ndGggLSByZW5kZXJJbmZvLmRhdGVGb3JtYXRTdWZmaXgubGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGZpbGVCYXNlTmFtZSk7XHJcblxyXG4gICAgbGV0IGZpbGVEYXRlID0gd2luZG93Lm1vbWVudChmaWxlQmFzZU5hbWUsIHJlbmRlckluZm8uZGF0ZUZvcm1hdCwgdHJ1ZSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhmaWxlRGF0ZSk7XHJcblxyXG4gICAgcmV0dXJuIGZpbGVEYXRlO1xyXG59XHJcbiIsImltcG9ydCB7IEFwcCwgQ2FjaGVkTWV0YWRhdGEsIFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blZpZXcsIEVkaXRvciB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHJlbmRlckVycm9yTWVzc2FnZSB9IGZyb20gXCIuL3JlbmRlcmluZ1wiO1xyXG5pbXBvcnQgeyBnZXRSZW5kZXJJbmZvRnJvbVlhbWwgfSBmcm9tIFwiLi9wYXJzaW5nXCI7XHJcbmltcG9ydCB7XHJcbiAgICBOdWxsYWJsZU51bWJlcixcclxuICAgIERhdGFzZXRzLFxyXG4gICAgUXVlcnksXHJcbiAgICBRdWVyeVZhbHVlUGFpcixcclxuICAgIE91dHB1dFR5cGUsXHJcbiAgICBTZWFyY2hUeXBlLFxyXG4gICAgVGFibGVEYXRhLFxyXG4gICAgUmVuZGVySW5mbyxcclxuICAgIFhWYWx1ZU1hcCxcclxuICAgIERhdGFNYXAsXHJcbn0gZnJvbSBcIi4vZGF0YVwiO1xyXG5pbXBvcnQgKiBhcyBjb2xsZWN0aW5nIGZyb20gXCIuL2NvbGxlY3RpbmdcIjtcclxuaW1wb3J0IHtcclxuICAgIFRyYWNrZXJTZXR0aW5ncyxcclxuICAgIERFRkFVTFRfU0VUVElOR1MsXHJcbiAgICBUcmFja2VyU2V0dGluZ1RhYixcclxufSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4vaGVscGVyXCI7XHJcbmltcG9ydCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuLy8gaW1wb3J0IHsgZ2V0RGFpbHlOb3RlU2V0dGluZ3MgfSBmcm9tIFwib2JzaWRpYW4tZGFpbHktbm90ZXMtaW50ZXJmYWNlXCI7XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBhcHA6IEFwcDtcclxuICAgICAgICBtb21lbnQ6ICgpID0+IE1vbWVudDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhY2tlciBleHRlbmRzIFBsdWdpbiB7XHJcbiAgICBzZXR0aW5nczogVHJhY2tlclNldHRpbmdzO1xyXG5cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgb2JzaWRpYW4tdHJhY2tlciBwbHVnaW5cIik7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgVHJhY2tlclNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFxyXG4gICAgICAgICAgICBcInRyYWNrZXJcIixcclxuICAgICAgICAgICAgdGhpcy5wb3N0cHJvY2Vzc29yLmJpbmQodGhpcylcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogXCJhZGQtbGluZS1jaGFydC10cmFja2VyXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiQWRkIExpbmUgQ2hhcnQgVHJhY2tlclwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hZGRDb2RlQmxvY2soT3V0cHV0VHlwZS5MaW5lKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6IFwiYWRkLWJhci1jaGFydC10cmFja2VyXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiQWRkIEJhciBDaGFydCBUcmFja2VyXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmFkZENvZGVCbG9jayhPdXRwdXRUeXBlLkJhciksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImFkZC1zdW1tYXJ5LXRyYWNrZXJcIixcclxuICAgICAgICAgICAgbmFtZTogXCJBZGQgU3VtbWFyeSBUcmFja2VyXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmFkZENvZGVCbG9jayhPdXRwdXRUeXBlLlN1bW1hcnkpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIERFRkFVTFRfU0VUVElOR1MsXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZERhdGEoKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICB9XHJcblxyXG4gICAgb251bmxvYWQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ1bmxvYWRpbmcgb2JzaWRpYW4tdHJhY2tlciBwbHVnaW5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsZXNJbkZvbGRlcihcclxuICAgICAgICBmb2xkZXI6IFRGb2xkZXIsXHJcbiAgICAgICAgaW5jbHVkZVN1YkZvbGRlcnM6IGJvb2xlYW4gPSB0cnVlXHJcbiAgICApOiBURmlsZVtdIHtcclxuICAgICAgICBsZXQgZmlsZXM6IFRGaWxlW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBmb2xkZXIuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZXh0ZW5zaW9uID09PSBcIm1kXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBURm9sZGVyICYmIGluY2x1ZGVTdWJGb2xkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5jb25jYXQodGhpcy5nZXRGaWxlc0luRm9sZGVyKGl0ZW0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZpbGVzKGZvbGRlclRvU2VhcmNoOiBzdHJpbmcsIGluY2x1ZGVTdWJGb2xkZXJzOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBmaWxlczogVEZpbGVbXSA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxyXG4gICAgICAgICAgICBub3JtYWxpemVQYXRoKGZvbGRlclRvU2VhcmNoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCFmb2xkZXIgfHwgIShmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xyXG4gICAgICAgICAgICAvLyBGb2xkZXIgbm90IGV4aXN0c1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpbGVzID0gZmlsZXMuY29uY2F0KHRoaXMuZ2V0RmlsZXNJbkZvbGRlcihmb2xkZXIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWxlcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUbyBiZSBtb3ZlZCB0byBjb2xsZWN0aW5nLnRzXHJcbiAgICBhZGRUb0RhdGFNYXAoXHJcbiAgICAgICAgZGF0YU1hcDogRGF0YU1hcCxcclxuICAgICAgICBkYXRlOiBzdHJpbmcsXHJcbiAgICAgICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgICAgIHZhbHVlOiBOdWxsYWJsZU51bWJlclxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhTWFwLmhhcyhkYXRlKSkge1xyXG4gICAgICAgICAgICBsZXQgcXVlcnlWYWx1ZVBhaXJzID0gbmV3IEFycmF5PFF1ZXJ5VmFsdWVQYWlyPigpO1xyXG4gICAgICAgICAgICBxdWVyeVZhbHVlUGFpcnMucHVzaCh7IHF1ZXJ5OiBxdWVyeSwgdmFsdWU6IHZhbHVlIH0pO1xyXG4gICAgICAgICAgICBkYXRhTWFwLnNldChkYXRlLCBxdWVyeVZhbHVlUGFpcnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRWYWx1ZVBhaXJzID0gZGF0YU1hcC5nZXQoZGF0ZSk7XHJcbiAgICAgICAgICAgIHRhcmdldFZhbHVlUGFpcnMucHVzaCh7IHF1ZXJ5OiBxdWVyeSwgdmFsdWU6IHZhbHVlIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0cHJvY2Vzc29yKFxyXG4gICAgICAgIHNvdXJjZTogc3RyaW5nLFxyXG4gICAgICAgIGVsOiBIVE1MRWxlbWVudCxcclxuICAgICAgICBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHRcclxuICAgICkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwicG9zdHByb2Nlc3NcIik7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgbGV0IHlhbWxUZXh0ID0gc291cmNlLnRyaW0oKTtcclxuICAgICAgICBsZXQgcmV0UmVuZGVySW5mbyA9IGdldFJlbmRlckluZm9Gcm9tWWFtbCh5YW1sVGV4dCwgdGhpcyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXRSZW5kZXJJbmZvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSByZXRSZW5kZXJJbmZvO1xyXG4gICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZW5kZXJJbmZvID0gcmV0UmVuZGVySW5mbyBhcyBSZW5kZXJJbmZvO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8pO1xyXG5cclxuICAgICAgICAvLyBHZXQgZmlsZXNcclxuICAgICAgICBsZXQgZmlsZXM6IFRGaWxlW107XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZmlsZXMgPSB0aGlzLmdldEZpbGVzKHJlbmRlckluZm8uZm9sZGVyKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBlLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZmlsZXMpO1xyXG5cclxuICAgICAgICAvLyBsZXQgZGFpbHlOb3Rlc1NldHRpbmdzID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYWlseU5vdGVzU2V0dGluZ3MpO1xyXG4gICAgICAgIC8vIEkgYWx3YXlzIGdvdCBZWVlZLU1NLUREIGZyb20gZGFpbHlOb3Rlc1NldHRpbmdzLmZvcm1hdFxyXG4gICAgICAgIC8vIFVzZSBvd24gc2V0dGluZ3MgcGFuZWwgZm9yIG5vd1xyXG5cclxuICAgICAgICAvLyBDb2xsZWN0aW5nIGRhdGEgdG8gZGF0YU1hcCBmaXJzdFxyXG4gICAgICAgIGxldCBtaW5EYXRlID0gd2luZG93Lm1vbWVudChcIlwiKTtcclxuICAgICAgICBsZXQgbWF4RGF0ZSA9IHdpbmRvdy5tb21lbnQoXCJcIik7XHJcbiAgICAgICAgbGV0IGZpbGVDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFNYXA6IERhdGFNYXAgPSBuZXcgTWFwKCk7IC8vIHtzdHJEYXRlOiBbcXVlcnk6IHZhbHVlLCAuLi5dfVxyXG4gICAgICAgIC8vIENvbGxlY3QgZGF0YSBmcm9tIGZpbGVzLCBlYWNoIGZpbGUgaGFzIG9uZSBkYXRhIHBvaW50IGZvciBlYWNoIHF1ZXJ5XHJcbiAgICAgICAgY29uc3QgbG9vcEZpbGVQcm9taXNlcyA9IGZpbGVzLm1hcChhc3luYyAoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWxlLmJhc2VuYW1lKTtcclxuICAgICAgICAgICAgLy8gR2V0IGZpbGVDYWNoZSBhbmQgY29udGVudFxyXG4gICAgICAgICAgICBsZXQgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBuZWVkRmlsZUNhY2hlID0gcmVuZGVySW5mby5xdWVyaWVzLnNvbWUoKHEpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0eXBlID0gcS5nZXRUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5Gcm9udG1hdHRlciB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuVGFnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5XaWtpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChuZWVkRmlsZUNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQ2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBuZWVkQ29udGVudCA9IHJlbmRlckluZm8ucXVlcmllcy5zb21lKChxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHEuZ2V0VHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IFNlYXJjaFR5cGUuVGFnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5UZXh0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gU2VhcmNoVHlwZS5kdkZpZWxkXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChuZWVkQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlLnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgeFZhbHVlIGFuZCBhZGQgaXQgaW50byB4VmFsdWVNYXAgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICBsZXQgeFZhbHVlTWFwOiBYVmFsdWVNYXAgPSBuZXcgTWFwKCk7IC8vIHF1ZXJ5SWQ6IHhWYWx1ZVxyXG4gICAgICAgICAgICBsZXQgc2tpcFRoaXNGaWxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHhEYXRhc2V0SWQgb2YgcmVuZGVySW5mby54RGF0YXNldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF4VmFsdWVNYXAuaGFzKHhEYXRhc2V0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhEYXRhc2V0SWQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdXNpbmcgZGF0ZSBpbiBmaWxlbmFtZSBhcyB4VmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVEYXRlID0gaGVscGVyLmdldERhdGVGcm9tRmlsZW5hbWUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWxlRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsZURhdGUuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZpbGUgXCIgKyBmaWxlLmJhc2VuYW1lICsgXCIgcmVqZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwVGhpc0ZpbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJmaWxlIFwiICsgZmlsZS5iYXNlbmFtZSArIFwiIGFjY2VwdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlckluZm8uc3RhcnREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRlIDwgcmVuZGVySW5mby5zdGFydERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFRoaXNGaWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVySW5mby5lbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRlID4gcmVuZGVySW5mby5lbmREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBUaGlzRmlsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBUaGlzRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwLnNldChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlRGF0ZS5mb3JtYXQocmVuZGVySW5mby5kYXRlRm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVDb3VudGVyKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IG1pbi9tYXggZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb3VudGVyID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0gZmlsZURhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZmlsZURhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRlIDwgbWluRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0gZmlsZURhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRlID4gbWF4RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZmlsZURhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeERhdGFzZXRRdWVyeSA9IHJlbmRlckluZm8ucXVlcmllc1t4RGF0YXNldElkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeERhdGFzZXRRdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoeERhdGFzZXRRdWVyeS5nZXRUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5Gcm9udG1hdHRlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5UYWc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFNlYXJjaFR5cGUuVGV4dDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VhcmNoVHlwZS5kdkZpZWxkOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChza2lwVGhpc0ZpbGUpIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeFZhbHVlTWFwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBxdWVyaWVzXHJcbiAgICAgICAgICAgIGxldCB5RGF0YXNldFF1ZXJpZXMgPSByZW5kZXJJbmZvLnF1ZXJpZXMuZmlsdGVyKChxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcS5nZXRUeXBlKCkgIT09IFNlYXJjaFR5cGUuVGFibGUgJiYgIXEudXNlZEFzWERhdGFzZXQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBsb29wUXVlcnlQcm9taXNlcyA9IHlEYXRhc2V0UXVlcmllcy5tYXAoYXN5bmMgKHF1ZXJ5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgeFZhbHVlIGZyb20gZmlsZSBpZiB4RGF0YXNldCBhc3NpZ25lZFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKHJlbmRlckluZm8ueERhdGFzZXQgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgeERhdGFzZXRJZCA9IHJlbmRlckluZm8ueERhdGFzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggZnJvbnRtYXR0ZXIgdGFnc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ2FjaGUgJiYgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBmcm9udG1hdHRlciB0YWdzLCBhbGxvdyBzaW1wbGUgdGFnIG9ubHlcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyVGFnKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBTZWFyY2ggZnJvbnRtYXR0ZXIgdGFnc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGZyb250bWF0dGVyIGtleXNcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZUNhY2hlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLkZyb250bWF0dGVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuZ2V0VGFyZ2V0KCkgIT09IFwidGFnc1wiXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBmcm9udG1hdHRlciBrZXlzXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIHdpa2kgbGlua3NcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUNhY2hlICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5XaWtpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21XaWtpKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2FjaGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VhcmNoIGlubGluZSB0YWdzXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgJiYgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLlRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tSW5saW5lVGFnKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIGlubGluZSB0YWdzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTZWFyY2ggdGV4dFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50ICYmIHF1ZXJ5LmdldFR5cGUoKSA9PT0gU2VhcmNoVHlwZS5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21UZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5mbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU1hcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFZhbHVlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gU2VhcmNoIHRleHRcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlYXJjaCBkdkZpZWxkXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgJiYgcXVlcnkuZ2V0VHlwZSgpID09PSBTZWFyY2hUeXBlLmR2RmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUR2RmllbGQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWFwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVNYXBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBzZWFyY2ggZHZGaWVsZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobG9vcFF1ZXJ5UHJvbWlzZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGxvb3BGaWxlUHJvbWlzZXMpO1xyXG5cclxuICAgICAgICAvLyBDb2xsZWN0IGRhdGEgZnJvbSBhIGZpbGUsIG9uZSBmaWxlIGNvbnRhaW5zIGZ1bGwgZGF0YXNldFxyXG4gICAgICAgIGxldCB0YWJsZVF1ZXJpZXMgPSByZW5kZXJJbmZvLnF1ZXJpZXMuZmlsdGVyKFxyXG4gICAgICAgICAgICAocSkgPT4gcS5nZXRUeXBlKCkgPT09IFNlYXJjaFR5cGUuVGFibGVcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIFNlcGFyYXRlIHF1ZXJpZXMgYnkgdGFibGVzIGFuZCB4RGF0YXNldHMveURhdGFzZXRzXHJcbiAgICAgICAgbGV0IHRhYmxlczogQXJyYXk8VGFibGVEYXRhPiA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHF1ZXJ5IG9mIHRhYmxlUXVlcmllcykge1xyXG4gICAgICAgICAgICBsZXQgZmlsZVBhdGggPSBxdWVyeS5nZXRQYXJlbnRUYXJnZXQoKTtcclxuICAgICAgICAgICAgbGV0IHRhYmxlSW5kZXggPSBxdWVyeS5nZXRBY2Nlc3NvcigpO1xyXG4gICAgICAgICAgICBsZXQgaXNYID0gcXVlcnkudXNlZEFzWERhdGFzZXQ7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFibGUgPSB0YWJsZXMuZmluZChcclxuICAgICAgICAgICAgICAgICh0KSA9PiB0LmZpbGVQYXRoID09PSBmaWxlUGF0aCAmJiB0LnRhYmxlSW5kZXggPT09IHRhYmxlSW5kZXhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUueERhdGFzZXQgPSBxdWVyeTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUueURhdGFzZXRzLnB1c2gocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmxlRGF0YSA9IG5ldyBUYWJsZURhdGEoZmlsZVBhdGgsIHRhYmxlSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS54RGF0YXNldCA9IHF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEueURhdGFzZXRzLnB1c2gocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFibGVzLnB1c2godGFibGVEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0YWJsZXMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB0YWJsZURhdGEgb2YgdGFibGVzKSB7XHJcbiAgICAgICAgICAgIC8vZXh0cmFjdCB4RGF0YXNldCBmcm9tIHF1ZXJ5XHJcbiAgICAgICAgICAgIGxldCB4RGF0YXNldFF1ZXJ5ID0gdGFibGVEYXRhLnhEYXRhc2V0O1xyXG4gICAgICAgICAgICBsZXQgeURhdGFzZXRRdWVyaWVzID0gdGFibGVEYXRhLnlEYXRhc2V0cztcclxuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0geERhdGFzZXRRdWVyeS5nZXRQYXJlbnRUYXJnZXQoKTtcclxuICAgICAgICAgICAgbGV0IHRhYmxlSW5kZXggPSB4RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGFibGUgdGV4dFxyXG4gICAgICAgICAgICBsZXQgdGV4dFRhYmxlID0gXCJcIjtcclxuICAgICAgICAgICAgZmlsZVBhdGggPSBmaWxlUGF0aCArIFwiLm1kXCI7XHJcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUGF0aChmaWxlUGF0aClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKGZpbGUgJiYgZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQ291bnRlcisrO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQoZmlsZS5wYXRoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRlc3QgdGhpcyBpbiBSZWdleDEwMVxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG5vdC1zby1zdHJpY3QgdGFibGUgc2VsZWN0b3JcclxuICAgICAgICAgICAgICAgIC8vICgoXFxyP1xcbil7Mn18XikoW15cXHJcXG5dKlxcfFteXFxyXFxuXSooXFxyP1xcbik/KSsoPz0oXFxyP1xcbil7Mn18JClcclxuICAgICAgICAgICAgICAgIGxldCBzdHJNRFRhYmxlUmVnZXggPVxyXG4gICAgICAgICAgICAgICAgICAgIFwiKChcXFxccj9cXFxcbil7Mn18XikoW15cXFxcclxcXFxuXSpcXFxcfFteXFxcXHJcXFxcbl0qKFxcXFxyP1xcXFxuKT8pKyg/PShcXFxccj9cXFxcbil7Mn18JClcIjtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0ck1EVGFibGVSZWdleCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWRUYWJsZVJlZ2V4ID0gbmV3IFJlZ0V4cChzdHJNRFRhYmxlUmVnZXgsIFwiZ21cIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2g7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kVGFibGUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBtZFRhYmxlUmVnZXguZXhlYyhjb250ZW50KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZFRhYmxlID09PSB0YWJsZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUYWJsZSA9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kVGFibGUrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGZpbGUgbm90IGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGV4dFRhYmxlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0YWJsZUxpbmVzID0gdGV4dFRhYmxlLnNwbGl0KC9cXHI/XFxuLyk7XHJcbiAgICAgICAgICAgIHRhYmxlTGluZXMgPSB0YWJsZUxpbmVzLmZpbHRlcigobGluZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmUgIT09IFwiXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZXQgbnVtQ29sdW1ucyA9IDA7XHJcbiAgICAgICAgICAgIGxldCBudW1EYXRhUm93cyA9IDA7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRhYmxlTGluZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgdGFibGUgZmlyc3RcclxuICAgICAgICAgICAgaWYgKHRhYmxlTGluZXMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgICAgIC8vIE11c3QgaGF2ZSBoZWFkZXIgYW5kIHNlcGFyYXRvciBsaW5lXHJcbiAgICAgICAgICAgICAgICBsZXQgaGVhZGVyTGluZSA9IHRhYmxlTGluZXMuc2hpZnQoKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJMaW5lID0gaGVscGVyLnRyaW1CeUNoYXIoaGVhZGVyTGluZSwgXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlclNwbGl0dGVkID0gaGVhZGVyTGluZS5zcGxpdChcInxcIik7XHJcbiAgICAgICAgICAgICAgICBudW1Db2x1bW5zID0gaGVhZGVyU3BsaXR0ZWQubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZXBMaW5lID0gdGFibGVMaW5lcy5zaGlmdCgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIHNlcExpbmUgPSBoZWxwZXIudHJpbUJ5Q2hhcihzZXBMaW5lLCBcInxcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3BlcExpbmVTcGxpdHRlZCA9IHNlcExpbmUuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY29sIG9mIHNwZXBMaW5lU3BsaXR0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbC5pbmNsdWRlcyhcIi1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIE5vdCBhIHZhbGlkIHNlcFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBudW1EYXRhUm93cyA9IHRhYmxlTGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobnVtRGF0YVJvd3MgPT0gMCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAvLyBnZXQgeCBkYXRhXHJcbiAgICAgICAgICAgIGxldCBjb2x1bW5YRGF0YXNldCA9IHhEYXRhc2V0UXVlcnkuZ2V0QWNjZXNzb3IoMSk7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5YRGF0YXNldCA+PSBudW1Db2x1bW5zKSBjb250aW51ZTtcclxuICAgICAgICAgICAgbGV0IHhWYWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBpbmRMaW5lID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGVMaW5lIG9mIHRhYmxlTGluZXMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhUm93ID0gaGVscGVyLnRyaW1CeUNoYXIodGFibGVMaW5lLnRyaW0oKSwgXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGFSb3dTcGxpdHRlZCA9IGRhdGFSb3cuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtblhEYXRhc2V0IDwgZGF0YVJvd1NwbGl0dGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gZGF0YVJvd1NwbGl0dGVkW2NvbHVtblhEYXRhc2V0XS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRlID0gd2luZG93Lm1vbWVudChkYXRhLCByZW5kZXJJbmZvLmRhdGVGb3JtYXQsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1pbkRhdGUuaXNWYWxpZCgpICYmICFtYXhEYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gZGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlIDwgbWluRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IGRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZSA+IG1heERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSBkYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlLmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeFZhbHVlcy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5kTGluZSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHhWYWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHhWYWx1ZXMuZXZlcnkodiA9PiB2ID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiTm8gdmFsaWQgWCB2YWx1ZSBmb3VuZFwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdldCB5IGRhdGFcclxuICAgICAgICAgICAgZm9yIChsZXQgeURhdGFzZXRRdWVyeSBvZiB5RGF0YXNldFF1ZXJpZXMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5PZkludGVyZXN0ID0geURhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigxKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBjb2x1bW5PZkludGVyZXN0OiAke2NvbHVtbk9mSW50ZXJlc3R9LCBudW1Db2x1bW5zOiAke251bUNvbHVtbnN9YCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT2ZJbnRlcmVzdCA+PSBudW1Db2x1bW5zKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kTGluZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0YWJsZUxpbmUgb2YgdGFibGVMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhUm93ID0gaGVscGVyLnRyaW1CeUNoYXIodGFibGVMaW5lLnRyaW0oKSwgXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhUm93U3BsaXR0ZWQgPSBkYXRhUm93LnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT2ZJbnRlcmVzdCA8IGRhdGFSb3dTcGxpdHRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBkYXRhUm93U3BsaXR0ZWRbY29sdW1uT2ZJbnRlcmVzdF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSBkYXRhLnNwbGl0KHlEYXRhc2V0UXVlcnkuZ2V0U2VwYXJhdG9yKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNwbGl0dGVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdChzcGxpdHRlZFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRMaW5lIDwgeFZhbHVlcy5sZW5ndGggJiYgeFZhbHVlc1tpbmRMaW5lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRvRGF0YU1hcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzW2luZExpbmVdLmZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHRlZC5sZW5ndGggPiB5RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDIpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LmdldEFjY2Vzc29yKDIpID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNwbGl0dGVkUGFydCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZWRbeURhdGFzZXRRdWVyeS5nZXRBY2Nlc3NvcigyKV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHNwbGl0dGVkUGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRMaW5lIDwgeFZhbHVlcy5sZW5ndGggJiYgeFZhbHVlc1tpbmRMaW5lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRvRGF0YU1hcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVzW2luZExpbmVdLmZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmRhdGVGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YXNldFF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluZExpbmUrKztcclxuICAgICAgICAgICAgICAgIH0gLy8gTG9vcCBvdmVyIHRhYmxlTGluZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbGVDb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCJObyBub3RlcyBmb3VuZCB1bmRlciB0aGUgZ2l2ZW4gc2VhcmNoIGNvbmRpdGlvblwiO1xyXG4gICAgICAgICAgICByZW5kZXJFcnJvck1lc3NhZ2UoY2FudmFzLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1pbkRhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1heERhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFNYXApO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBkYXRlIHJhbmdlXHJcbiAgICAgICAgaWYgKCFtaW5EYXRlLmlzVmFsaWQoKSB8fCAhbWF4RGF0ZS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBkYXRlIHJhbmdlXCI7XHJcbiAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbmRlckluZm8uc3RhcnREYXRlID09PSBudWxsICYmIHJlbmRlckluZm8uZW5kRGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBObyBkYXRlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSA9IG1pbkRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlID0gbWF4RGF0ZS5jbG9uZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uZW5kRGF0ZSA9PT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAocmVuZGVySW5mby5zdGFydERhdGUgPCBtYXhEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgPSBtYXhEYXRlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgcmFuZ2VcIjtcclxuICAgICAgICAgICAgICAgIHJlbmRlckVycm9yTWVzc2FnZShjYW52YXMsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgcmVuZGVySW5mby5lbmREYXRlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHJlbmRlckluZm8uc3RhcnREYXRlID09PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJJbmZvLmVuZERhdGUgPiBtaW5EYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmZvLnN0YXJ0RGF0ZSA9IG1pbkRhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSByYW5nZVwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzdGFydERhdGUgYW5kIGVuZERhdGUgYXJlIHZhbGlkXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIChyZW5kZXJJbmZvLnN0YXJ0RGF0ZSA8IG1pbkRhdGUgJiZcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJbmZvLmVuZERhdGUgPCBtaW5EYXRlKSB8fFxyXG4gICAgICAgICAgICAgICAgKHJlbmRlckluZm8uc3RhcnREYXRlID4gbWF4RGF0ZSAmJiByZW5kZXJJbmZvLmVuZERhdGUgPiBtYXhEYXRlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSByYW5nZVwiO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVuZGVySW5mby5zdGFydERhdGUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZW5kRGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIFJlc2hhcGUgZGF0YSBmb3IgcmVuZGVyaW5nXHJcbiAgICAgICAgbGV0IGRhdGFzZXRzID0gbmV3IERhdGFzZXRzKHJlbmRlckluZm8uc3RhcnREYXRlLCByZW5kZXJJbmZvLmVuZERhdGUpO1xyXG4gICAgICAgIGZvciAobGV0IHF1ZXJ5IG9mIHJlbmRlckluZm8ucXVlcmllcykge1xyXG4gICAgICAgICAgICAvLyBXZSBzdGlsbCBjcmVhdGUgYSBkYXRhc2V0IGZvciB4RGF0YXNldCxcclxuICAgICAgICAgICAgLy8gdG8ga2VlcCB0aGUgc2VxdWVuY2UgYW5kIG9yZGVyIG9mIHRhcmdldHNcclxuICAgICAgICAgICAgbGV0IGRhdGFzZXQgPSBkYXRhc2V0cy5jcmVhdGVEYXRhc2V0KHF1ZXJ5LCByZW5kZXJJbmZvKTtcclxuICAgICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgICAgIGxldCBjdXJEYXRlID0gcmVuZGVySW5mby5zdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGN1ckRhdGUgPD0gcmVuZGVySW5mby5lbmREYXRlO1xyXG4gICAgICAgICAgICAgICAgY3VyRGF0ZS5hZGQoMSwgXCJkYXlzXCIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3VyRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZGF0YU1hcCAtLT4ge2RhdGU6IFtxdWVyeTogdmFsdWUsIC4uLl19XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YU1hcC5oYXMoY3VyRGF0ZS5mb3JtYXQocmVuZGVySW5mby5kYXRlRm9ybWF0KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcXVlcnlWYWx1ZVBhaXJzID0gZGF0YU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KGN1ckRhdGUuZm9ybWF0KHJlbmRlckluZm8uZGF0ZUZvcm1hdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhaXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWlyLnF1ZXJ5LmVxdWFsVG8ocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlWYWx1ZVBhaXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgdmFsdWVzIG9mIHRoZSBzYW1lIGRheSBzYW1lIHF1ZXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYWlyID0gcXVlcnlWYWx1ZVBhaXJzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRQYWlyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZFBhaXIgPCBxdWVyeVZhbHVlUGFpcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kUGFpcisrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VmFsdWVQYWlyc1tpbmRQYWlyXS52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHF1ZXJ5VmFsdWVQYWlyc1tpbmRQYWlyXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGFzVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldC5zZXRWYWx1ZShjdXJEYXRlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVySW5mby5kYXRhc2V0cyA9IGRhdGFzZXRzO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlbmRlckluZm8uZGF0YXNldHMpO1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gcmVuZGVyKGNhbnZhcywgcmVuZGVySW5mbyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmVuZGVyRXJyb3JNZXNzYWdlKGNhbnZhcywgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFZGl0b3IoKTogRWRpdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KS5lZGl0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ29kZUJsb2NrKG91dHB1dFR5cGU6IE91dHB1dFR5cGUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50VmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXc7XHJcblxyXG4gICAgICAgIGlmICghKGN1cnJlbnRWaWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY29kZWJsb2NrVG9JbnNlcnQgPSBcIlwiO1xyXG4gICAgICAgIHN3aXRjaCAob3V0cHV0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE91dHB1dFR5cGUuTGluZTpcclxuICAgICAgICAgICAgICAgIGNvZGVibG9ja1RvSW5zZXJ0ID0gYFxcYFxcYFxcYCB0cmFja2VyXHJcbnNlYXJjaFR5cGU6IHRhZ1xyXG5zZWFyY2hUYXJnZXQ6IHRhZ05hbWVcclxuZm9sZGVyOiAvXHJcbnN0YXJ0RGF0ZTpcclxuZW5kRGF0ZTpcclxubGluZTpcclxuICAgIHRpdGxlOiBcIkxpbmUgQ2hhcnRcIlxyXG4gICAgeEF4aXNMYWJlbDogRGF0ZVxyXG4gICAgeUF4aXNMYWJlbDogVmFsdWVcclxuXFxgXFxgXFxgYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE91dHB1dFR5cGUuQmFyOlxyXG4gICAgICAgICAgICAgICAgY29kZWJsb2NrVG9JbnNlcnQgPSBgXFxgXFxgXFxgIHRyYWNrZXJcclxuc2VhcmNoVHlwZTogdGFnXHJcbnNlYXJjaFRhcmdldDogdGFnTmFtZVxyXG5mb2xkZXI6IC9cclxuc3RhcnREYXRlOlxyXG5lbmREYXRlOlxyXG5iYXI6XHJcbiAgICB0aXRsZTogXCJCYXIgQ2hhcnRcIlxyXG4gICAgeEF4aXNMYWJlbDogRGF0ZVxyXG4gICAgeUF4aXNMYWJlbDogVmFsdWVcclxuXFxgXFxgXFxgYDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE91dHB1dFR5cGUuU3VtbWFyeTpcclxuICAgICAgICAgICAgICAgIGNvZGVibG9ja1RvSW5zZXJ0ID0gYFxcYFxcYFxcYCB0cmFja2VyXHJcbnNlYXJjaFR5cGU6IHRhZ1xyXG5zZWFyY2hUYXJnZXQ6IHRhZ05hbWVcclxuZm9sZGVyOiAvXHJcbnN0YXJ0RGF0ZTpcclxuZW5kRGF0ZTpcclxuc3VtbWFyeTpcclxuICAgIHRlbXBsYXRlOiBcIkF2ZXJhZ2UgdmFsdWUgb2YgdGFnTmFtZSBpcyB7e2F2ZXJhZ2V9fVwiXHJcbiAgICBzdHlsZTogXCJjb2xvcjp3aGl0ZTtcIlxyXG5cXGBcXGBcXGBgO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb2RlYmxvY2tUb0luc2VydCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICBsZXQgdGV4dEluc2VydGVkID0gdGhpcy5pbnNlcnRUb05leHRMaW5lKGNvZGVibG9ja1RvSW5zZXJ0KTtcclxuICAgICAgICAgICAgaWYgKCF0ZXh0SW5zZXJ0ZWQpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbnNlcnRUb05leHRMaW5lKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBlZGl0b3IgPSB0aGlzLmdldEVkaXRvcigpO1xyXG5cclxuICAgICAgICBpZiAoZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICAgICAgICAgIGxldCBsaW5lTnVtYmVyID0gY3Vyc29yLmxpbmU7XHJcbiAgICAgICAgICAgIGxldCBsaW5lID0gZWRpdG9yLmdldExpbmUobGluZU51bWJlcik7XHJcblxyXG4gICAgICAgICAgICBjdXJzb3IuY2ggPSBsaW5lLmxlbmd0aDtcclxuICAgICAgICAgICAgZWRpdG9yLnNldFNlbGVjdGlvbihjdXJzb3IpO1xyXG4gICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihcIlxcblwiICsgdGV4dCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImEiLCJiIiwiTmFOIiwiZiIsImRlbHRhIiwiY29tcGFyZSIsImxlZnQiLCJ4IiwibG8iLCJoaSIsImxlbmd0aCIsIm1pZCIsImQiLCJhc2NlbmRpbmciLCJhc2NlbmRpbmdDb21wYXJhdG9yIiwiY2VudGVyIiwiaSIsInJpZ2h0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3RvciIsImUxMCIsIk1hdGgiLCJzcXJ0IiwiZTUiLCJlMiIsInRpY2tJbmNyZW1lbnQiLCJzdGFydCIsInN0b3AiLCJjb3VudCIsIm1heCIsInBvd2VyIiwiZmxvb3IiLCJsb2ciLCJMTjEwIiwiZXJyb3IiLCJwb3ciLCJ0aWNrU3RlcCIsInN0ZXAwIiwiYWJzIiwic3RlcDEiLCJ2YWx1ZXMiLCJ2YWx1ZW9mIiwidW5kZWZpbmVkIiwiaW5kZXgiLCJtaW4iLCJxdWlja3NlbGVjdCIsImFycmF5IiwiayIsIm4iLCJtIiwieiIsInMiLCJleHAiLCJzZCIsInQiLCJqIiwic3dhcCIsInF1YW50aWxlIiwicCIsIkZsb2F0NjRBcnJheSIsImZyb20iLCJudW1iZXJzIiwiaTAiLCJ2YWx1ZTAiLCJzdWJhcnJheSIsInN1bSIsInNsaWNlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInkiLCJudW1iZXIiLCJzY2FsZSIsIm9mZnNldCIsImJhbmR3aWR0aCIsInJvdW5kIiwiZW50ZXJpbmciLCJ0aGlzIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja0Zvcm1hdCIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwidHJhbnNmb3JtIiwiY29udGV4dCIsInRpY2tzIiwiZG9tYWluIiwiZm9ybWF0IiwiaWRlbnRpdHkiLCJzcGFjaW5nIiwicmFuZ2UiLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsImNvcHkiLCJzZWxlY3Rpb24iLCJwYXRoIiwic2VsZWN0QWxsIiwiZGF0YSIsInRpY2siLCJvcmRlciIsInRpY2tFeGl0IiwiZXhpdCIsInRpY2tFbnRlciIsImVudGVyIiwiYXBwZW5kIiwiYXR0ciIsImxpbmUiLCJzZWxlY3QiLCJ0ZXh0IiwibWVyZ2UiLCJpbnNlcnQiLCJ0cmFuc2l0aW9uIiwiaXNGaW5pdGUiLCJnZXRBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlIiwiZmlsdGVyIiwiZWFjaCIsIl8iLCJhcmd1bWVudHMiLCJjYWxsIiwidGlja1NpemUiLCJub29wIiwiZGlzcGF0Y2giLCJ0ZXN0IiwiRXJyb3IiLCJEaXNwYXRjaCIsInBhcnNlVHlwZW5hbWVzIiwidHlwZW5hbWVzIiwidHlwZXMiLCJ0cmltIiwic3BsaXQiLCJtYXAiLCJuYW1lIiwiaW5kZXhPZiIsImhhc093blByb3BlcnR5IiwidHlwZSIsImdldCIsImMiLCJzZXQiLCJjYWxsYmFjayIsImNvbmNhdCIsInB1c2giLCJjb25zdHJ1Y3RvciIsIm9uIiwidHlwZW5hbWUiLCJUIiwidGhhdCIsImFyZ3MiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJuYW1lc3BhY2VzIiwic3BhY2UiLCJsb2NhbCIsImNyZWF0b3JJbmhlcml0IiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwidXJpIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0b3JGaXhlZCIsImZ1bGxuYW1lIiwibmFtZXNwYWNlIiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXMiLCJjaGlsZE1hdGNoZXIiLCJub2RlIiwiZmluZCIsImNoaWxkRmlyc3QiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoaWxkcmVuIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImJpbmRJbmRleCIsImdyb3VwIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJNYXAiLCJrZXlWYWx1ZXMiLCJoYXMiLCJkZWxldGUiLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJzZXRBdHRyaWJ1dGUiLCJhdHRyQ29uc3RhbnROUyIsInNldEF0dHJpYnV0ZU5TIiwiYXR0ckZ1bmN0aW9uIiwidiIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsInN0cmluZyIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwiYXBwZW5kQ2hpbGQiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJvblJlbW92ZSIsIl9fb24iLCJvIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwib3B0aW9ucyIsIm9uQWRkIiwiZXZlbnQiLCJjb250ZXh0TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwiY2hpbGQiLCJqb2luIiwic3BsaWNlIiwiY29udGFpbnMiLCJyb290IiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiT2JqZWN0IiwiY3JlYXRlIiwiQ29sb3IiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJhcnJheUFsbCIsInNlbGVjdG9yQWxsIiwic2VsZWN0Q2hpbGQiLCJtYXRjaCIsImNoaWxkRmluZCIsInNlbGVjdENoaWxkcmVuIiwiY2hpbGRyZW5GaWx0ZXIiLCJtYXRjaGVyIiwiYmluZCIsImNvbnN0YW50IiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiZXhpdEdyb3VwIiwicHJldmlvdXMiLCJpMSIsIl9lbnRlciIsIl9leGl0Iiwic3BhcnNlIiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3J0IiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwibm9kZXMiLCJzaXplIiwiZ2V0QXR0cmlidXRlTlMiLCJwcm9wZXJ0eSIsImNsYXNzZWQiLCJodG1sIiwiY3JlYXRvciIsImJlZm9yZSIsImRlZXAiLCJbb2JqZWN0IE9iamVjdF0iLCJTeW1ib2wiLCJpdGVyYXRvciIsImJyaWdodGVyIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJSZWdFeHAiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwiY29sb3IiLCJsIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyIiwiZyIsInJnYkNvbnZlcnQiLCJvcGFjaXR5IiwicmdiX2Zvcm1hdEhleCIsImhleCIsInJnYl9mb3JtYXRSZ2IiLCJpc05hTiIsInRvU3RyaW5nIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTIiLCJkZWZpbmUiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwiZGFya2VyIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJsaW5lYXIiLCJyZ2JHYW1tYSIsImVuZCIsImNvbG9yUmdiIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsIkRhdGUiLCJzZXRUaW1lIiwicmVBIiwicmVCIiwic291cmNlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJxIiwib25lIiwiemVybyIsImRhdGUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwiaXNOdW1iZXJBcnJheSIsIm51bWJlckFycmF5IiwiaXNBcnJheSIsInZhbHVlT2YiLCJvYmplY3QiLCJzdmdOb2RlIiwiZGVncmVlcyIsIlBJIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInBvcCIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiRE9NTWF0cml4IiwiV2ViS2l0Q1NTTWF0cml4IiwiaXNJZGVudGl0eSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwiZnJhbWUiLCJ0aW1lb3V0IiwiaW50ZXJ2YWwiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwidDAiLCJ0MiIsInQxIiwiSW5maW5pdHkiLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJlbGFwc2VkIiwiVHlwZUVycm9yIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJpZCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInNjaGVkdWxlIiwic3RhdGUiLCJkdXJhdGlvbiIsImVhc2UiLCJpbml0IiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlTnVtYmVyIiwiaW50ZXJwb2xhdGVSZ2IiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZUludGVycG9sYXRlIiwic3R5bGVUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlVmFyeWluZyIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhY3RpdmUiLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiZm9ybWF0RGVjaW1hbFBhcnRzIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJjb3MiLCJkeSIsInNpbiIsImN3IiwiZGEiLCJyZWN0IiwidyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwiJSIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInJlcGxhY2UiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJYIiwidG9VcHBlckNhc2UiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmV2ZXJzZSIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwiU3RyaW5nIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsIm91dCIsImZvcm1hdFRyaW0iLCJjaGFyQ29kZUF0IiwicGFkZGluZyIsImluaXRSYW5nZSIsImZvcm1hdExvY2FsZSIsInVuaXQiLCJub3JtYWxpemUiLCJiaW1hcCIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsInRhcmdldCIsImNsYW1wIiwidW5rbm93biIsInRyYW5zZm9ybWVyIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnB1dCIsImludGVycG9sYXRlVmFsdWUiLCJyZXNjYWxlIiwiaW52ZXJ0IiwicmFuZ2VSb3VuZCIsImludGVycG9sYXRlUm91bmQiLCJ1IiwiY29udGludW91cyIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJuaWNlIiwicHJlc3RlcCIsIm1heEl0ZXIiLCJjZWlsIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJtaWxsaXNlY29uZCIsInNlY29uZCIsImdldE1pbGxpc2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaW51dGUiLCJnZXRTZWNvbmRzIiwiZHVyYXRpb25TZWNvbmQiLCJnZXRNaW51dGVzIiwiaG91ciIsImR1cmF0aW9uTWludXRlIiwiZ2V0SG91cnMiLCJkYXkiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkdXJhdGlvbkhvdXIiLCJ3ZWVrZGF5IiwiZ2V0RGF5IiwiZHVyYXRpb25EYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0aHVyc2RheSIsIm1vbnRoIiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwieWVhciIsInNldEZ1bGxZZWFyIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1RodXJzZGF5Iiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwidGltZVRpY2tzIiwidGltZVRpY2tJbnRlcnZhbCIsIndlZWsiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwidGlja2VyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdEYXRlIiwidGltZUZvcm1hdCIsIlNlYXJjaFR5cGUiLCJPdXRwdXRUeXBlIiwicGFkcyIsIi0iLCIwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJmb3JtYXRMb29rdXAiLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJVIiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJ0aW1lRGF5IiwidGltZVllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZElTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtOdW1iZXJJU08iLCJmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlck1vbmRheSIsInRpbWVNb25kYXkiLCJmb3JtYXRZZWFyIiwiZm9ybWF0WWVhcklTTyIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0RnVsbFllYXJJU08iLCJmb3JtYXRab25lIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZG93IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsIlVUQ2RJU08iLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDWWVhcklTTyIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXJJU08iLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJjYWxlbmRhciIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJmb3JtYXRNb250aCIsIkxpbmVhciIsIl9jb250ZXh0IiwiZGVmaW5lZCIsImN1cnZlIiwiY3VydmVMaW5lYXIiLCJidWZmZXIiLCJkZWZpbmVkMCIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJwb2ludCIsInBvaW50WCIsInBvaW50WSIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJBIiwiQiIsIkciLCJJIiwiWSIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsImNoYXJBdCIsIm5ld1BhcnNlIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJkZWZhdWx0TG9jYWxlIiwiYXJlYVN0YXJ0IiwiX2xpbmUiLCJhcmVhRW5kIiwiX3BvaW50IiwiRGF0YVBvaW50IiwiUXVlcnkiLCJzZWFyY2hUeXBlIiwic2VhcmNoVGFyZ2V0Iiwic2VwYXJhdG9yIiwiYWNjZXNzb3IiLCJhY2Nlc3NvcjEiLCJhY2Nlc3NvcjIiLCJ2YWx1ZUlzVGltZSIsInVzZWRBc1hEYXRhc2V0IiwiVGFibGUiLCJyZWdleCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsInBhcmVudFRhcmdldCIsIm90aGVyIiwic2VwIiwiRGF0YXNldCIsInF1ZXJ5IiwieU1pbiIsInlNYXgiLCJsaW5lSW5mbyIsImJhckluZm8iLCJpc1VzaW5nVGltZVZhbHVlIiwiaW5kIiwiZ2V0RGF0ZXMiLCJnZXRJbmRleE9mRGF0ZSIsInBlbmFsdHkiLCJhY2N1bVZhbHVlIiwiY291bnROb3ROdWxsIiwiY3VycmVudEluZGV4IiwiRGF0YXNldHMiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiZGF0ZXMiLCJkYXRhc2V0cyIsImRhdGVGb3JtYXQiLCJjcmVhdGlvbkRhdGEiLCJjdXJEYXRlIiwibW9tZW50IiwicmVuZGVySW5mbyIsImRhdGFzZXQiLCJzZXRJZCIsImdldElkIiwic2V0TmFtZSIsImRhdGFzZXROYW1lIiwic2V0TGluZUluZm8iLCJiYXIiLCJzZXRCYXJJbmZvIiwiZ2V0UXVlcnkiLCJlcXVhbFRvIiwiaWRzIiwiaW5jbHVkZXMiLCJnZXROYW1lIiwiUmVuZGVySW5mbyIsInF1ZXJpZXMiLCJ4RGF0YXNldCIsImZvbGRlciIsImRhdGVGb3JtYXRQcmVmaXgiLCJkYXRlRm9ybWF0U3VmZml4IiwiY29uc3RWYWx1ZSIsImlnbm9yZUF0dGFjaGVkVmFsdWUiLCJpZ25vcmVaZXJvVmFsdWUiLCJhY2N1bSIsImRhdGFBcmVhU2l6ZSIsIlNpemUiLCJtYXJnaW4iLCJNYXJnaW4iLCJ0b29sdGlwU2l6ZSIsImZpeGVkU2NhbGUiLCJmaXRQYW5lbFdpZHRoIiwiTGluZSIsInN1bW1hcnkiLCJDb21tb25DaGFydEluZm8iLCJ0aXRsZSIsInhBeGlzTGFiZWwiLCJ4QXhpc0NvbG9yIiwieEF4aXNMYWJlbENvbG9yIiwieUF4aXNMYWJlbCIsInlBeGlzQ29sb3IiLCJ5QXhpc0xhYmVsQ29sb3IiLCJ5QXhpc1VuaXQiLCJhbGxvd0luc3BlY3REYXRhIiwic2hvd0xlZ2VuZCIsImxlZ2VuZFBvc2l0aW9uIiwibGVnZW5kT3JpZW50YXRpb24iLCJsZWdlbmRCZ0NvbG9yIiwibGVnZW5kQm9yZGVyQ29sb3IiLCJMaW5lSW5mbyIsInN1cGVyIiwibGluZUNvbG9yIiwibGluZVdpZHRoIiwic2hvd0xpbmUiLCJzaG93UG9pbnQiLCJwb2ludENvbG9yIiwicG9pbnRCb3JkZXJDb2xvciIsInBvaW50Qm9yZGVyV2lkdGgiLCJwb2ludFNpemUiLCJmaWxsR2FwIiwieUF4aXNMb2NhdGlvbiIsIkJhckluZm8iLCJiYXJDb2xvciIsIlN1bW1hcnlJbmZvIiwidGVtcGxhdGUiLCJoZWlnaHQiLCJ0b3AiLCJib3R0b20iLCJUcmFuc2Zvcm0iLCJUYWJsZURhdGEiLCJmaWxlUGF0aCIsInRhYmxlSW5kZXgiLCJ5RGF0YXNldHMiLCJtZWFzdXJlVGV4dFNpemUiLCJzdHlsZUNsYXNzIiwiY29udGFpbmVyIiwiZDMuc2VsZWN0IiwidGV4dEJsb2NrIiwiZ2V0QkJveCIsInJlbmRlciIsImNhbnZhcyIsInNldFBlbmFsdHkiLCJhY2N1bXVsYXRlVmFsdWVzIiwiY2hhcnRFbGVtZW50cyIsImNyZWF0ZUFyZWFzIiwicmVuZGVyVGl0bGUiLCJyZW5kZXJYQXhpcyIsImRhdGFzZXRPbkxlZnRZQXhpcyIsImRhdGFzZXRPblJpZ2h0WUF4aXMiLCJ4RGF0YXNldElkcyIsImdldFhEYXRhc2V0SWRzIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXRSZW5kZXJMZWZ0WUF4aXMiLCJyZW5kZXJZQXhpcyIsImxlZnRZQXhpcyIsImxlZnRZU2NhbGUiLCJkYXRhc2V0SWQiLCJnZXREYXRhc2V0QnlJZCIsInJlbmRlckxpbmUiLCJyZW5kZXJQb2ludHMiLCJyZXRSZW5kZXJSaWdodFlBeGlzIiwicmlnaHRZQXhpcyIsInJpZ2h0WVNjYWxlIiwicmVuZGVyTGVnZW5kIiwic2V0Q2hhcnRTY2FsZSIsInJlbmRlckxpbmVDaGFydCIsIkJhciIsInRvdGFsTnVtT2ZCYXJTZXRzIiwiY3VyckJhclNldCIsInJlbmRlckJhciIsInJlbmRlckJhckNoYXJ0IiwiU3VtbWFyeSIsIm91dHB1dFN1bW1hcnkiLCJyZXBsYWNlTWFwIiwiZW50cmllcyIsImZuU2V0IiwiZm9yRWFjaCIsImZuTmFtZSIsImZuIiwiaXNJbnRlZ2VyIiwic3RyUmVwbGFjZVJlZ2V4Iiwic3RyUmVzdWx0Iiwib3V0cHV0TGluZXMiLCJvdXRwdXRMaW5lIiwicmVuZGVyU3VtbWFyeSIsImNoYXJ0SW5mbyIsInhEb21haW4iLCJkMy5leHRlbnQiLCJ4U2NhbGUiLCJ0aW1lTW9udGgiLCJ0aW1lV2VlayIsInRpbWVIb3VyIiwidGltZU1pbnV0ZSIsInRpbWVTZWNvbmQiLCJkM1xyXG4gICAgICAgIC5zY2FsZVRpbWUiLCJkMy50aW1lRGF5IiwiZDMudGltZVdlZWsiLCJkMy50aW1lTW9udGgiLCJkMy50aW1lWWVhciIsImdldFRpY2tJbnRlcnZhbCIsImQzLnRpbWVGb3JtYXQiLCJnZXRYVGlja0Zvcm1hdCIsInhBeGlzR2VuIiwieEF4aXMiLCJkYXRhQXJlYSIsInRleHRTaXplIiwieEF4aXNUaWNrTGFiZWxzIiwidGlja0xhYmVsSGVpZ2h0IiwiZXhwYW5kQXJlYSIsImdyYXBoQXJlYSIsImRhdGFzZXRJZHMiLCJ5TWluT2ZEYXRhc2V0cyIsInlNYXhPZkRhdGFzZXRzIiwidG1wVmFsdWVJc1RpbWUiLCJnZXRZTWluIiwiZ2V0WU1heCIsInlNaW5Bc3NpZ25lZCIsInlNYXhBc3NpZ25lZCIsInlUbXAiLCJ5VG1wQXNzaWduZWQiLCJ5TG93ZXIiLCJ5VXBwZXIiLCJ5RXh0ZW50IiwieVNjYWxlIiwiZDMuc2NhbGVMaW5lYXIiLCJ5QXhpc0xhYmVsVGV4dCIsInlBeGlzR2VuIiwieUF4aXNVbml0VGV4dCIsImQzLmF4aXNSaWdodCIsInlBeGlzIiwieUF4aXNMaW5lIiwieUF4aXNUaWNrcyIsInlBeGlzVGlja0xhYmVscyIsInlUaWNrRm9ybWF0IiwiZDMudGlja0Zvcm1hdCIsInlMb3dlckxhYmVsU2l6ZSIsInlVcHBlckxhYmVsU2l6ZSIsIm1heFRpY2tMYWJlbFdpZHRoIiwieUF4aXNMYWJlbFNpemUiLCJ5QXhpc1dpZHRoIiwibW92ZUFyZWEiLCJsaW5lR2VuIiwiZDNcclxuICAgICAgICAgICAgLmxpbmUiLCJkb3RzIiwidG9vbHRpcCIsInRvb2x0aXBMYWJlbCIsInRvb2x0aXBMYWJlbERhdGUiLCJ0b29sdGlwTGFiZWxWYWx1ZSIsInNvdXJjZUV2ZW50IiwiY3VycmVudFRhcmdldCIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsInBhZ2VYIiwicGFnZVkiLCJkMy5wb2ludGVyIiwiYmFyU2V0V2lkdGgiLCJnZXRMZW5ndGgiLCJiYXJXaWR0aCIsImJhcnMiLCJwb3J0aW9uVmlzaWJsZSIsInRpdGxlSGVpZ2h0IiwieEF4aXNIZWlnaHQiLCJsZWZ0WUF4aXNXaWR0aCIsInJpZ2h0WUF4aXNXaWR0aCIsImdldE5hbWVzIiwibmFtZVNpemVzIiwiaW5kTWF4TmFtZSIsIm1heE5hbWVXaWR0aCIsImNoYXJhY3RlcldpZHRoIiwibmFtZUhlaWdodCIsIm51bU5hbWVzIiwieFNwYWNpbmciLCJ5U3BhY2luZyIsIm1hcmtlcldpZHRoIiwibGVnZW5kV2lkdGgiLCJsZWdlbmRIZWlnaHQiLCJkMy5zdW0iLCJsZWdlbmRYIiwibGVnZW5kWSIsImxlZ2VuZCIsImxlZ2VuZEJnIiwiZmlyc3RNYXJrZXJYIiwiZmlyc3RNYXJrZXJZIiwiZmlyc3RMYWJlbFgiLCJmaXJzdExhYmVsWSIsIm51bUVsZW1zRXhjbHVkZWQiLCJnZXRMaW5lSW5mbyIsImdldEJhckluZm8iLCJuYW1lTGFiZWxzIiwiY3VyclJlbmRlclBvc1giLCJjdXJyUmVuZGVyUG9zWDIiLCJ0aXRsZVNpemUiLCJfY2FudmFzIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJkM1xyXG4gICAgICAgIC5zZWxlY3QiLCJhcmVhIiwiYWRkVyIsImFkZEgiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsInNoaWZ0WCIsInNoaWZ0WSIsInRyYW5zIiwiZDMubWluIiwiZ2V0VmFsdWVzIiwiZDMubWF4IiwiZ2V0TGVuZ3RoTm90TnVsbCIsIm1heFN0cmVhayIsInN0cmVhayIsImRhdGFQb2ludCIsIm1heEJyZWFrIiwibGFzdFN0cmVhayIsImF2ZXJhZ2UiLCJtZWRpYW4iLCJ2YXJpYW5jZSIsIm1lYW4iLCJkMy52YXJpYW5jZSIsInJlbmRlckVycm9yTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIkRFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQiLCJERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCIsIkRFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCIsInNob3VsZFVzZVBlcmlvZGljTm90ZXNTZXR0aW5ncyIsInBlcmlvZGljaXR5IiwicGVyaW9kaWNOb3RlcyIsImFwcCIsInBsdWdpbnMiLCJnZXRQbHVnaW4iLCJzZXR0aW5ncyIsImVuYWJsZWQiLCJnZXREYWlseU5vdGVTZXR0aW5ncyIsImludGVybmFsUGx1Z2lucyIsImRhaWx5IiwiZ2V0UGx1Z2luQnlJZCIsImluc3RhbmNlIiwiZXJyIiwiY29uc29sZSIsImluZm8iLCJnZXRXZWVrbHlOb3RlU2V0dGluZ3MiLCJwbHVnaW5NYW5hZ2VyIiwiY2FsZW5kYXJTZXR0aW5ncyIsInBlcmlvZGljTm90ZXNTZXR0aW5ncyIsIndlZWtseSIsIndlZWtseU5vdGVGb3JtYXQiLCJ3ZWVrbHlOb3RlRm9sZGVyIiwid2Vla2x5Tm90ZVRlbXBsYXRlIiwiZ2V0TW9udGhseU5vdGVTZXR0aW5ncyIsIm1vbnRobHkiLCJwYXJ0U2VnbWVudHMiLCJwYXJ0cyIsIm5ld1BhcnRzIiwicGFydCIsInVuc2hpZnQiLCJhc3luYyIsImdldE5vdGVQYXRoIiwiZGlyZWN0b3J5IiwiZmlsZW5hbWUiLCJlbmRzV2l0aCIsIm9ic2lkaWFuIiwibm9ybWFsaXplUGF0aCIsImRpcnMiLCJkaXIiLCJ2YXVsdCIsImdldEFic3RyYWN0RmlsZUJ5UGF0aCIsImNyZWF0ZUZvbGRlciIsImVuc3VyZUZvbGRlckV4aXN0cyIsImdldFRlbXBsYXRlSW5mbyIsIm1ldGFkYXRhQ2FjaGUiLCJ0ZW1wbGF0ZVBhdGgiLCJ0ZW1wbGF0ZUZpbGUiLCJnZXRGaXJzdExpbmtwYXRoRGVzdCIsImNvbnRlbnRzIiwiY2FjaGVkUmVhZCIsImZvbGRNYW5hZ2VyIiwibG9hZCIsIk5vdGljZSIsImdldERhdGVVSUQiLCJncmFudWxhcml0eSIsInN0YXJ0T2YiLCJyZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyIsImdldERhdGVGcm9tRmlsZSIsImZpbGUiLCJnZXREYXRlRnJvbUZpbGVuYW1lIiwiYmFzZW5hbWUiLCJub3RlRGF0ZSIsImlzVmFsaWQiLCJjbGVhbkZvcm1hdCIsImlzRm9ybWF0QW1iaWd1b3VzIiwiRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciIsImNyZWF0ZURhaWx5Tm90ZSIsInRlbXBsYXRlQ29udGVudHMiLCJJRm9sZEluZm8iLCJub3JtYWxpemVkUGF0aCIsImNyZWF0ZWRGaWxlIiwiX3RpbWVPckRhdGUiLCJjYWxjIiwidGltZURlbHRhIiwibW9tZW50Rm9ybWF0IiwiY3VycmVudERhdGUiLCJzdWJ0cmFjdCIsInNhdmUiLCJXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciIsImdldERheU9mV2Vla051bWVyaWNhbFZhbHVlIiwiZGF5T2ZXZWVrTmFtZSIsIndlZWtTdGFydCIsImxvY2FsZURhdGEiLCJfd2VlayIsImRheXNPZldlZWsiLCJzaGlmdCIsImdldERheXNPZldlZWsiLCJjcmVhdGVXZWVrbHlOb3RlIiwiZGF5T2ZXZWVrIiwiTW9udGhseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIiwiY3JlYXRlTW9udGhseU5vdGUiLCJhcHBIYXNXZWVrbHlOb3Rlc1BsdWdpbkxvYWRlZCIsImFwcEhhc01vbnRobHlOb3Rlc1BsdWdpbkxvYWRlZCIsImRhaWx5Tm90ZXNQbHVnaW4iLCJkYWlseU5vdGVzRm9sZGVyIiwiZGFpbHlOb3RlcyIsIlZhdWx0IiwicmVjdXJzZUNoaWxkcmVuIiwibm90ZSIsIlRGaWxlIiwiZGF0ZVN0cmluZyIsIm1vbnRobHlOb3RlcyIsIm1vbnRobHlOb3Rlc0ZvbGRlciIsIndlZWtseU5vdGVzIiwid2Vla2x5Tm90ZXNGb2xkZXIiLCJmdWxsUGF0aCIsImJhc2UiLCJsYXN0SW5kZXhPZiIsImdldFNldHRpbmdzIiwic3RyVG9Cb29sIiwic3RyIiwidmFsaWRhdGVTZWFyY2hUeXBlIiwidmFsaWRhdGVZQXhpc0xvY2F0aW9uIiwibG9jYXRpb24iLCJ2YWxpZGF0ZUNvbG9yIiwiZ2V0Qm9vbEFycmF5RnJvbUlucHV0IiwibnVtRGF0YXNldCIsImRlZmF1bHRWYWx1ZSIsImFsbG93Tm9WYWxpZFZhbHVlIiwibnVtVmFsaWRWYWx1ZSIsImN1cnIiLCJwcmV2IiwibGFzdCIsInNwbGl0dGVkIiwiY3VyckJvb2wiLCJpbnB1dEJvb2wiLCJnZXROdW1iZXJBcnJheUZyb21JbnB1dCIsImN1cnJOdW0iLCJpbnB1dE51bSIsImdldFN0cmluZ0FycmF5RnJvbUlucHV0IiwidmFsaWRhdG9yIiwicGFyc2VDb21tb25DaGFydEluZm8iLCJ5YW1sIiwicmV0WUF4aXNMYWJlbCIsInJldFlBeGlzQ29sb3IiLCJyZXRZQXhpc0xhYmVsQ29sb3IiLCJyZXRZQXhpc1VuaXQiLCJyZXRZTWluIiwicmV0WU1heCIsImdldEF2YWlsYWJsZUtleXNPZkNsYXNzIiwib2JqIiwia2V5cyIsIm9iamVjdEtleXMiLCJhZGRUb0RhdGFNYXAiLCJkYXRhTWFwIiwicXVlcnlWYWx1ZVBhaXJzIiwiREVGQVVMVF9TRVRUSU5HUyIsIlRyYWNrZXJTZXR0aW5nVGFiIiwiUGx1Z2luU2V0dGluZ1RhYiIsInBsdWdpbiIsImNvbnRhaW5lckVsIiwiU2V0dGluZyIsInNldERlc2MiLCJhZGRUZXh0Iiwic2V0UGxhY2Vob2xkZXIiLCJzZXRWYWx1ZSIsIm9uQ2hhbmdlIiwic2F2ZVNldHRpbmdzIiwidHJpbUJ5Q2hhciIsImNoYXIiLCJhcnIiLCJmaXJzdCIsImZpbmRJbmRleCIsImZpbGVCYXNlTmFtZSIsInN0YXJ0c1dpdGgiLCJUcmFja2VyIiwiUGx1Z2luIiwibG9hZFNldHRpbmdzIiwiYWRkU2V0dGluZ1RhYiIsInJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IiLCJwb3N0cHJvY2Vzc29yIiwiYWRkQ29tbWFuZCIsImFkZENvZGVCbG9jayIsImxvYWREYXRhIiwic2F2ZURhdGEiLCJpbmNsdWRlU3ViRm9sZGVycyIsImZpbGVzIiwiaXRlbSIsImV4dGVuc2lvbiIsIlRGb2xkZXIiLCJnZXRGaWxlc0luRm9sZGVyIiwiZm9sZGVyVG9TZWFyY2giLCJlbCIsImN0eCIsInJldFJlbmRlckluZm8iLCJ5YW1sVGV4dCIsInBhcnNlWWFtbCIsImtleXNGb3VuZEluWUFNTCIsInBpZWNlIiwibnVtRGF0YXNldHMiLCJyZXRTZWFyY2hUeXBlIiwic3RyVHlwZSIsIlRhZyIsIkZyb250bWF0dGVyIiwiV2lraSIsIlRleHQiLCJkdkZpZWxkIiwibXVsdGlwbGVWYWx1ZVNwYXJhdG9yIiwicmV0TXVsdGlwbGVWYWx1ZVNwYXJhdG9yIiwic2V0U2VwYXJhdG9yIiwia2V5c09mUmVuZGVySW5mbyIsImFkZGl0aW9uYWxBbGxvd2VkS2V5cyIsImFic3RyYWN0Rm9sZGVyIiwic3RyU3RhcnREYXRlIiwic3RyRW5kRGF0ZSIsInJldFhEYXRhc2V0IiwicmV0RGF0YXNldE5hbWUiLCJpbmRVbnRpdGxlZCIsIlNldCIsInJldENvbnN0VmFsdWUiLCJyZXRJZ25vcmVBdHRhY2hlZFZhbHVlIiwicmV0SWdub3JlWmVyb1ZhbHVlIiwicmV0QWNjdW0iLCJyZXRQZW5hbHR5IiwicmV0TWFyZ2luIiwiaGFzTGluZSIsImhhc0JhciIsImhhc1N1bW1hcnkiLCJzdW1PdXRwdXQiLCJrZXlzT2ZMaW5lSW5mbyIsInJldFBhcnNlQ29tbW9uQ2hhcnRJbmZvIiwicmV0TGluZUNvbG9yIiwicmV0TGluZVdpZHRoIiwicmV0U2hvd0xpbmUiLCJyZXRTaG93UG9pbnQiLCJyZXRQb2ludENvbG9yIiwicmV0UG9pbnRCb3JkZXJDb2xvciIsInJldFBvaW50Qm9yZGVyV2lkdGgiLCJyZXRQb2ludFNpemUiLCJyZXRGaWxsR2FwIiwicmV0WUF4aXNMb2NhdGlvbiIsImtleXNPZkJhckluZm8iLCJyZXRCYXJDb2xvciIsImtleXNPZlN1bW1hcnlJbmZvIiwiZ2V0UmVuZGVySW5mb0Zyb21ZYW1sIiwiZ2V0RmlsZXMiLCJtZXNzYWdlIiwibWluRGF0ZSIsIm1heERhdGUiLCJmaWxlQ291bnRlciIsImxvb3BGaWxlUHJvbWlzZXMiLCJmaWxlQ2FjaGUiLCJzb21lIiwiZ2V0VHlwZSIsImdldEZpbGVDYWNoZSIsImNvbnRlbnQiLCJhZGFwdGVyIiwicmVhZCIsInhWYWx1ZU1hcCIsInNraXBUaGlzRmlsZSIsInhEYXRhc2V0SWQiLCJmaWxlRGF0ZSIsImhlbHBlci5nZXREYXRlRnJvbUZpbGVuYW1lIiwibG9vcFF1ZXJ5UHJvbWlzZXMiLCJmcm9udE1hdHRlciIsImZyb250bWF0dGVyIiwiZnJvbnRNYXR0ZXJUYWdzIiwidGFncyIsInRhZ01lYXN1cmUiLCJ0YWdFeGlzdCIsInRhZyIsImdldFRhcmdldCIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tRnJvbnRtYXR0ZXJUYWciLCJ0b1BhcnNlIiwidGltZVZhbHVlIiwic2V0VXNpbmdUaW1lVmFsdWUiLCJkaWZmIiwiZ2V0UGFyZW50VGFyZ2V0IiwiZ2V0U2VwYXJhdG9yIiwiZ2V0QWNjZXNzb3IiLCJzcGxpdHRlZFBhcnQiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbUZyb250bWF0dGVyS2V5IiwibGlua3MiLCJsaW5rTWVhc3VyZSIsImxpbmtFeGlzdCIsImxpbmsiLCJsaW5rVmFsdWUiLCJjb2xsZWN0aW5nLmNvbGxlY3REYXRhRnJvbVdpa2kiLCJ0YWdOYW1lIiwiaGFzaFRhZ1JlZ2V4IiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21JbmxpbmVUYWciLCJzdHJUZXh0UmVnZXgiLCJ0ZXh0UmVnZXgiLCJ0ZXh0TWVhc3VyZSIsInRleHRFeGlzdCIsImNvbGxlY3RpbmcuY29sbGVjdERhdGFGcm9tVGV4dCIsImR2VGFyZ2V0IiwiY29sbGVjdGluZy5jb2xsZWN0RGF0YUZyb21EdkZpZWxkIiwiYWxsIiwidGFibGVRdWVyaWVzIiwidGFibGVzIiwiaXNYIiwidGFibGUiLCJ0YWJsZURhdGEiLCJ4RGF0YXNldFF1ZXJ5IiwieURhdGFzZXRRdWVyaWVzIiwidGV4dFRhYmxlIiwibWRUYWJsZVJlZ2V4IiwiaW5kVGFibGUiLCJ0YWJsZUxpbmVzIiwibnVtQ29sdW1ucyIsIm51bURhdGFSb3dzIiwiaGVhZGVyTGluZSIsImhlbHBlci50cmltQnlDaGFyIiwic2VwTGluZSIsInNwZXBMaW5lU3BsaXR0ZWQiLCJjb2wiLCJjb2x1bW5YRGF0YXNldCIsInhWYWx1ZXMiLCJ0YWJsZUxpbmUiLCJkYXRhUm93U3BsaXR0ZWQiLCJ5RGF0YXNldFF1ZXJ5IiwiY29sdW1uT2ZJbnRlcmVzdCIsImluZExpbmUiLCJjcmVhdGVEYXRhc2V0IiwicGFpciIsImhhc1ZhbHVlIiwiaW5kUGFpciIsIndvcmtzcGFjZSIsImdldEFjdGl2ZVZpZXdPZlR5cGUiLCJNYXJrZG93blZpZXciLCJlZGl0b3IiLCJvdXRwdXRUeXBlIiwiYWN0aXZlTGVhZiIsInZpZXciLCJjb2RlYmxvY2tUb0luc2VydCIsImluc2VydFRvTmV4dExpbmUiLCJnZXRFZGl0b3IiLCJjdXJzb3IiLCJnZXRDdXJzb3IiLCJsaW5lTnVtYmVyIiwiZ2V0TGluZSIsImNoIiwic2V0U2VsZWN0aW9uIiwicmVwbGFjZVNlbGVjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0ZBcUVPLFNBQVNBLEVBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTlDLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssSUFDcEYsU0FBU0MsRUFBU0osR0FBUyxJQUFNQyxFQUFLTixFQUFpQixNQUFFSyxJQUFXLE1BQU9HLEdBQUtMLEVBQU9LLElBQ3ZGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVMLEVBSWFLLEVBQU9DLEtBQU9ULEVBQVFRLEVBQU9MLFFBSjFDQSxFQUl5REssRUFBT0wsTUFKaERBLGFBQWlCTixFQUFJTSxFQUFRLElBQUlOLEdBQUUsU0FBVUcsR0FBV0EsRUFBUUcsT0FJVE8sS0FBS1IsRUFBV0ssR0FDbEdILEdBQU1OLEVBQVlBLEVBQVVhLE1BQU1oQixFQUFTQyxHQUFjLEtBQUtTLFdDM0V2RCxXQUFT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
